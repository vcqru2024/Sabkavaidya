<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddTemplate.Text" xml:space="preserve">
    <value>Add Template</value>
  </data>
  <data name="AddTFieldSet.Text" xml:space="preserve">
    <value>Content Set</value>
  </data>
  <data name="AddTName.Text" xml:space="preserve">
    <value>Template Name</value>
  </data>
  <data name="AdminTemplates.Text" xml:space="preserve">
    <value>Admin Templates</value>
  </data>
  <data name="ArticleTemplates.Text" xml:space="preserve">
    <value>Template/Article</value>
  </data>
  <data name="BAddTemplates.Text" xml:space="preserve">
    <value>Add Template</value>
  </data>
  <data name="BEditTemplates.Text" xml:space="preserve">
    <value>Save Template</value>
  </data>
  <data name="DesignTemplate.Text" xml:space="preserve">
    <value>Design Template</value>
  </data>
  <data name="HelpTemplate.Text" xml:space="preserve">
    <value>Template Help</value>
  </data>
  <data name="HelpTemplateLocation.Text" xml:space="preserve">
    <value>Template Location</value>
  </data>
  <data name="HelpTemplateName.Text" xml:space="preserve">
    <value>Current Template: </value>
  </data>
  <data name="HelpTemplateTokens.Text" xml:space="preserve">
    <value>This template allows following Tokens in the Template file:</value>
  </data>
  <data name="Return.Text" xml:space="preserve">
    <value>Return</value>
  </data>
  <data name="ArticleMode.Text" xml:space="preserve">
    <value>Article</value>
  </data>
  <data name="ListMode.Text" xml:space="preserve">
    <value>List</value>
  </data>
  <data name="SelectModelbl.text" xml:space="preserve">
    <value>Select mode: </value>
  </data>
  <data name="Helplbl.Text" xml:space="preserve">
    <value>Some tags for help:</value>
  </data>
  <data name="UrlExplain.Text" xml:space="preserve">
    <value>Link to full article. Recommended only for the "List Mode".</value>
  </data>
  <data name="Urllbl.Text" xml:space="preserve">
    <value>&amp;lt;a href="@Item.Content.Url" &amp;gt; Read More... &amp;lt;/a&amp;gt;</value>
  </data>
  <data name="ExtractExplain.Text" xml:space="preserve">
    <value>Extract text. Recommended only for the "List Mode".</value>
  </data>
  <data name="Extractlbl.Text" xml:space="preserve">
    <value>@Item.Content.Extract</value>
  </data>
  <data name="AddTemplatesHeadlbl.Text" xml:space="preserve">
    <value>Add templates</value>
  </data>
  <data name="BAddTemplate.Text" xml:space="preserve">
    <value>Add a new template</value>
  </data>
  <data name="DesignTemplatesHeadlbl.Text" xml:space="preserve">
    <value>Design templates</value>
  </data>
  <data name="ExampleTemplatelbl.Text" xml:space="preserve">
    <value>Example template: </value>
  </data>
  <data name="headerlbl.Text" xml:space="preserve">
    <value>Header</value>
  </data>
  <data name="HelpTemplatesHeadlbl.Text" xml:space="preserve">
    <value>Help templates</value>
  </data>
  <data name="looplbl.Text" xml:space="preserve">
    <value>Loop</value>
  </data>
  <data name="TemplateHeadlbl.Text" xml:space="preserve">
    <value>Admin templates</value>
  </data>
  <data name="Itemlbl.Text" xml:space="preserve">
    <value>Razor tokens for a list:</value>
  </data>
  <data name="Modellbl.Text" xml:space="preserve">
    <value>Razor tokens for an article:</value>
  </data>
  <data name="BReturnAddTemplate.Text" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="FilterFSetlbl.Text" xml:space="preserve">
    <value>Filter by content set:</value>
  </data>
  <data name="CatTagMode.Text" xml:space="preserve">
    <value>Category/Tag </value>
  </data>
  <data name="ArchiveMode.Text" xml:space="preserve">
    <value>Archive</value>
  </data>
  <data name="lblTemplateType.Text" xml:space="preserve">
    <value>What's the template to be used for?</value>
  </data>
  <data name="PleaseSelect.Text" xml:space="preserve">
    <value>Please select</value>
  </data>
  <data name="Content.Header" xml:space="preserve">
    <value>Content</value>
  </data>
  <data name="CreatedDate.Header" xml:space="preserve">
    <value>Created Date</value>
  </data>
  <data name="FieldName.Header" xml:space="preserve">
    <value>Field Name</value>
  </data>
  <data name="FieldSetName.Header" xml:space="preserve">
    <value>Content Set Name</value>
  </data>
  <data name="TemplateName.Header" xml:space="preserve">
    <value>Template Name</value>
  </data>
  <data name="AllTemplates.Text" xml:space="preserve">
    <value>All Templates</value>
  </data>
  <data name="helpTemplateTypes.Text" xml:space="preserve">
    <value>&lt;strong&gt;Article&lt;/strong&gt; - An article would be the full entry as viewed when clicked through from the list view (the actual blog post or news item in full).&lt;br/&gt;&lt;br/&gt;

&lt;strong&gt;List&lt;/strong&gt; - Images on a gallery page can also be shown in the list format (like a list of blog posts or events on a page, optionally showing other fields from your content set such as an image).&lt;br/&gt;&lt;br/&gt;

&lt;strong&gt;Category/Tag List&lt;/strong&gt; - Categories &amp; Tags are used to group content together under a particular subject or type (e.g., ‘marketing’ or ‘seo’) and can be optionally added to articles.  Tags can be used to find articles which have similar content.  &lt;br/&gt;&lt;br/&gt;

&lt;strong&gt;Archive&lt;/strong&gt; - An archive is another way of organising posts by date.  We use an archive on our blog page which splits posts into year and month.&lt;br/&gt;&lt;br/&gt;</value>
  </data>
  <data name="Required.Text" xml:space="preserve">
    <value>Required</value>
  </data>
</root>