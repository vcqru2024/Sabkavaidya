<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="plRoles.Text" xml:space="preserve">
    <value>User Role(s)</value>
  </data>
  <data name="plRoles.Help" xml:space="preserve">
    <value>Select the User Roles that are to receive this message, e.g. 'Administrators', or 'Registered Users'.</value>
  </data>
  <data name="plEmail.Text" xml:space="preserve">
    <value>Additional Addresses</value>
  </data>
  <data name="plEmail.Help" xml:space="preserve">
    <value>You can add additional Email addresses, separated by a ";". For example, enter "abc@msn.com;def@msn.com" to send mail to them.</value>
  </data>
  <data name="plFrom.Text" xml:space="preserve">
    <value>From</value>
  </data>
  <data name="plFrom.Help" xml:space="preserve">
    <value>Enter the 'From' email address of the email message.</value>
  </data>
  <data name="plReplyTo.Text" xml:space="preserve">
    <value>Reply To</value>
  </data>
  <data name="plReplyTo.Help" xml:space="preserve">
    <value>Enter the 'Reply To' email address for the email message.</value>
  </data>
  <data name="revEmailAddress.ErrorMessage" xml:space="preserve">
    <value>The email address is in an invalid format!</value>
  </data>
  <data name="plSubject.Text" xml:space="preserve">
    <value>Campaign Subject</value>
  </data>
  <data name="plSubject.Help" xml:space="preserve">
    <value>Enter the subject of this campaign.</value>
  </data>
  <data name="lblMessage.Text" xml:space="preserve">
    <value>Enter campaign detail below</value>
  </data>
  <data name="plAttachment.Text" xml:space="preserve">
    <value>Attachment</value>
  </data>
  <data name="plAttachment.Help" xml:space="preserve">
    <value>Select an Attachment for this message.</value>
  </data>
  <data name="cmdSend.Text" xml:space="preserve">
    <value>Send Email</value>
  </data>
  <data name="MessageSent.Text" xml:space="preserve">
    <value>Bulk mail sent (asynchronous mode). Please check confirmation email for result.</value>
  </data>
  <data name="MessageValidation.Text" xml:space="preserve">
    <value>You must include a Subject and Message</value>
  </data>
  <data name="MessagesSentCount.Text" xml:space="preserve">
    <value>{0} Messages were sent out successfully</value>
  </data>
  <data name="NoMessagesSent.Text" xml:space="preserve">
    <value>No Messages were sent, you may want to check the Event Viewer to see if any exceptions were logged.</value>
  </data>
  <data name="ControlTitle_adminpromotion_campaign.Text" xml:space="preserve">
    <value>Campaign Newsletters</value>
  </data>
  <data name="Error_Smtp.Text" xml:space="preserve">
    <value>There is a error while sending test mail via your host email before send bulk mails. Please check if your host email (locate under "Host - Host Settings - Basic Settings - Host Details - Host Email") is valid. And also check  "Host - Host Settings - Advanced Settings - SMTP Server Settings" to see if your Smtp server is configured correctly.</value>
  </data>
  <data name="Tip_SendMail.Text" xml:space="preserve">
    <value>&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;How to send promotion emails?&lt;br/&gt;&lt;br/&gt;
      &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1. First, login in as Host account, click "Host - Host Settings - Advanced Settings - SMTP Server Settings" to see if your SMTP server is configured correctly.&lt;br/&gt;&lt;br/&gt;
     &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2. Because send bulk mails is a time consumed operation, module will try to send a test mail to your host email account before send bulk mails, so you also need to check if your host email account (locate under "Host - Host Settings - Basic Settings - Host Details - Host Email") is valid.&lt;br/&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 3. Sometimes module doesn't send bulk mails while running on localhost domain, don't worry about it. It will work on official domain names.&lt;br/&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;4. Note, this is a simple email feature and can't handle too many emails. Check our "Cross Bulk Mailer" module at &lt;a href="http://DnnModule.com" target="_blank"&gt;http://DnnModule.com&lt;/a&gt; if you want to send massive emails (e.g. 1, 000, 000 emails).&lt;br/&gt;
&lt;/p&gt;</value>
  </data>
  <data name="Tip_Attachment.Text" xml:space="preserve">
    <value>You can choose an attachment to send for this message (optional).</value>
  </data>
</root>