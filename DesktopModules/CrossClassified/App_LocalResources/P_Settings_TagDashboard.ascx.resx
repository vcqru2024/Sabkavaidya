<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="plFlashWidth.Text" xml:space="preserve">
    <value>Flash Width</value>
  </data>
  <data name="plFlashWidth.Help" xml:space="preserve">
    <value>set flash width, the value must be integer.Recommend set it as even.</value>
  </data>
  <data name="plFlashHeight.Text" xml:space="preserve">
    <value>Flash Height</value>
  </data>
  <data name="plFlashHeight.Help" xml:space="preserve">
    <value>set flash height, the value must be integer.Recommend set it as even.</value>
  </data>
  <data name="ControlTitle_edit.Text" xml:space="preserve">
    <value>Product tag dashboard settings</value>
  </data>
  <data name="plListTab.Text" xml:space="preserve">
    <value>Cp_Product_List module page</value>
  </data>
  <data name="plListTab.Help" xml:space="preserve">
    <value>Select which page to display product list when click tag item, that page should have a Cp_Product_List module instance on it.If you don't specify it, module will use the default list tab specified to selected product department.</value>
  </data>
  <data name="plRows.Help" xml:space="preserve">
    <value>Enter tag rows that will display in flash.</value>
  </data>
  <data name="liAlign_center.Text" xml:space="preserve">
    <value>Center</value>
  </data>
  <data name="liAlign_left.Text" xml:space="preserve">
    <value>Left</value>
  </data>
  <data name="liAlign_right.Text" xml:space="preserve">
    <value>Right</value>
  </data>
  <data name="plAlign.Help" xml:space="preserve">
    <value>Choose flash align</value>
  </data>
  <data name="plAlign.Text" xml:space="preserve">
    <value>Flash Align</value>
  </data>
  <data name="plDistr.Help" xml:space="preserve">
    <value>If checked, the tags are distributed evenly over the sphere’s surface.</value>
  </data>
  <data name="plDistr.Text" xml:space="preserve">
    <value>Distributed Evenly</value>
  </data>
  <data name="plRows.Text" xml:space="preserve">
    <value>Tag Rows</value>
  </data>
  <data name="InvalidHex.Text" xml:space="preserve">
    <value>Invalid Hex Value</value>
  </data>
  <data name="plFlashBgColor.Help" xml:space="preserve">
    <value>Pick flash background color, default value is 0xFFFFFF</value>
  </data>
  <data name="plFlashBgColor.Text" xml:space="preserve">
    <value>Flash Background Color</value>
  </data>
  <data name="liFlashWmode_opaque.Text" xml:space="preserve">
    <value>Opaque</value>
  </data>
  <data name="liFlashWmode_transparent.Text" xml:space="preserve">
    <value>Transparent</value>
  </data>
  <data name="liFlashWmode_window.Text" xml:space="preserve">
    <value>Window</value>
  </data>
  <data name="plFlashWmode.Help" xml:space="preserve">
    <value>Choose flash wmode option, default value is transparent</value>
  </data>
  <data name="plFlashWmode.Text" xml:space="preserve">
    <value>Flash wmode option</value>
  </data>
  <data name="plTemplate.Help" xml:space="preserve">
    <value>Templates locate under desktopmodules/CrossClassified/Template/Product/TagDashboard, you can customize your own display templates.</value>
  </data>
  <data name="plTemplate.Text" xml:space="preserve">
    <value>Template</value>
  </data>
  <data name="plTcolor.Help" xml:space="preserve">
    <value>The default tag color</value>
  </data>
  <data name="plTcolor.Text" xml:space="preserve">
    <value>Tag Color</value>
  </data>
  <data name="plTcolor2.Help" xml:space="preserve">
    <value>Second tag color. If supplied, tags will get a color from a gradient between both colors based on their popularity.</value>
  </data>
  <data name="plTcolor2.Text" xml:space="preserve">
    <value>Second Tag Color</value>
  </data>
  <data name="plHicolor.Help" xml:space="preserve">
    <value>Tag mouseover/hover color</value>
  </data>
  <data name="plHicolor.Text" xml:space="preserve">
    <value>Hover Color</value>
  </data>
  <data name="plTspeed.Help" xml:space="preserve">
    <value>Determines the speed of the sphere’s rotation. The default is 100, higher numbers increase the speed.</value>
  </data>
  <data name="plTspeed.Text" xml:space="preserve">
    <value>Rotator Speed</value>
  </data>
  <data name="plLinkTarget.Help" xml:space="preserve">
    <value>Choose link target when click tag item.</value>
  </data>
  <data name="plLinkTarget.Text" xml:space="preserve">
    <value>Link Target</value>
  </data>
  <data name="plType.Help" xml:space="preserve">
    <value>Select product department which tag belongs</value>
  </data>
  <data name="plType.Text" xml:space="preserve">
    <value>Select Department</value>
  </data>
  <data name="secAbout.Text" xml:space="preserve">
    <value>About Cp_Product_TagDashboard sub module</value>
  </data>
  <data name="secGeneral.Text" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="Tip_About.Text" xml:space="preserve">
    <value>Classified Pro is an enterprise-class DNN module which helps you to create an online store, auction website and also publish classified ads. It contains 16 sub modules and 1 skin object. 
Cp_Product_TagDashboard is one of these 16 sub modules, it is used to show product (listing) tags with Adobe Flash slideshow. When click a tag, module will navigate to Cp_Product_List sub module page to show products (listings) which belong to this tag. &lt;br/&gt;&lt;br/&gt;

You can add multiple instances of Cp_Product_TagDashboard sub module to different pages (or on same page).&lt;br/&gt;&lt;br/&gt;
If current site enables content localization, Cp_Product_TagDashboard sub module will show tags according to page culture. For example, if current page culture is "en-US (English)", it will show English tags; if current page culture is "zh-CN (Simple Chinese)", it will show Simple Chinese tags; if page culture is neutral, it will show tags according to current context culture.</value>
  </data>
</root>