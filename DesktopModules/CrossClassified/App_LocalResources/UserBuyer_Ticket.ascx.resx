<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="lblProductName.Text" xml:space="preserve">
    <value>Product</value>
  </data>
  <data name="ControlTitle_userbuyer_ticket.Text" xml:space="preserve">
    <value>My help ticket</value>
  </data>
  <data name="lblEnd.Text" xml:space="preserve">
    <value>End:</value>
  </data>
  <data name="lblOptionName.Text" xml:space="preserve">
    <value>Option</value>
  </data>
  <data name="lblDescription.Text" xml:space="preserve">
    <value>Message</value>
  </data>
  <data name="lblPageSize.Text" xml:space="preserve">
    <value>Page Size:</value>
  </data>
  <data name="lblUserName.Text" xml:space="preserve">
    <value>Created User</value>
  </data>
  <data name="lblTicketDetail.Text" xml:space="preserve">
    <value>Detail information for ticket</value>
  </data>
  <data name="btnClose.Text" xml:space="preserve">
    <value>Close Ticket</value>
  </data>
  <data name="lblTitle1.Text" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="lblClosed.Text" xml:space="preserve">
    <value>Closed</value>
  </data>
  <data name="lblTicketNo.Text" xml:space="preserve">
    <value>Ticket Id</value>
  </data>
  <data name="lblTicketId.Text" xml:space="preserve">
    <value>Ticket Id:</value>
  </data>
  <data name="btnCreateTicket.Text" xml:space="preserve">
    <value>Add Message</value>
  </data>
  <data name="lblTitle.Text" xml:space="preserve">
    <value>Ticket Title:</value>
  </data>
  <data name="btnOpen.Text" xml:space="preserve">
    <value>Reopen ticket</value>
  </data>
  <data name="lblUpdatedDate.Text" xml:space="preserve">
    <value>Update Date</value>
  </data>
  <data name="Mail_Ticket_Description.Text" xml:space="preserve">
    <value>Message:</value>
  </data>
  <data name="Mail_Ticket_Subject.Text" xml:space="preserve">
    <value>{0} help ticket message submit notification</value>
  </data>
  <data name="Mail_Ticket_Thanks.Text" xml:space="preserve">
    <value>Please login to {0} for more detail. Thanks for your support.</value>
  </data>
  <data name="Mail_Ticket_Tip.Text" xml:space="preserve">
    <value>{0} has created a new message  for ticket {1}</value>
  </data>
  <data name="plTicketDescription.Help" xml:space="preserve">
    <value>Enter message detail, can't be null</value>
  </data>
  <data name="plTicketDescription.Text" xml:space="preserve">
    <value>Message Detail</value>
  </data>
  <data name="lblCreatedDate.Text" xml:space="preserve">
    <value>Created Date</value>
  </data>
  <data name="lblStart.Text" xml:space="preserve">
    <value>Start:</value>
  </data>
  <data name="TicketClosed.Text" xml:space="preserve">
    <value>Ticket is closed</value>
  </data>
  <data name="TicketOpened.Text" xml:space="preserve">
    <value>Ticker is reopened.</value>
  </data>
  <data name="lblVendorName.Text" xml:space="preserve">
    <value>Seller</value>
  </data>
  <data name="btnRefeshUpload.Text" xml:space="preserve">
    <value>Refresh Upload Files</value>
  </data>
  <data name="hlDownload.Text" xml:space="preserve">
    <value>Download</value>
  </data>
  <data name="hlUpload.Text" xml:space="preserve">
    <value>Upload</value>
  </data>
  <data name="hlUpload_Unlimited.Text" xml:space="preserve">
    <value>Upload New Files</value>
  </data>
  <data name="imgViewUpload_Client.Text" xml:space="preserve">
    <value>Upload related files for this item (if site allows). For example, you report a software issue, you can click to upload screen shots to the seller.</value>
  </data>
  <data name="imgViewUpload_Vendor.Text" xml:space="preserve">
    <value>View files which upload by seller for this item (if have). For example, you request a software installation help, seller can upload the install screen shots to you.</value>
  </data>
  <data name="lblAlreadyUpload.Text" xml:space="preserve">
    <value>Already Upload</value>
  </data>
  <data name="lblDownload.Text" xml:space="preserve">
    <value>Download</value>
  </data>
  <data name="lblFileName.Text" xml:space="preserve">
    <value>File Name</value>
  </data>
  <data name="lblUploadExtension.Text" xml:space="preserve">
    <value>Allowable Upload Extension</value>
  </data>
  <data name="lblUploadRuleTitle1.Text" xml:space="preserve">
    <value>File Title 1</value>
  </data>
  <data name="lblUploadRuleTitle10.Text" xml:space="preserve">
    <value>File Title 10</value>
  </data>
  <data name="lblUploadRuleTitle2.Text" xml:space="preserve">
    <value>File Title 2</value>
  </data>
  <data name="lblUploadRuleTitle3.Text" xml:space="preserve">
    <value>File Title 3</value>
  </data>
  <data name="lblUploadRuleTitle4.Text" xml:space="preserve">
    <value>File Title 4</value>
  </data>
  <data name="lblUploadRuleTitle5.Text" xml:space="preserve">
    <value>File Title 5</value>
  </data>
  <data name="lblUploadRuleTitle6.Text" xml:space="preserve">
    <value>File Title 6</value>
  </data>
  <data name="lblUploadRuleTitle7.Text" xml:space="preserve">
    <value>File Title 7</value>
  </data>
  <data name="lblUploadRuleTitle8.Text" xml:space="preserve">
    <value>File Title 8</value>
  </data>
  <data name="lblUploadRuleTitle9.Text" xml:space="preserve">
    <value>File Title 9</value>
  </data>
  <data name="lblUploadSize.Text" xml:space="preserve">
    <value>Max Size</value>
  </data>
  <data name="lblUploadStatus.Text" xml:space="preserve">
    <value>Upload Status</value>
  </data>
  <data name="lblUploadSummary.Text" xml:space="preserve">
    <value>Already upload {0} files, totally {1}.</value>
  </data>
  <data name="lblUploadTitle.Text" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="lblUpload_Rule.Text" xml:space="preserve">
    <value>Upload files for help ticket. Currently site allows you to upload &lt;font color="red"&gt;{0}&lt;/font&gt; files, each file has its description / require upload or optional / file extension / size limitation (see below list). If you already uploaded some files and want to change them as new files, you need to delete the uploaded files first, then can continue to upload new files.&lt;br/&gt;&lt;br/&gt;After upload files on the popup window, click the "Refresh Upload Files" link to show them.</value>
  </data>
  <data name="lblUpload_Unlimited.Text" xml:space="preserve">
    <value>Upload files for help ticket, you can continue to upload more files, or delete previous upload files. Note, the upload files has quota limitation (&lt;font color="red"&gt;{0}&lt;/font&gt; MB), if you already reach the quota, you need to delete some existing files first, then can continue to upload other files.&lt;br/&gt;&lt;br/&gt;After upload files on the popup window, click the "Refresh Upload Files" link to show them.</value>
  </data>
  <data name="lblUpload_Vendor.Text" xml:space="preserve">
    <value>View files which upload by seller for this help ticket. For example, you request a software installation help, seller can upload the install screen shot to you.</value>
  </data>
  <data name="Optional.Text" xml:space="preserve">
    <value>(Optional)</value>
  </data>
  <data name="Required.Text" xml:space="preserve">
    <value>(Required)</value>
  </data>
  <data name="cmdCancel.Text" xml:space="preserve">
    <value>Return Back</value>
  </data>
  <data name="lblSize.Text" xml:space="preserve">
    <value>Size</value>
  </data>
  <data name="lblNotUpload.Text" xml:space="preserve">
    <value>Not Upload</value>
  </data>
</root>