<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DistributorsHeader.Text" xml:space="preserve">
    <value>Distributors</value>
  </data>
  <data name="DistributorHeader.Text" xml:space="preserve">
    <value>Distributor</value>
  </data>
  <data name="SEOHeader.Text" xml:space="preserve">
    <value>SEO</value>
  </data>
  <data name="Name.Header" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Published.Header" xml:space="preserve">
    <value>Published</value>
  </data>
  <data name="DisplayOrder.Header" xml:space="preserve">
    <value>Display order</value>
  </data>
  <data name="ExportLink.Text" xml:space="preserve">
    <value>Export</value>
    <comment>Export ||file||</comment>
  </data>
  <data name="ImportLink.Text" xml:space="preserve">
    <value>Import</value>
    <comment>Import ||file||</comment>
  </data>
  <data name="SynchronizeMenuLink.Text" xml:space="preserve">
    <value>Synchronize menu</value>
  </data>
  <data name="AddHyperLink.Text" xml:space="preserve">
    <value>Add new</value>
  </data>
  <data name="PreviewLink.Text" xml:space="preserve">
    <value>Preview</value>
  </data>
  <data name="MoreFeaturesLink.Text" xml:space="preserve">
    <value>More features</value>
  </data>
  <data name="EditLink.Text" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="DeleteLinkButton.Text" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="SaveLinkButton.Text" xml:space="preserve">
    <value>Save</value>
    <comment>Save ||file||</comment>
  </data>
  <data name="SaveAndBackLinkButton.Text" xml:space="preserve">
    <value>Save &amp; return</value>
  </data>
  <data name="BackControl.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="GeneralDetailsViewTabLabel.Text" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="DisplayDetailsViewTabLabel.Text" xml:space="preserve">
    <value>Display</value>
  </data>
  <data name="ExtensionDetailsViewTabLabel.Text" xml:space="preserve">
    <value>Extension</value>
  </data>
  <data name="DistributorKeyLabelControl.Text" xml:space="preserve">
    <value>Distributor key</value>
  </data>
  <data name="DistributorKeyLabelControl.Help" xml:space="preserve">
    <value>Enter a key that uniquely identifies this item throughout the system. The key could be your item name, SKU, any short meaningful text or simply a GUID value as long as the value is unique. The key is useful for bulk import and programming automation to help refer back to this item.</value>
  </data>
  <data name="NameLabelControl.Text" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="DescriptionLabelControl.Text" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="PhoneLabelControl.Text" xml:space="preserve">
    <value>Phone</value>
  </data>
  <data name="EmailLabelControl.Text" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="UrlNameLabelControl.Text" xml:space="preserve">
    <value>URL name</value>
  </data>
  <data name="UrlNameLabelControl.Help" xml:space="preserve">
    <value>Specify a unique name that will appear in the URL slug for the product list page. The name should contain meaningful keywords in lowercase. The distributor name will be used if this value is empty. A good set of keywords can help your page ranking in search results.</value>
  </data>
  <data name="PageTitleLabelControl.Text" xml:space="preserve">
    <value>Page title</value>
  </data>
  <data name="PageTitleLabelControl.Help" xml:space="preserve">
    <value>Specify a custom page title for the product list page. A good title can help your page ranking in search results.</value>
  </data>
  <data name="MetaKeywordsLabelControl.Text" xml:space="preserve">
    <value>Meta keywords</value>
  </data>
  <data name="MetaKeywordsLabelControl.Help" xml:space="preserve">
    <value>Specify META keywords for the product list page.</value>
  </data>
  <data name="MetaDescriptionLabelControl.Text" xml:space="preserve">
    <value>Meta description</value>
  </data>
  <data name="MetaDescriptionLabelControl.Help" xml:space="preserve">
    <value>Specify META description for the product list page.</value>
  </data>
  <data name="PublishedLabelControl.Text" xml:space="preserve">
    <value>Published</value>
  </data>
  <data name="PublishedLabelControl.Help" xml:space="preserve">
    <value>Publish this item to customers.</value>
  </data>
  <data name="DisplayTemplateLabelControl.Text" xml:space="preserve">
    <value>Display template</value>
  </data>
  <data name="DisplayTemplateLabelControl.Help" xml:space="preserve">
    <value>The selected display template determines how to display the Product List module when this distributor is selected. Select a custom display template to associate to this distributor.</value>
  </data>
  <data name="DisplayOrderExtensionLabelControl.Text" xml:space="preserve">
    <value>Display order</value>
  </data>
  <data name="DisplayOrderExtensionLabelControl.Help" xml:space="preserve">
    <value>Sort the item for display by lowest to highest number.</value>
  </data>
  <data name="ExtensionLabelControl.Text" xml:space="preserve">
    <value>Extension</value>
  </data>
  <data name="ExtensionLabelControl.Help" xml:space="preserve">
    <value>Provide any custom data associated with this item using XML.</value>
  </data>
</root>