<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PackagesHeader.Text" xml:space="preserve">
    <value>Packages</value>
  </data>
  <data name="SellerSearchLabelControl.Text" xml:space="preserve">
    <value>Seller</value>
  </data>
  <data name="SellerSearchLabelControl.Help" xml:space="preserve">
    <value>View items belonging to a specific seller.</value>
  </data>
  <data name="Name.Header" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Type.Header" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Width.Header" xml:space="preserve">
    <value>Width</value>
  </data>
  <data name="Height.Header" xml:space="preserve">
    <value>Height</value>
  </data>
  <data name="Depth.Header" xml:space="preserve">
    <value>Depth</value>
  </data>
  <data name="PackageHeader.Text" xml:space="preserve">
    <value>Package</value>
  </data>
  <data name="SellerLabelControl.Text" xml:space="preserve">
    <value>Seller</value>
  </data>
  <data name="SellerLabelControl.Help" xml:space="preserve">
    <value>Enter the name if this item belongs to a seller.</value>
  </data>
  <data name="NameLabelControl.Text" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="NameLabelControl.Help" xml:space="preserve">
    <value>Provide a name for this package (e.g. &amp;quot;Medium box&amp;quot;)</value>
  </data>
  <data name="PackageTypeLabelControl.Text" xml:space="preserve">
    <value>Package type</value>
  </data>
  <data name="PackageTypeLabelControl.Help" xml:space="preserve">
    <value>Specify the type of packaging.</value>
  </data>
  <data name="WeightLabelControl.Text" xml:space="preserve">
    <value>Weight</value>
  </data>
  <data name="WeightLabelControl.Help" xml:space="preserve">
    <value>The weight of the package without the content.</value>
  </data>
  <data name="WidthLabelControl.Text" xml:space="preserve">
    <value>Width</value>
  </data>
  <data name="WidthLabelControl.Help" xml:space="preserve">
    <value>The external width of the package.</value>
  </data>
  <data name="HeightLabelControl.Text" xml:space="preserve">
    <value>Height</value>
  </data>
  <data name="HeightLabelControl.Help" xml:space="preserve">
    <value>The external height of the package.</value>
  </data>
  <data name="DepthLabelControl.Text" xml:space="preserve">
    <value>Depth</value>
  </data>
  <data name="DepthLabelControl.Help" xml:space="preserve">
    <value>The external depth of the package.</value>
  </data>
  <data name="InternalWidthLabelControl.Text" xml:space="preserve">
    <value>Internal width</value>
  </data>
  <data name="InternalWidthLabelControl.Help" xml:space="preserve">
    <value>The internal width of the package where content will be stored. If you don't know this value, enter the same value as the external width.</value>
  </data>
  <data name="InternalHeightLabelControl.Text" xml:space="preserve">
    <value>Internal height</value>
  </data>
  <data name="InternalHeightLabelControl.Help" xml:space="preserve">
    <value>The internal height of the package where content will be stored. If you don't know this value, enter the same value as the external height.</value>
  </data>
  <data name="InternalDepthLabelControl.Text" xml:space="preserve">
    <value>Internal depth</value>
  </data>
  <data name="InternalDepthLabelControl.Help" xml:space="preserve">
    <value>The internal depth of the package where content will be stored. If you don't know this value, enter the same value as the external depth.</value>
  </data>
  <data name="MaxWeightCapacityLabelControl.Text" xml:space="preserve">
    <value>Max weight capacity</value>
  </data>
  <data name="MaxWeightCapacityLabelControl.Help" xml:space="preserve">
    <value>The maximum weight this package is rated to hold. If you don't know this value, enter an arbitrary large number.</value>
  </data>
  <data name="MaxQuantityCapacityLabelControl.Text" xml:space="preserve">
    <value>Max quantity capacity</value>
  </data>
  <data name="MaxQuantityCapacityLabelControl.Help" xml:space="preserve">
    <value>The maximum quantity of items this package is rated to hold. If you don't know this value, enter an arbitrary large number.</value>
  </data>
  <data name="ShippingCodeLabelControl.Text" xml:space="preserve">
    <value>Shipping code</value>
  </data>
  <data name="ShippingCodeLabelControl.Help" xml:space="preserve">
    <value>Shipping code may be used by your shipping provider to classify this package to obtain a more accurate quote. Leave blank if you don't have a shipping code. For example, the freight class code 50, as governed by the NMFC, indicates the package is durable enough to fit on a 4x4 pallet.</value>
  </data>
  <data name="DeleteLinkButton.Text" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="BackControl.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="SaveLinkButton.Text" xml:space="preserve">
    <value>Save</value>
    <comment>Save ||file||</comment>
  </data>
  <data name="SaveAndBackLinkButton.Text" xml:space="preserve">
    <value>Save &amp; return</value>
  </data>
  <data name="BagLabel.Text" xml:space="preserve">
    <value>Bag</value>
  </data>
  <data name="BoxLabel.Text" xml:space="preserve">
    <value>Box</value>
  </data>
  <data name="EnvelopeLabel.Text" xml:space="preserve">
    <value>Envelope</value>
  </data>
  <data name="PalletLabel.Text" xml:space="preserve">
    <value>Pallet</value>
  </data>
  <data name="TubeLabel.Text" xml:space="preserve">
    <value>Tube</value>
  </data>
  <data name="UnspecifiedLabel.Text" xml:space="preserve">
    <value>Unspecified</value>
  </data>
  <data name="AddHyperLink.Text" xml:space="preserve">
    <value>Add new</value>
  </data>
</root>