<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Provider.Header" xml:space="preserve">
    <value>Provider</value>
  </data>
  <data name="ExternalID.Header" xml:space="preserve">
    <value>External ID</value>
  </data>
  <data name="Variant.Header" xml:space="preserve">
    <value>Variant</value>
  </data>
  <data name="Date.Header" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="ChannelHeader.Text" xml:space="preserve">
    <value>Channel</value>
  </data>
  <data name="ExternalIDLabelControl.Text" xml:space="preserve">
    <value>External ID</value>
  </data>
  <data name="CreateDateLabelControl.Text" xml:space="preserve">
    <value>Create date</value>
  </data>
  <data name="ChannelProviderLabelControl.Text" xml:space="preserve">
    <value>Provider</value>
  </data>
  <data name="EBayListingTypeLabelControl.Text" xml:space="preserve">
    <value>Listing type</value>
  </data>
  <data name="EBayCategoryLabelControl.Text" xml:space="preserve">
    <value>Categories</value>
  </data>
  <data name="EBayCategoryLabelControl.Help" xml:space="preserve">
    <value>You must select at least one category and no more than 2 categories. Additional fees may apply for 2nd category.</value>
  </data>
  <data name="EBayProductVariantLabelControl.Text" xml:space="preserve">
    <value>Product variant</value>
  </data>
  <data name="EBayProductVariantLabelControl.Help" xml:space="preserve">
    <value>eBay only allows one variant per product, therefore if you have multiple variants, you must list them separately.</value>
  </data>
  <data name="EBayTitleLabelControl.Text" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="EBayDescriptionLabelControl.Text" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="EBayQuantityLabelControl.Text" xml:space="preserve">
    <value>Quantity</value>
  </data>
  <data name="EBayPriceLabelControl.Text" xml:space="preserve">
    <value>Price</value>
  </data>
  <data name="EBayPriceLabelControl.Help" xml:space="preserve">
    <value>Enter the product price without the money symbol. (e.g. 10.50). This is often known as the buy it now price in auctions.</value>
  </data>
  <data name="EBayStartPriceLabelControl.Text" xml:space="preserve">
    <value>Start price</value>
  </data>
  <data name="EBayStartPriceLabelControl.Help" xml:space="preserve">
    <value>Enter the auction start price without the money symbol. (e.g. 10.50)</value>
  </data>
  <data name="EBayReservePriceLabelControl.Text" xml:space="preserve">
    <value>Reserve price</value>
  </data>
  <data name="EBayReservePriceLabelControl.Help" xml:space="preserve">
    <value>Enter the auction reserve price without the money symbol. (e.g. 10.50)</value>
  </data>
  <data name="EBayConditionLabelControl.Text" xml:space="preserve">
    <value>Condition</value>
  </data>
  <data name="EBayConditionLabelControl.Help" xml:space="preserve">
    <value>Certain conditions may not be applicable depending on the selected categories.</value>
  </data>
  <data name="EBayStartDateLabelControl.Text" xml:space="preserve">
    <value>Start date</value>
  </data>
  <data name="EBayStartDateLabelControl.Help" xml:space="preserve">
    <value>Enter a start date (yyyy-mm-dd) to begin displaying product. Leave blank if product is available immediately.</value>
  </data>
  <data name="EBayStopDateLabelControl.Text" xml:space="preserve">
    <value>Stop date</value>
  </data>
  <data name="EBayStopDateLabelControl.Help" xml:space="preserve">
    <value>Enter a stop date (yyyy-mm-dd) to end displaying product. Leave blank if product is available perpetually. eBay requires the duration calculated from the listing date or the start date, if provided, to be intervals of 1, 3, 5, 7, 10, 14, 21, 30, 60, 90 or 120 days.</value>
  </data>
  <data name="Name.Header" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="ServiceType.Header" xml:space="preserve">
    <value>Service type</value>
  </data>
  <data name="Rate.Header" xml:space="preserve">
    <value>Rate</value>
  </data>
  <data name="EBayAddShippingLinkButton.Text" xml:space="preserve">
    <value>Add new</value>
  </data>
  <data name="EBayShippingNameLabelControl.Text" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="EBayShippingRateLabelControl.Text" xml:space="preserve">
    <value>Rate</value>
  </data>
  <data name="EBayShippingRateLabelControl.Help" xml:space="preserve">
    <value>For flat rate shipping, enter a fixed rate (e.g. 10.00). Leave value blank for calculated rate.</value>
  </data>
  <data name="EBayShippingRegionLabelControl.Text" xml:space="preserve">
    <value>Allowed regions</value>
  </data>
  <data name="EBayShippingRegionLabelControl.Help" xml:space="preserve">
    <value>You must specify at least one region that this service ships to.</value>
  </data>
  <data name="EBaySaveShippingLinkButton.Text" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="EBayCancelShippingLinkButton.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="EBayPaymentMethodLabelControl.Text" xml:space="preserve">
    <value>Payment methods</value>
  </data>
  <data name="EBayPaymentMethodLabelControl.Help" xml:space="preserve">
    <value>You must select at least one payment method.</value>
  </data>
  <data name="EBayAllowCreditLabelControl.Text" xml:space="preserve">
    <value>Allow store credit</value>
  </data>
  <data name="EBayAllowCreditLabelControl.Help" xml:space="preserve">
    <value>Determine how the customer will be compensated if you accept returns.</value>
  </data>
  <data name="EBayAllowExchangeLabelControl.Text" xml:space="preserve">
    <value>Allow exchange</value>
  </data>
  <data name="EBayAllowExchangeLabelControl.Help" xml:space="preserve">
    <value>Determine how the customer will be compensated if you accept returns.</value>
  </data>
  <data name="EBayAllowRefundLabelControl.Text" xml:space="preserve">
    <value>Allow refund</value>
  </data>
  <data name="EBayAllowRefundLabelControl.Help" xml:space="preserve">
    <value>Determine how the customer will be compensated if you accept returns.</value>
  </data>
  <data name="EBayReturnPeriodLabelControl.Text" xml:space="preserve">
    <value>Return period</value>
  </data>
  <data name="EBayReturnDescriptionLabelControl.Text" xml:space="preserve">
    <value>Return description</value>
  </data>
  <data name="DeleteLinkButton.Text" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="BackControl.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="SaveLinkButton.Text" xml:space="preserve">
    <value>Save</value>
    <comment>Save ||file||</comment>
  </data>
  <data name="SaveAndBackLinkButton.Text" xml:space="preserve">
    <value>Save &amp;amp; return</value>
  </data>
  <data name="ShippingHeader.Text" xml:space="preserve">
    <value>Shipping</value>
  </data>
  <data name="PaymentHeader.Text" xml:space="preserve">
    <value>Payment</value>
  </data>
  <data name="ReturnHeader.Text" xml:space="preserve">
    <value>Return</value>
  </data>
  <data name="EBayShippingDescriptionLabel.Text" xml:space="preserve">
    <value>For eBay, all domestic or international shipping services must use the same rate type (either calculated or flat, but not mixed). You must also provide at least one domestic shipping service.</value>
  </data>
  <data name="AddHyperLink.Text" xml:space="preserve">
    <value>Add new</value>
  </data>
  <data name="ProductNotFoundMessage.Text" xml:space="preserve">
    <value>This product does not exist with the provider anymore.</value>
  </data>
  <data name="FacebookCategoryLabelControl.Text" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="FacebookDescriptionLabelControl.Text" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="FacebookProductVariantLabelControl.Text" xml:space="preserve">
    <value>Product variant</value>
  </data>
  <data name="FacebookTitleLabelControl.Text" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="ProductHeader.Text" xml:space="preserve">
    <value>Product</value>
  </data>
  <data name="FacebookSizeLabelControl.Text" xml:space="preserve">
    <value>Size</value>
  </data>
</root>