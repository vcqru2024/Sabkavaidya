<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="RecurringSalesOrdersHeader.Text" xml:space="preserve">
    <value>Recurring orders</value>
  </data>
  <data name="ExportLink.Text" xml:space="preserve">
    <value>Export</value>
    <comment>Export ||file||</comment>
  </data>
  <data name="RecurringSalesOrderSearchNextRecurringStartDateLabelControl.Text" xml:space="preserve">
    <value>Next start date</value>
  </data>
  <data name="RecurringSalesOrderSearchNextRecurringStopDateLabelControl.Text" xml:space="preserve">
    <value>Next stop date</value>
  </data>
  <data name="RecurringSalesOrderSearchStatusLabelControl.Text" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="RecurringSalesOrderSearchSellerLabelControl.Text" xml:space="preserve">
    <value>Seller</value>
  </data>
  <data name="SearchLinkButton.Text" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="NextRecurringDate.Header" xml:space="preserve">
    <value>Next Recurring Date</value>
  </data>
  <data name="Status.Header" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="Product.Header" xml:space="preserve">
    <value>Product</value>
  </data>
  <data name="Payment.Header" xml:space="preserve">
    <value>Payment</value>
  </data>
  <data name="RecurringOrderHeader.Text" xml:space="preserve">
    <value>Recurring</value>
  </data>
  <data name="GeneralDetailsViewTabLabel.Text" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="CustomFieldDetailsViewTabLabel.Text" xml:space="preserve">
    <value>Custom field</value>
  </data>
  <data name="PaymentDetailsViewTabLabel.Text" xml:space="preserve">
    <value>Payment</value>
  </data>
  <data name="ShippingDetailsViewTabLabel.Text" xml:space="preserve">
    <value>Shipping</value>
  </data>
  <data name="NotesDetailsViewTabLabel.Text" xml:space="preserve">
    <value>Notes</value>
  </data>
  <data name="SellerLabelControl.Text" xml:space="preserve">
    <value>Seller</value>
  </data>
  <data name="StatusLabelControl.Text" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="NextRecurringDateLabelControl.Text" xml:space="preserve">
    <value>Next recurring date</value>
  </data>
  <data name="NextRecurringDateLabelControl.Help" xml:space="preserve">
    <value>Re-order when the date matches the next recurring date.</value>
  </data>
  <data name="MaxRepeatLabelControl.Text" xml:space="preserve">
    <value>Max repeat</value>
  </data>
  <data name="MaxRepeatLabelControl.Help" xml:space="preserve">
    <value>Enter the maximum number of times to repeat or leave field blank to repeat perpetually. E.g. If this is a 12-month program, you should enter 11 to repeat for the remaining 11 times excluding the initial order.</value>
  </data>
  <data name="RepeatCountLabelControl.Text" xml:space="preserve">
    <value>Repeat count</value>
  </data>
  <data name="RepeatCountLabelControl.Help" xml:space="preserve">
    <value>The number of times this recurring order has repeated so far excluding the initial order.</value>
  </data>
  <data name="UsernameLabelControl.Text" xml:space="preserve">
    <value>Username</value>
  </data>
  <data name="EditLink.Text" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="UserFirstNameLabelControl.Text" xml:space="preserve">
    <value>User first name</value>
  </data>
  <data name="UserLastNameLabelControl.Text" xml:space="preserve">
    <value>User last name</value>
  </data>
  <data name="UserEmailLabelControl.Text" xml:space="preserve">
    <value>User email</value>
  </data>
  <data name="SalesOrderDetailIDLabelControl.Text" xml:space="preserve">
    <value>Originating sales order detail ID</value>
  </data>
  <data name="SalesOrderDetailIDLabelControl.Help" xml:space="preserve">
    <value>The originating sales order detail purchased by the customer that lead to the creation of this recurring order.</value>
  </data>
  <data name="CultureCodeLabelControl.Text" xml:space="preserve">
    <value>Culture code</value>
  </data>
  <data name="ProductVariantLabelControl.Text" xml:space="preserve">
    <value>Product</value>
  </data>
  <data name="RecurringIntervalLabelControl.Text" xml:space="preserve">
    <value>Recurring interval</value>
  </data>
  <data name="QuantityLabelControl.Text" xml:space="preserve">
    <value>Quantity</value>
  </data>
  <data name="PriceLabelControl.Text" xml:space="preserve">
    <value>Price</value>
  </data>
  <data name="PriceLabelControl.Help" xml:space="preserve">
    <value>Enter a fixed price to override or leave blank to use the calculated price from the product variant. (e.g. 10.50)</value>
  </data>
  <data name="UserPaymentLabelControl.Text" xml:space="preserve">
    <value>Use payment</value>
  </data>
  <data name="UserPaymentLabelControl.Help" xml:space="preserve">
    <value>Charge against this payment method.</value>
  </data>
  <data name="ShippingMethodLabelControl.Text" xml:space="preserve">
    <value>Shipping method</value>
  </data>
  <data name="ShippingMethodLabelControl.Help" xml:space="preserve">
    <value>Ship recurring order using this shipping method.</value>
  </data>
  <data name="ShippingFirstNameLabelControl.Text" xml:space="preserve">
    <value>First name</value>
  </data>
  <data name="ShippingLastNameLabelControl.Text" xml:space="preserve">
    <value>Last name</value>
  </data>
  <data name="ShippingCompanyLabelControl.Text" xml:space="preserve">
    <value>Company</value>
  </data>
  <data name="ShippingCountryLabelControl.Text" xml:space="preserve">
    <value>Country</value>
  </data>
  <data name="ShippingStreetLabelControl.Text" xml:space="preserve">
    <value>Street</value>
  </data>
  <data name="ShippingCityLabelControl.Text" xml:space="preserve">
    <value>City</value>
  </data>
  <data name="ShippingSubdivisionLabelControl.Text" xml:space="preserve">
    <value>Region</value>
  </data>
  <data name="ShippingPostalCodeLabelControl.Text" xml:space="preserve">
    <value>Postal code</value>
  </data>
  <data name="ShippingPhoneLabelControl.Text" xml:space="preserve">
    <value>Phone</value>
  </data>
  <data name="ShippingEmailLabelControl.Text" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="AdminNotesLabelControl.Text" xml:space="preserve">
    <value>Admin notes</value>
  </data>
  <data name="AdminNotesLabelControl.Help" xml:space="preserve">
    <value>Notes entered here are not visible to the customer.</value>
  </data>
  <data name="DeleteLinkButton.Text" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="BackControl.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="SaveLinkButton.Text" xml:space="preserve">
    <value>Save</value>
    <comment>Save ||file||</comment>
  </data>
  <data name="SaveAndBackLinkButton.Text" xml:space="preserve">
    <value>Save &amp; return</value>
  </data>
  <data name="EmailReminderLink.Text" xml:space="preserve">
    <value>Email reminder</value>
  </data>
  <data name="CopyBillingLink.Text" xml:space="preserve">
    <value>Copy billing</value>
  </data>
  <data name="AnyLabel.Text" xml:space="preserve">
    <value>Any</value>
  </data>
  <data name="UseAddressLink.Text" xml:space="preserve">
    <value>Use address book</value>
  </data>
  <data name="AddHyperLink.Text" xml:space="preserve">
    <value>Add new</value>
  </data>
  <data name="ShippingDestinationPointLabelControl.Text" xml:space="preserve">
    <value>Destination point</value>
  </data>
  <data name="FilterLink.Text" xml:space="preserve">
    <value>Filter</value>
  </data>
  <data name="RecurringSalesOrderSearchQueryPlaceholder.Text" xml:space="preserve">
    <value>Search by id, order detail, user, name or email</value>
  </data>
  <data name="ResetLinkButton.Text" xml:space="preserve">
    <value>Reset</value>
  </data>
  <data name="CreateRecurringSalesOrderLink.Text" xml:space="preserve">
    <value>Create recurring order</value>
  </data>
  <data name="ExtensionDetailsViewTabLabel.Text" xml:space="preserve">
    <value>Extension</value>
  </data>
  <data name="ExtensionLabelControl.Help" xml:space="preserve">
    <value>Provide any custom data associated with this item using XML.</value>
  </data>
  <data name="ExtensionLabelControl.Text" xml:space="preserve">
    <value>Extension</value>
  </data>
  <data name="OtherDetailsViewTabLabel.Text" xml:space="preserve">
    <value>Other</value>
  </data>
  <data name="ShippingDistrictLabelControl.Text" xml:space="preserve">
    <value>District / Suburb</value>
  </data>
  <data name="StreetPlaceHolder.Text" xml:space="preserve">
    <value>Street and number, P.O. box, c/o.</value>
  </data>
  <data name="UnitPlaceHolder.Text" xml:space="preserve">
    <value>Apartment, suite, unit, building, floor, etc.</value>
  </data>
  <data name="CurrencyCultureCodeLabelControl.Text" xml:space="preserve">
    <value>Currency culture</value>
  </data>
</root>