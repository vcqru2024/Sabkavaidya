<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="RewardsPointHeader.Text" xml:space="preserve">
    <value>Rewards point</value>
  </data>
  <data name="RewardsPointMonetaryRateLabelControl.Text" xml:space="preserve">
    <value>Monetary value of each point</value>
  </data>
  <data name="RewardsPointMonetaryRateLabelControl.Help" xml:space="preserve">
    <value>How much each point is actually worth in money terms. This rate will be used for calculating the equivalent amount of money used for redeeming the points.</value>
  </data>
  <data name="RewardsPointRewardOrderActiveLabelControl.Text" xml:space="preserve">
    <value>Reward points for orders</value>
  </data>
  <data name="RewardsPointRewardOrderActiveLabelControl.Help" xml:space="preserve">
    <value>Reward points for checkout based on the subtotal amount before shipping, handling and taxes.</value>
  </data>
  <data name="RewardsPointRewardOrderMinAmountLabelControl.Text" xml:space="preserve">
    <value>Reward points min order amount</value>
  </data>
  <data name="RewardsPointRewardOrderMinAmountLabelControl.Help" xml:space="preserve">
    <value>The minimum subtotal amount must be attained before awarding points.</value>
  </data>
  <data name="RewardsPointRewardOrderPointRateLabelControl.Text" xml:space="preserve">
    <value>Points to award per order unit amount</value>
  </data>
  <data name="RewardsPointRewardOrderPointRateLabelControl.Help" xml:space="preserve">
    <value>The number of points to award for each currency unit spent on checkout for qualified products based on the order amount after discounts, but before shipping, handling and taxes. If the rate is equal to 1, then 1 point is awarded for each dollar spent. This rate can also be fractional to encourage customer to spend more. If the rate is 0.1, then 1 point is awarded for each 10 dollars spent, but if the customer spent 12 dollars, only 1 point is awarded.</value>
  </data>
  <data name="RewardsPointRewardOrderDelayLabelControl.Text" xml:space="preserve">
    <value>Reward points delay</value>
  </data>
  <data name="RewardsPointRewardOrderDelayLabelControl.Help" xml:space="preserve">
    <value>The number of days to delay rewarding the points for an order purchased. This is a security measure to protect the merchant from fraudulent customers who purchase products solely to earn points and returning the products after the points have been redeemed. For example, if you have a 30 days refund policy, you may want to set the delay equal to 30 days.</value>
  </data>
  <data name="RewardsPointRedeemMinPointQuantityLabelControl.Text" xml:space="preserve">
    <value>Min. points to allow redeeming</value>
  </data>
  <data name="RewardsPointRedeemMinPointQuantityLabelControl.Help" xml:space="preserve">
    <value>The minimum number of points the customer must have to be allowed to redeem for purchases.</value>
  </data>
  <data name="RewardsPointExpiryIntervalLabelControl.Text" xml:space="preserve">
    <value>Points expiration</value>
  </data>
  <data name="RewardsPointExpiryIntervalLabelControl.Help" xml:space="preserve">
    <value>Enter a non-zero value if the points should expire after the period of inactivity. A zero value indicates the points will never expire.</value>
  </data>
  <data name="SaveLinkButton.Text" xml:space="preserve">
    <value>Save</value>
    <comment>Save ||file||</comment>
  </data>
  <data name="DayLabel.Text" xml:space="preserve">
    <value>Day</value>
  </data>
  <data name="WeekLabel.Text" xml:space="preserve">
    <value>Week</value>
  </data>
  <data name="MonthLabel.Text" xml:space="preserve">
    <value>Month</value>
  </data>
  <data name="YearLabel.Text" xml:space="preserve">
    <value>Year</value>
  </data>
</root>