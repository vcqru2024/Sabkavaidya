<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="SalesOrderHeader.Text" xml:space="preserve">
    <value>Sales order</value>
  </data>
  <data name="SalesOrderSalesOrderNumberFormatLabelControl.Text" xml:space="preserve">
    <value>Sales order number format</value>
  </data>
  <data name="SalesOrderSalesOrderNumberFormatLabelControl.Help" xml:space="preserve">
    <value>Change how your sales order number should be displayed by applying a string format where the {0} token is replaced with the actual number. E.g. if your format is &amp;quot;INV-{0}&amp;quot;, the customer will see the order number appear as &amp;quot;INV-9999&amp;quot;. Changes made here only affect new orders. Leave the default as &amp;quot;{0}&amp;quot; if you don't want to apply a different format.</value>
  </data>
  <data name="NextSalesOrderNumberLabelControl.Text" xml:space="preserve">
    <value>Next sales order number sequence</value>
  </data>
  <data name="NextSalesOrderNumberLabelControl.Help" xml:space="preserve">
    <value>Enter a numeric value to change the next available sales order number sequence. You can only enter a value larger than the last generated order number. E.g. Enter a value 1001 if you want the next sequence to start at 1001 to improve your store credibility.</value>
  </data>
  <data name="SalesOrderBusinessTaxNumberValidateLabelControl.Text" xml:space="preserve">
    <value>Validate business tax number</value>
  </data>
  <data name="SalesOrderIncompleteOrdersAutoDeleteLabelControl.Text" xml:space="preserve">
    <value>Days before deleting incomplete orders</value>
  </data>
  <data name="SalesOrderIncompleteOrdersAutoDeleteLabelControl.Help" xml:space="preserve">
    <value>Automatically delete incomplete orders older than the number of days specified. Leave blank if you don't want to automatically delete incomplete orders. Incomplete orders are open orders that have not completed checkout. If you enter a value, the number of days should be greater than your cart abandon and session timeout settings to avoid deleting an active customer cart still in progress.</value>
  </data>
  <data name="SalesOrderPreorderProcessBehaviorLabelControl.Text" xml:space="preserve">
    <value>Preorder process behavior</value>
  </data>
  <data name="SalesOrderPreorderProcessBehaviorLabelControl.Help" xml:space="preserve">
    <value>Determines how a preorder should be processed.</value>
  </data>
  <data name="SalesOrderMethodsPurchaseOrderActiveLabelControl.Text" xml:space="preserve">
    <value>Enable purchase order</value>
  </data>
  <data name="PaymentTermsCODActiveLabelControl.Text" xml:space="preserve">
    <value>Enable</value>
  </data>
  <data name="PaymentTermsNet30ActiveLabelControl.Text" xml:space="preserve">
    <value>Enable</value>
  </data>
  <data name="SaveLinkButton.Text" xml:space="preserve">
    <value>Save</value>
    <comment>Save ||file||</comment>
  </data>
  <data name="GeneralHeader.Text" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="CODPaymentTermDescriptionLabel.Text" xml:space="preserve">
    <value>Cash on delivery allows a customer to pay after receiving delivery of the products.</value>
  </data>
  <data name="Net30PaymentTermDescriptionLabel.Text" xml:space="preserve">
    <value>Net30 term allows a customer to pay within 30 days from the date of ordering.</value>
  </data>
  <data name="ManualProcessLabel.Text" xml:space="preserve">
    <value>Manual process</value>
  </data>
  <data name="AutomaticallyProcessLabel.Text" xml:space="preserve">
    <value>Automatically process. Retry later on invalid product.</value>
  </data>
</root>