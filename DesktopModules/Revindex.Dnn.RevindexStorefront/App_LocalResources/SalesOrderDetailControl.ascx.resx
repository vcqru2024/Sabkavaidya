<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ExportViewLink.Text" xml:space="preserve">
    <value>Export view</value>
    <comment>Export view ||file||</comment>
  </data>
  <data name="ExportAllLink.Text" xml:space="preserve">
    <value>Export all</value>
    <comment>Export everything ||file||</comment>
  </data>
  <data name="Product.Header" xml:space="preserve">
    <value>Product</value>
  </data>
  <data name="SKU.Header" xml:space="preserve">
    <value>SKU</value>
  </data>
  <data name="Order.Header" xml:space="preserve">
    <value>Order</value>
  </data>
  <data name="Shipping.Header" xml:space="preserve">
    <value>Shipping</value>
  </data>
  <data name="Qty.Header" xml:space="preserve">
    <value>Qty</value>
  </data>
  <data name="Amount.Header" xml:space="preserve">
    <value>Amount</value>
  </data>
  <data name="OrderDetailHeader.Text" xml:space="preserve">
    <value>Order detail</value>
  </data>
  <data name="GeneralDetailsViewTabLabel.Text" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="CustomFieldDetailsViewTabLabel.Text" xml:space="preserve">
    <value>Custom field</value>
  </data>
  <data name="ShippingDetailsViewTabLabel.Text" xml:space="preserve">
    <value>Shipping</value>
  </data>
  <data name="HandlingDetailsViewTabLabel.Text" xml:space="preserve">
    <value>Handling</value>
  </data>
  <data name="RecurringDetailsViewTabLabel.Text" xml:space="preserve">
    <value>Recurring</value>
  </data>
  <data name="ResourceDetailsViewTabLabel.Text" xml:space="preserve">
    <value>Resource</value>
  </data>
  <data name="NotesDetailsViewTabLabel.Text" xml:space="preserve">
    <value>Notes</value>
  </data>
  <data name="StatusLabelControl.Text" xml:space="preserve">
    <value>Order status</value>
  </data>
  <data name="ShippingStatusLabelControl.Text" xml:space="preserve">
    <value>Shipping status</value>
  </data>
  <data name="ProductNameLabelControl.Text" xml:space="preserve">
    <value>Product</value>
  </data>
  <data name="SKULabelControl.Text" xml:space="preserve">
    <value>SKU</value>
  </data>
  <data name="BookingStartDateLabelControl.Text" xml:space="preserve">
    <value>Booking start date</value>
  </data>
  <data name="BookingStopDateLabelControl.Text" xml:space="preserve">
    <value>Booking stop date</value>
  </data>
  <data name="ProductCostControl.Text" xml:space="preserve">
    <value>Product cost</value>
  </data>
  <data name="WarehouseLabelControl.Text" xml:space="preserve">
    <value>Warehouse</value>
  </data>
  <data name="InventoryLabelControl.Text" xml:space="preserve">
    <value>Inventory</value>
  </data>
  <data name="QuantityLabelControl.Text" xml:space="preserve">
    <value>Quantity</value>
  </data>
  <data name="PriceLabelControl.Text" xml:space="preserve">
    <value>Price</value>
  </data>
  <data name="PriceLabelControl.Help" xml:space="preserve">
    <value>The unit price for one item.</value>
  </data>
  <data name="DiscountAmountLabelControl.Text" xml:space="preserve">
    <value>Discount amount</value>
  </data>
  <data name="DiscountAmountLabelControl.Help" xml:space="preserve">
    <value>The discount applied to this sales order detail item. For example, to give a discount of $10.00, you would enter -10.00.</value>
  </data>
  <data name="TotalLabelControl.Text" xml:space="preserve">
    <value>Total amount</value>
  </data>
  <data name="ParentSalesOrderDetailIDLabelControl.Text" xml:space="preserve">
    <value>Parent component</value>
  </data>
  <data name="ParentSalesOrderDetailIDLabelControl.Help" xml:space="preserve">
    <value>If this product is intended to be part of a larger bundled product, select the parent component to place it under.</value>
  </data>
  <data name="PriceLockedLabelControl.Text" xml:space="preserve">
    <value>Locked</value>
  </data>
  <data name="PriceLockedLabelControl.Help" xml:space="preserve">
    <value>Lock the price from changes when the customer resumes an incomplete order and from re-calculation.</value>
  </data>
  <data name="RequireShippingLabelControl.Text" xml:space="preserve">
    <value>Require shipping</value>
  </data>
  <data name="WeightLabelControl.Text" xml:space="preserve">
    <value>Weight</value>
  </data>
  <data name="DepthLabelControl.Text" xml:space="preserve">
    <value>Depth</value>
  </data>
  <data name="WidthLabelControl.Text" xml:space="preserve">
    <value>Width</value>
  </data>
  <data name="HeightLabelControl.Text" xml:space="preserve">
    <value>Height</value>
  </data>
  <data name="RequireHandlingLabelControl.Text" xml:space="preserve">
    <value>Require handling</value>
  </data>
  <data name="RecurringSalesOrderIDLabelControl.Text" xml:space="preserve">
    <value>Recurring sales order</value>
  </data>
  <data name="RecurringLabelControl.Text" xml:space="preserve">
    <value>Recurring</value>
  </data>
  <data name="VoucherIssuedLabelControl.Text" xml:space="preserve">
    <value>Vouchers issued</value>
  </data>
  <data name="VoucherIssuedLabelControl.Help" xml:space="preserve">
    <value>The number of vouchers that have been issued associated with this order detail.</value>
  </data>
  <data name="RightIssuedLabelControl.Text" xml:space="preserve">
    <value>Rights issued</value>
  </data>
  <data name="RightIssuedLabelControl.Help" xml:space="preserve">
    <value>The number of rights that have been issued associated with this order detail.</value>
  </data>
  <data name="AdminNotesLabelControl.Text" xml:space="preserve">
    <value>Admin notes</value>
  </data>
  <data name="AdminNotesLabelControl.Help" xml:space="preserve">
    <value>Notes entered here are not visible to the customer.</value>
  </data>
  <data name="DeleteLinkButton.Text" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="BackControl.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="SaveLinkButton.Text" xml:space="preserve">
    <value>Save</value>
    <comment>Save ||file||</comment>
  </data>
  <data name="SaveAndBackLinkButton.Text" xml:space="preserve">
    <value>Save &amp; return</value>
  </data>
  <data name="BookingStartDateUnavailableError.Text" xml:space="preserve">
    <value>The selected date is unavailable.</value>
  </data>
  <data name="EmailRightsReceiptLink.Text" xml:space="preserve">
    <value>Email rights receipt</value>
  </data>
  <data name="EmailVoucherReceiptLink.Text" xml:space="preserve">
    <value>Email voucher receipt</value>
  </data>
  <data name="IssueRightsLink.Text" xml:space="preserve">
    <value>Issue rights</value>
  </data>
  <data name="IssueVoucherLink.Text" xml:space="preserve">
    <value>Issue voucher</value>
  </data>
  <data name="EditLink.Text" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="AddHyperLink.Text" xml:space="preserve">
    <value>Add new</value>
  </data>
  <data name="CreateRecurringSalesOrderLink.Text" xml:space="preserve">
    <value>Create recurring order</value>
  </data>
  <data name="IssueFundLink.Text" xml:space="preserve">
    <value>Issue fund</value>
  </data>
  <data name="FundIssuedLabelControl.Text" xml:space="preserve">
    <value>Funds issued</value>
  </data>
</root>