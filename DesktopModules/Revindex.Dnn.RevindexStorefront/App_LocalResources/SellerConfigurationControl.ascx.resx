<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="FeaturesDescriptionLabel.Text" xml:space="preserve">
    <value>The Storefront has many powerful features to help you sell more. Enable just the right features you need to keep your site fast and streamlined.</value>
  </data>
  <data name="SellerHeader.Text" xml:space="preserve">
    <value>Seller</value>
  </data>
  <data name="SellerDisplayTemplateLabelControl.Text" xml:space="preserve">
    <value>Display template</value>
  </data>
  <data name="SellerDisplayTemplateLabelControl.Help" xml:space="preserve">
    <value>The selected display template determines how to display the Seller module.</value>
  </data>
  <data name="SellerSyncTabsActiveLabelControl.Text" xml:space="preserve">
    <value>Show sellers on page menu</value>
  </data>
  <data name="SellerSyncTabsActiveLabelControl.Help" xml:space="preserve">
    <value>Once enabled, the system will periodically synchronize your sellers with the main page menu. It may take several hours before changes appear.</value>
  </data>
  <data name="SellerSyncTabsRootLabelControl.Text" xml:space="preserve">
    <value>Show sellers under this page</value>
  </data>
  <data name="SellerSyncTabsRootLabelControl.Help" xml:space="preserve">
    <value>The sellers should appear starting from this root page.</value>
  </data>
  <data name="SellerCommissionMinFeeLabelControl.Text" xml:space="preserve">
    <value>Minimum fee</value>
  </data>
  <data name="SellerCommissionMinFeeLabelControl.Help" xml:space="preserve">
    <value>The minimum commission fee to charge if the base plus calculated rate does not meet this minimum amount. e.g. Enter 20 to charge a minimum commission of $20.</value>
  </data>
  <data name="SellerCommissionBaseFeeLabelControl.Text" xml:space="preserve">
    <value>Base fee</value>
  </data>
  <data name="SellerCommissionBaseFeeLabelControl.Help" xml:space="preserve">
    <value>The base commission fee to charge. e.g. Enter 10 to charge a base commission of $10.</value>
  </data>
  <data name="SellerCommissionOrderAmountRateLabelControl.Text" xml:space="preserve">
    <value>Order amount rate (%)</value>
  </data>
  <data name="SellerCommissionOrderAmountRateLabelControl.Help" xml:space="preserve">
    <value>The commission rate to charge against the sub-total amount excluding taxes, shipping and handling.</value>
  </data>
  <data name="SellerCommissionOrderCountRateLabelControl.Text" xml:space="preserve">
    <value>Order count rate (%)</value>
  </data>
  <data name="SellerCommissionOrderCountRateLabelControl.Help" xml:space="preserve">
    <value>The commission rate to charge against the total number of orders. For example, to charge $0.10 per checkout transaction, you can simply enter 10.</value>
  </data>
  <data name="SellerCommissionOrderQuantityRateLabelControl.Text" xml:space="preserve">
    <value>Order quantity rate (%)</value>
  </data>
  <data name="SellerCommissionOrderQuantityRateLabelControl.Help" xml:space="preserve">
    <value>The commission rate to charge against the total quantity ordered. e.g. Enter 10 if you want to $0.10 per item ordered.</value>
  </data>
  <data name="SellerCommissionProductListingRateLabelControl.Text" xml:space="preserve">
    <value>Product listing rate (%)</value>
  </data>
  <data name="SellerCommissionProductListingRateLabelControl.Help" xml:space="preserve">
    <value>The commission rate to charge against the total number of products for sale. e.g. Enter 10 if you want to charge $0.10 per product listed during your reporting period.</value>
  </data>
  <data name="EnableOtherFeaturesLink.Text" xml:space="preserve">
    <value>Enable other features</value>
  </data>
  <data name="SellerExtensionActiveLabelControl.Text" xml:space="preserve">
    <value>Extensions</value>
  </data>
  <data name="SellerExtensionActiveLabelControl.Help" xml:space="preserve">
    <value>Allow storing additional data.</value>
  </data>
  <data name="BackControl.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="SaveLinkButton.Text" xml:space="preserve">
    <value>Save</value>
    <comment>Save ||file||</comment>
  </data>
  <data name="SaveAndBackLinkButton.Text" xml:space="preserve">
    <value>Save &amp; return</value>
  </data>
  <data name="GeneralHeader.Text" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="CommissionHeader.Text" xml:space="preserve">
    <value>Commission</value>
  </data>
  <data name="FeaturesHeader.Text" xml:space="preserve">
    <value>Features</value>
  </data>
  <data name="CommissionDescriptionLabel.Text" xml:space="preserve">
    <value>The commission fee is calculated using the following formula. The final commission fee is either the calculated amount or the Minimum amount, whichever is higher. Please note the commission fee will vary depending on your selected reporting period.</value>
  </data>
  <data name="CommissionFormulaLabel.Text" xml:space="preserve">
    <value>Commission = Base + (Sub-total Amt x Order Amt Rate) + (Num. Orders x Order Count Rate) + (Total Qty x Order Qty Rate) + (Num. Products x Listing Rate)</value>
  </data>
  <data name="EditLink.Text" xml:space="preserve">
    <value>Edit</value>
  </data>
</root>