<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="RuleTypeLabelControl.Text" xml:space="preserve">
    <value>Rate rule</value>
  </data>
  <data name="ShippingAmountFlatAmountLabelControl.Text" xml:space="preserve">
    <value>Amount</value>
  </data>
  <data name="ShippingAmountFlatAmountLabelControl.Help" xml:space="preserve">
    <value>The fixed shipping amount to charge.</value>
  </data>
  <data name="MinShippingAmountFlatRateLabelControl.Text" xml:space="preserve">
    <value>Minimum amount</value>
  </data>
  <data name="MinShippingAmountFlatRateLabelControl.Help" xml:space="preserve">
    <value>The shipping amount that will be charged if the calculated amount is less than this minimum amount.</value>
  </data>
  <data name="BaseShippingAmountFlatRateLabelControl.Text" xml:space="preserve">
    <value>Base amount</value>
  </data>
  <data name="BaseShippingAmountFlatRateLabelControl.Help" xml:space="preserve">
    <value>The base amount to add to the total calculated shipping amount.</value>
  </data>
  <data name="ShippingRateFlatRateLabelControl.Text" xml:space="preserve">
    <value>Shipping rate (%)</value>
  </data>
  <data name="ShippingRateFlatRateLabelControl.Help" xml:space="preserve">
    <value>Enter the rate in percentage.</value>
  </data>
  <data name="MeasurementTypeFlatRateLabelControl.Text" xml:space="preserve">
    <value>Measure</value>
  </data>
  <data name="MinShippingAmountProductRateLabelControl.Text" xml:space="preserve">
    <value>Minimum amount</value>
  </data>
  <data name="MinShippingAmountProductRateLabelControl.Help" xml:space="preserve">
    <value>The shipping amount that will be charged if the calculated amount is less than this minimum amount.</value>
  </data>
  <data name="BaseShippingAmountProductRateLabelControl.Text" xml:space="preserve">
    <value>Base amount</value>
  </data>
  <data name="BaseShippingAmountProductRateLabelControl.Help" xml:space="preserve">
    <value>The base amount to add to the total calculated shipping amount.</value>
  </data>
  <data name="MinShippingAmountTierRateLabelControl.Text" xml:space="preserve">
    <value>Minimum amount</value>
  </data>
  <data name="MinShippingAmountTierRateLabelControl.Help" xml:space="preserve">
    <value>The shipping amount that will be charged if the calculated amount is less than this minimum amount.</value>
  </data>
  <data name="BaseShippingAmountTierRateLabelControl.Text" xml:space="preserve">
    <value>Base amount</value>
  </data>
  <data name="BaseShippingAmountTierRateLabelControl.Help" xml:space="preserve">
    <value>The base amount to add to the total calculated shipping amount.</value>
  </data>
  <data name="MeasurementTypeTierRateLabelControl.Text" xml:space="preserve">
    <value>Measure</value>
  </data>
  <data name="MeasurementTypeTierRateLabelControl.Help" xml:space="preserve">
    <value>The rate is based on this measure.</value>
  </data>
  <data name="RangeTierRateLabelControl.Text" xml:space="preserve">
    <value>Range</value>
  </data>
  <data name="RangeTierRateLabelControl.Help" xml:space="preserve">
    <value>Shipping is calculated by finding the closest matching range to apply the shipping rate.</value>
  </data>
  <data name="Begin.Header" xml:space="preserve">
    <value>Begin</value>
  </data>
  <data name="End.Header" xml:space="preserve">
    <value>End</value>
  </data>
  <data name="Amount.Header" xml:space="preserve">
    <value>Amount</value>
  </data>
  <data name="Rate.Header" xml:space="preserve">
    <value>Rate</value>
  </data>
  <data name="AddRangeTierRateLinkButton.Text" xml:space="preserve">
    <value>Add new</value>
  </data>
  <data name="BeginRangeTierRateDetailsViewLabelControl.Text" xml:space="preserve">
    <value>Begin range</value>
  </data>
  <data name="EndRangeTierRateDetailsViewLabelControl.Text" xml:space="preserve">
    <value>End range</value>
  </data>
  <data name="ShippingAmountTierRateDetailsViewLabelControl.Text" xml:space="preserve">
    <value>Amount</value>
  </data>
  <data name="ShippingAmountTierRateDetailsViewLabelControl.Help" xml:space="preserve">
    <value>Enter the tier amount.</value>
  </data>
  <data name="ShippingRateTierRateDetailsViewLabelControl.Text" xml:space="preserve">
    <value>Rate (%)</value>
  </data>
  <data name="ShippingRateTierRateDetailsViewLabelControl.Help" xml:space="preserve">
    <value>Enter the percentage rate that will be multiplied with the selected measure.</value>
  </data>
  <data name="SaveRangeTierRateLinkButton.Text" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="RateRuleLabelControl.Text" xml:space="preserve">
    <value>XSLT rule</value>
  </data>
  <data name="FlatRateDescriptionLabel.Text" xml:space="preserve">
    <value>This rule calculates the shipping amount according to the following formula where Measure is either a weight, amount or quantity. The final shipping amount is either the calculated amount or the Minimum amount, whichever is higher. For example, if your Base is $5.00, your chosen Measure is Weight for a package weighing 1000 grams and your rate is 1%, the calculated amount is 5 + 0.01 x 1000 = $15.00</value>
  </data>
  <data name="FlatRateFormulaLabel.Text" xml:space="preserve">
    <value>Calculated amount = Base + (Rate x Measure)</value>
  </data>
  <data name="TierRateDescriptionLabel.Text" xml:space="preserve">
    <value>This rule calculates the shipping amount according to the following formula where Measure is either a weight, amount or quantity. The final shipping amount is either the calculated amount or the Minimum amount, whichever is higher. For example, if your Base is $5.00, your chosen Measure is Weight for a package weighing 1000 grams, your tier Amount is $2.00 and your rate is 1% for that range, the calculated amount is 5 + (0.01 x 1000 + 2) = $17.00</value>
  </data>
  <data name="TierRateFormulaLabel.Text" xml:space="preserve">
    <value>Calculated amount = Base + (Rate x Measure + Amount)</value>
  </data>
  <data name="NoneLabel.Text" xml:space="preserve">
    <value>None - zero amount</value>
  </data>
  <data name="FlatAmountLabel.Text" xml:space="preserve">
    <value>Flat amount - same amount for every order</value>
  </data>
  <data name="FlatRateLabel.Text" xml:space="preserve">
    <value>Flat rate - based on weight, amount, quantity...</value>
  </data>
  <data name="ProductRateLabel.Text" xml:space="preserve">
    <value>Product rate - based on product's shipping price</value>
  </data>
  <data name="TierRateLabel.Text" xml:space="preserve">
    <value>Tier rate - vary by range</value>
  </data>
  <data name="CustomRuleLabel.Text" xml:space="preserve">
    <value>Custom rule</value>
  </data>
  <data name="TotalAmountLabel.Text" xml:space="preserve">
    <value>Total amount</value>
  </data>
  <data name="TotalQuantityLabel.Text" xml:space="preserve">
    <value>Total quantity</value>
  </data>
  <data name="TotalWeightLabel.Text" xml:space="preserve">
    <value>Total weight (g)</value>
  </data>
  <data name="DuplicateRangeMessage.Text" xml:space="preserve">
    <value>Cannot add a duplicate range.</value>
  </data>
</root>