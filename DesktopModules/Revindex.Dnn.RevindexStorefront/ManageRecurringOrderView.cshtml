@using System.Collections.Specialized;
@using DotNetNuke.Entities.Users;
@using Revindex.Business.Revindex.Revindex.Storefront;
@using Revindex.Data.Dnn;
@using Revindex.Dnn.RevindexStorefront.Pages;
@using Revindex.Dnn;
@using Revindex.Web.Mvc.Dnn.Helpers;
@using Revindex.Web.UI.DynamicControls;
@inherits Revindex.Web.Mvc.Dnn.RazorPages.DotNetNukeRazorPage<ManageRecurringOrderViewModel>

<div class="rvd-module-container rvdsf rvdsf-managerecurringorder-container">
	@if (Model.Visible)
	{
		if (!String.IsNullOrEmpty((string)Model.TempData.Peek(Global.TempDataKeys.Alert)) && !Model.IsRedirecting)
		{
			<div class="alert alert-@(Model.TempData[Global.TempDataKeys.Alert])">@Model.TempData[Global.TempDataKeys.Message]</div>
		}
		if (Model.ListView)
		{
			<div class="rvdsf-list-container">
				<div class="row rvdsf-actionbar-container">
					<div class="col-sm-6">
					</div>
					<div class="col-sm-6 text-sm-right">
					</div>
				</div>
				<hr />
				<div class="row">
					<div class="col-sm-12">
						<table class="table table-striped table-hover">
							<thead>
								<tr>
									<th>@Html.LocalizeString("ProductColumn")</th>
									<th>
										<a href="@Global.RouteUrl(new NameValueCollection() {
														{ Global.QueryStringKeys.ManageRecurringOrderPageViewIndex, "1" },
														{ Global.QueryStringKeys.ManageRecurringOrderSortDirection, Request.QueryString[Global.QueryStringKeys.ManageRecurringOrderSortDirection] == "0" ? "1" : "0" },
														{ Global.QueryStringKeys.ManageRecurringOrderSortExpression, "NextRecurringDate" }}, Request.QueryString)#@Dnn.Module.ModuleID">@Html.LocalizeString("NextRecurringDateColumn")</a>
													</th>
													<th>
														<a href="@Global.RouteUrl(new NameValueCollection() {
										{ Global.QueryStringKeys.ManageRecurringOrderPageViewIndex, "1" },
										{ Global.QueryStringKeys.ManageRecurringOrderSortDirection, Request.QueryString[Global.QueryStringKeys.ManageRecurringOrderSortDirection] == "0" ? "1" : "0" },
										{ Global.QueryStringKeys.ManageRecurringOrderSortExpression, "Status" }}, Request.QueryString)#@Dnn.Module.ModuleID">@Html.LocalizeString("StatusColumn")</a>
									</th>
									<th class="hidden-xs d-none d-sm-table-cell">@Html.LocalizeString("UserPaymentColumn")</th>
								</tr>
							</thead>
							<tbody>
								@foreach (var rso in Model.PagedRecurringSalesOrders)
								{
									<tr onclick="location.href='@Global.RouteUrl(new NameValueCollection() {
								{ Global.QueryStringKeys.RecurringSalesOrderID, rso.RecurringSalesOrderID.ToString() },
								{ Global.QueryStringKeys.ReturnUrl, Request.RawUrl }}, false)'" style="cursor: pointer">
										<td>
											<a href="@Global.RouteUrl(new NameValueCollection() {
								{ Global.QueryStringKeys.RecurringSalesOrderID, rso.RecurringSalesOrderID.ToString() },
								{ Global.QueryStringKeys.ReturnUrl, Request.RawUrl }}, false)" onclick="event.stopPropagation()">
												@rso.ProductVariant.Product.Name
												@if (!String.IsNullOrEmpty(rso.ProductVariant.Name))
												{
													<br /><small>@rso.ProductVariant.Name</small>
												}
											</a>
										</td>
										<td>@rso.NextRecurringDate.ToString("yyyy-MM-dd")</td>
										<td>@Html.LocalizeString(((int)rso.Status).ToString(), Global.FilePaths.LocalRecurringSalesOrderStatusTypeResourceFile)</td>
										<td class="hidden-xs d-none d-sm-table-cell">
											@if (rso.UserPayment != null)
											{
												<text>@rso.UserPayment.PaymentMethodName @rso.UserPayment.FormattedHint</text>
												if (rso.UserPayment.CreditCardExpiryMonth.HasValue && rso.UserPayment.CreditCardExpiryYear.HasValue)
												{
													<text> - @rso.UserPayment.CreditCardExpiryMonth.Value.ToString("00")/@rso.UserPayment.CreditCardExpiryYear</text>
												}
											}
										</td>
									</tr>
								}
							</tbody>
						</table>
					</div>
				</div>
				<div class="row">
					<div class="col-sm-12">
						@if (Model.ManageRecurringOrderPageViewCount > 1)
						{
							<ul class="pagination pagination-sm">
								<li class="@(Model.ManageRecurringOrderPageViewIndex <= 1 ? "disabled" : "") page-item">
									<a class="page-link" href="@(Model.ManageRecurringOrderPageViewIndex <= 1 ? "" : Global.RouteUrl(new NameValueCollection() {
								{ Global.QueryStringKeys.ManageRecurringOrderPageViewIndex, (Model.ManageRecurringOrderPageViewIndex - 1).ToString() },
								{ Global.QueryStringKeys.ManageRecurringOrderSortDirection, Request.QueryString[Global.QueryStringKeys.ManageRecurringOrderSortDirection] },
								{ Global.QueryStringKeys.ManageRecurringOrderSortExpression, Request.QueryString[Global.QueryStringKeys.ManageRecurringOrderSortExpression] }}, Request.QueryString) + "#" + Dnn.Module.ModuleID)"><em class="glyphicon glyphicon-chevron-left fa fas fa-chevron-left"></em></a>
								</li>
								@for (int i = 1; i <= Model.ManageRecurringOrderPageViewCount; i++)
								{
									if (i == Model.ManageRecurringOrderPageViewIndex)
									{
										<li class="active hidden-xs page-item"><span class="page-link">@i</span></li>
									}
									else
									{
										var indexString = i.ToString();
										int minRange = 1 + ((int)((Model.ManageRecurringOrderPageViewIndex - 1) / 10) * 10);
										int maxRange = minRange + 9;

										if (i == minRange - 1 || i == maxRange + 1)
										{
											indexString = "...";
										}
										else if (i < minRange || i > maxRange)
										{
											continue;
										}

										<li class="hidden-xs page-item">
											<a class="page-link" href="@Global.RouteUrl(new NameValueCollection() {
									{ Global.QueryStringKeys.ManageRecurringOrderPageViewIndex, i.ToString() },
									{ Global.QueryStringKeys.ManageRecurringOrderSortDirection, Request.QueryString[Global.QueryStringKeys.ManageRecurringOrderSortDirection] },
									{ Global.QueryStringKeys.ManageRecurringOrderSortExpression, Request.QueryString[Global.QueryStringKeys.ManageRecurringOrderSortExpression] }}, Request.QueryString)#@Dnn.Module.ModuleID">@indexString</a>
								</li>
							}
						}
								<li class="@(Model.ManageRecurringOrderPageViewIndex >= Model.ManageRecurringOrderPageViewCount ? "disabled" : "") page-item">
									<a class="page-link" href="@(Model.ManageRecurringOrderPageViewIndex >= Model.ManageRecurringOrderPageViewCount ? "" : Global.RouteUrl(new NameValueCollection() {
								{ Global.QueryStringKeys.ManageRecurringOrderPageViewIndex, (Model.ManageRecurringOrderPageViewIndex + 1).ToString() },
								{ Global.QueryStringKeys.ManageRecurringOrderSortDirection, Request.QueryString[Global.QueryStringKeys.ManageRecurringOrderSortDirection] },
								{ Global.QueryStringKeys.ManageRecurringOrderSortExpression, Request.QueryString[Global.QueryStringKeys.ManageRecurringOrderSortExpression] }}, Request.QueryString) + "#" + Dnn.Module.ModuleID)"><em class="glyphicon glyphicon-chevron-right fa fas fa-chevron-right"></em></a>
								</li>
							</ul>
						}
					</div>
				</div>
			</div>
		}
		else
		{
			<div class="rvd-form">
				@Html.Partial("Pages/Shared/BackView", Model.BackView)
				<h2>@Html.LocalizeString("RecurringOrderHeader")@(Html.Partial("Pages/Shared/BreadcrumbView", Model.BreadcrumbView))</h2>
				<div class="row rvdsf-actionbar-container">
					<div class="col-sm-6">
						<a class="btn btn-link" href="@Global.RouteUrl(new NameValueCollection())#@Dnn.Module.ModuleID"><em class="glyphicon glyphicon-list fa fas fa-list"></em> @Html.LocalizeString("ViewListLink")</a>
					</div>
				</div>
				<div class="rvdsf-managerecurringorder-detail-container" style="min-height: 400px">
					<ul id="rvdsfManageRecurringOrderDetailTabs" class="nav nav-tabs hidden-xs d-none d-sm-flex">
						<li class="nav-item"><a class="nav-link" data-toggle="tab" href="#rvdsfManageRecurringOrderDetailGeneral">@Html.LocalizeString("GeneralLabel")</a></li>
						@if (Model.RecurringSalesOrder.ProductVariant.RequireShipping)
						{
							<li class="nav-item"><a class="nav-link" data-toggle="tab" href="#rvdsfManageRecurringOrderDetailShipping">@Html.LocalizeString("ShippingLabel")</a></li>
						}
					</ul>
					<div id="rvdsfManageRecurringOrderDetailContent" class="tab-content panel-group">
						<div id="rvdsfManageRecurringOrderDetailGeneral" class="card tab-pane panel">
							<div class="card-header panel-heading d-sm-none visible-xs" id="rvdsfManageRecurringOrderDetailGeneralHeader">
								<h6 class="mb-0">
									<a class="collapsed" data-toggle="collapse" href="#rvdsfManageRecurringOrderDetailGeneralPanel" data-parent="#rvdsfManageRecurringOrderDetailContent">
										@Html.LocalizeString("GeneralLabel")
									</a>
								</h6>
							</div>
							<div id="rvdsfManageRecurringOrderDetailGeneralPanel" class="collapse panel-collapse" data-parent="#rvdsfManageRecurringOrderDetailContent">
								<div class="card-body panel-body">
									<div class="col-sm-offset-3 offset-sm-3 col-sm-6">
										<div class="form-group">
											<label class="control-label">@Html.LocalizeString("ProductLabel")</label>
											<p class="form-control-static">
												@if (Model.RecurringSalesOrder.ProductVariant.Published && Model.RecurringSalesOrder.ProductVariant.Product.Published)
												{
													<a href="@Model.RecurringSalesOrder.ProductVariant.ProductDetail.TabUrl">@Model.RecurringSalesOrder.ProductVariant.Product.Name @(!String.IsNullOrEmpty(Model.RecurringSalesOrder.ProductVariant.Name) ? " - " + Model.RecurringSalesOrder.ProductVariant.Name : "")</a>
												}
												else
												{
													<text>@Model.RecurringSalesOrder.ProductVariant.Product.Name @(!String.IsNullOrEmpty(Model.RecurringSalesOrder.ProductVariant.Name) ? " - " + Model.RecurringSalesOrder.ProductVariant.Name : "")</text>
												}
											</p>
										</div>
										<div class="form-group">
											<label class="control-label">@Html.LocalizeString("StatusLabel")</label>
											<select class="form-control" name="StatusManageRecurringOrderField">
												@foreach (var status in Model.AllowedStatuses.OrderBy(s => Html.LocalizeString(((int)s).ToString(), Global.FilePaths.LocalRecurringSalesOrderStatusTypeResourceFile)))
												{
												<option value="@(((int)status).ToString())" @(Model.StatusManageRecurringOrderField == status ? "selected" : "")>@Html.LocalizeString(((int)status).ToString(), Global.FilePaths.LocalRecurringSalesOrderStatusTypeResourceFile)</option>
												}
											</select>
										</div>
										<div class="form-group">
											<label class="control-label">@Html.LocalizeString("NextRecurringDateLabel")</label>
											<p class="form-control-static">
												@String.Format(Html.LocalizeString(Global.LocalizedStrings.Format_Date, Global.FilePaths.LocalSharedResourceFile), Model.RecurringSalesOrder.NextRecurringDate)
											</p>
										</div>
										<div class="form-group">
											<label class="control-label">@Html.LocalizeString("QuantityLabel")</label>
											<p class="form-control-static">
												@Model.RecurringSalesOrder.Quantity
											</p>
										</div>
										<div class="form-group">
											<label class="control-label">@Html.LocalizeString("UserPaymentLabel")</label>
											<select class="form-control" name="UserPaymentIDManageRecurringOrderField">
												<option value=""></option>
												@foreach (var userPayment in Model.UserPayments.OrderBy(up => up.PaymentMethodName))
												{
													<option value="@userPayment.UserPaymentID" @(Model.UserPaymentIDManageRecurringOrderField == userPayment.UserPaymentID ? "selected" : "")>
														@userPayment.PaymentMethodName @userPayment.FormattedHint
														@if (userPayment.CreditCardExpiryMonth.HasValue && userPayment.CreditCardExpiryYear.HasValue)
														{<text> - @userPayment.CreditCardExpiryMonth.Value.ToString("00")/@userPayment.CreditCardExpiryYear</text>}
													</option>
												}
											</select>
											<a class="btn btn-link" href="@Model.ManagePayment.TabUrl"><em class="glyphicon glyphicon-edit fa fas fa-edit"></em> @Html.LocalizeString("EditLink")</a>
										</div>
									</div>
								</div>
							</div>
						</div>
						@if (Model.RecurringSalesOrder.ProductVariant.RequireShipping)
						{
						<div id="rvdsfManageRecurringOrderDetailShipping" class="card tab-pane panel">
							<div class="card-header panel-heading d-sm-none visible-xs" id="rvdsfManageRecurringOrderDetailShippingHeader">
								<h6 class="mb-0">
									<a class="collapsed" data-toggle="collapse" href="#rvdsfManageRecurringOrderDetailShippingPanel" data-parent="#rvdsfManageRecurringOrderDetailContent">
										@Html.LocalizeString("ShippingLabel")
									</a>
								</h6>
							</div>
							<div id="rvdsfManageRecurringOrderDetailShippingPanel" class="collapse panel-collapse" data-parent="#rvdsfManageRecurringOrderDetailContent">
								<div class="card-body panel-body">
									<div class="col-sm-offset-3 offset-sm-3 col-sm-6">
										<div class="form-group">
											<label class="control-label">@Html.LocalizeString("ShippingMethodLabel")</label>
											<p class="form-control-static">@(Model.RecurringSalesOrder.ShippingMethod == null ? "" : Model.RecurringSalesOrder.ShippingMethod.Name)</p>
										</div>
										@if (Model.UserAddresses.Count > 0)
										{
											<div class="text-right form-group">
												<div class="btn-group">
													<button type="button" class="btn dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
														@Html.LocalizeString("UserAddressLink") <span class="caret"></span>
													</button>
													<ul class="dropdown-menu rvdsf-useraddress-container">
														@foreach (var ua in Model.UserAddresses)
														{
															<li class="dropdown-item">
																<a href="#" onclick="Revindex.Web.FormPost(this, 'UserAddressChanged', false, { userAddressID: @ua.UserAddressID }); return false;">
																	<strong>@ua.FirstName  @ua.LastName @(String.IsNullOrEmpty(ua.Company) ? "" : "(" + ua.Company + ")")</strong><br />
																	<span>@ua.Street</span><br />
																	@if (!String.IsNullOrEmpty(@ua.Unit))
																	{
																		<span>@ua.Unit</span><br />
																	}
																	@if (!String.IsNullOrEmpty(@ua.District))
																	{
																		<span>@ua.District</span><br />
																	}
																	<span>@ua.City</span><br />
																	<span>@ua.SubdivisionName</span>
																	<span>@ua.PostalCode</span>
																	<span>@ua.CountryName</span>
																</a>
															</li>
															<li role="separator" class="divider dropdown-divider"></li>
														}
													</ul>
												</div>
											</div>
										}
										<div class="form-group">
											<label class="control-label required">@Html.LocalizeString("ShippingFirstNameLabel")</label>
											<input type="text" name="ShippingFirstNameManageRecurringOrderField" class="form-control" required data-msg="@Html.LocalizeString(Global.LocalizedStrings.Message_FieldRequiredError, Global.FilePaths.LocalSharedResourceFile)" value="@Model.ShippingFirstNameManageRecurringOrderField" autocomplete="given-name" />
										</div>
										<div class="form-group">
											<label class="control-label required">@Html.LocalizeString("ShippingLastNameLabel")</label>
											<input type="text" name="ShippingLastNameManageRecurringOrderField" class="form-control" required data-msg="@Html.LocalizeString(Global.LocalizedStrings.Message_FieldRequiredError, Global.FilePaths.LocalSharedResourceFile)" value="@Model.ShippingLastNameManageRecurringOrderField" autocomplete="family-name" />
										</div>
										<div class="form-group">
											<label class="control-label">@Html.LocalizeString("ShippingCompanyLabel")</label>
											<input type="text" name="ShippingCompanyManageRecurringOrderField" class="form-control" value="@Model.ShippingCompanyManageRecurringOrderField" autocomplete="organization" />
										</div>
										<div class="form-group">
											<label class="control-label required">@Html.LocalizeString("ShippingCountryLabel")</label>
											<select id="rvdsfShippingCountryCodeManageRecurringOrderField" name="ShippingCountryCodeManageRecurringOrderField" class="form-control" required data-msg="@Html.LocalizeString(Global.LocalizedStrings.Message_FieldRequiredError, Global.FilePaths.LocalSharedResourceFile)" onchange="Revindex.Web.FormPost(this, 'ShippingCountryChanged', false, { countryCode: this.value })" autocomplete="country">
												<option value=""></option>
												@foreach (var country in Model.Countries)
												{
													<option value="@country.IsoAlpha2Code" @(Model.ShippingCountryCodeManageRecurringOrderField == country.IsoAlpha2Code ? "selected" : "")>@country.Name</option>
												}
											</select>
										</div>
										<div class="form-group">
											<label class="control-label required">@Html.LocalizeString("ShippingStreetLabel")</label>
											<input type="text" name="ShippingStreetManageRecurringOrderField" class="form-control" required data-msg="@Html.LocalizeString(Global.LocalizedStrings.Message_FieldRequiredError, Global.FilePaths.LocalSharedResourceFile)" value="@Model.ShippingStreetManageRecurringOrderField" placeholder="@Html.LocalizeString("StreetPlaceHolder")" autocomplete="address-line1" />
										</div>
										<div class="form-group">
											<input type="text" name="ShippingUnitManageRecurringOrderField" class="form-control" value="@Model.ShippingUnitManageRecurringOrderField" placeholder="@Html.LocalizeString("UnitPlaceHolder")" autocomplete="address-line2" />
										</div>
										@if (Model.HasShippingDistrictSystem)
										{
											<div class="form-group">
												<label class="control-label">@Html.LocalizeString("ShippingDistrictLabel")</label>
												<input type="text" name="ShippingDistrictManageRecurringOrderField" class="form-control" value="@Model.ShippingDistrictManageRecurringOrderField" autocomplete="address-level3" />
											</div>
										}
										<div class="form-group">
											<label class="control-label required">@Html.LocalizeString("ShippingCityLabel")</label>
											<input type="text" name="ShippingCityManageRecurringOrderField" class="form-control" required data-msg="@Html.LocalizeString(Global.LocalizedStrings.Message_FieldRequiredError, Global.FilePaths.LocalSharedResourceFile)" value="@Model.ShippingCityManageRecurringOrderField" autocomplete="address-level2" />
										</div>
										@if (Model.Subdivisions.Count > 0)
										{
											<div class="form-group">
												<label class="control-label required">@Html.LocalizeString("ShippingSubdivisionLabel")</label>
												<select name="ShippingSubdivisionCodeManageRecurringOrderField" required data-msg="@Html.LocalizeString(Global.LocalizedStrings.Message_FieldRequiredError, Global.FilePaths.LocalSharedResourceFile)" class="form-control" autocomplete="address-level1">
													<option value=""></option>
													@foreach (var subdivision in Model.Subdivisions)
													{
														<option value="@subdivision.IsoCode" @(Model.ShippingSubdivisionCodeManageRecurringOrderField == subdivision.IsoCode ? "selected" : "")>@subdivision.Name</option>
													}
												</select>
											</div>
										}
										<div class="form-group">
											<label class="control-label @(!String.IsNullOrEmpty(Model.ShippingCountryCodeManageRecurringOrderField) && Model.Countries.Where(c => c.IsoAlpha2Code == Model.ShippingCountryCodeManageRecurringOrderField).First().HasPostalCodeSystem ? "required" : "")">@Html.LocalizeString("ShippingPostalCodeLabel")</label>
											<input type="text" name="ShippingPostalCodeManageRecurringOrderField" class="form-control" value="@Model.ShippingPostalCodeManageRecurringOrderField" @(!String.IsNullOrEmpty(Model.ShippingCountryCodeManageRecurringOrderField) && Model.Countries.Where(c => c.IsoAlpha2Code == Model.ShippingCountryCodeManageRecurringOrderField).First().HasPostalCodeSystem ? "required" : "") data-msg="@Html.LocalizeString(Global.LocalizedStrings.Message_FieldRequiredError, Global.FilePaths.LocalSharedResourceFile)" autocomplete="postal-code" />
										</div>
										<div class="form-group">
											<label class="control-label required">@Html.LocalizeString("ShippingPhoneLabel")</label>
											<input type="text" name="ShippingPhoneManageRecurringOrderField" class="form-control" required data-msg="@Html.LocalizeString(Global.LocalizedStrings.Message_FieldRequiredError, Global.FilePaths.LocalSharedResourceFile)" value="@Model.ShippingPhoneManageRecurringOrderField" autocomplete="tel" />
										</div>
										<div class="form-group">
											<label class="control-label">@Html.LocalizeString("ShippingEmailLabel")</label>
											<input type="email" name="ShippingEmailManageRecurringOrderField" class="form-control" maxlength="256" value="@Model.ShippingEmailManageRecurringOrderField" autocomplete="email" />
										</div>
									</div>
								</div>
							</div>
						</div>
						}
					</div>
				</div>
				<div class="col-sm-offset-3 offset-sm-3 col-sm-6 text-right form-group">
					<button type="button" id="rvdsfCancelManageRecurringOrderButton" class="btn btn-default btn-light" onclick="Revindex.Web.FormPost(this, 'Cancel', false)">@Html.LocalizeString("CancelLink")</button>
					<button id="rvdsfSaveManageRecurringOrderButton" type="button" class="btn btn-primary" onclick="if (rvdsfManageRecurringOrder.validate()) { Revindex.Web.FormPost(this, 'Save', true) }">@Html.LocalizeString("SaveLink")</button>
					@if (!String.IsNullOrEmpty(Request.QueryString[Global.QueryStringKeys.ReturnUrl]))
					{
						<button id="rvdsfSaveAndReturnManageRecurringOrderButton" type="button" class="btn btn-primary" onclick="if (rvdsfManageRecurringOrder.validate()) { Revindex.Web.FormPost(this, 'Save', true, { Return: true }) }">@Html.LocalizeString("SaveAndReturnLink")</button>
					}
				</div>
			</div>
		}
	}
	<input type="hidden" name="@Model.ViewStateName" value="@Model.ViewStateData" />
	<script type="text/plain" id="rvdsfStartupScriptManageOrder">
		@foreach (var script in Model.StartupScripts)
		{
			<text>@Html.Raw(script)</text>
		}
	</script>
</div>

@* Uses Revindex *@
<script src="~/DesktopModules/Revindex.Dnn.RevindexStorefront/Scripts/Revindex/Global.js" defer></script>

@* Uses jQuery Validation. See https://jqueryvalidation.org *@
<script src="~/DesktopModules/Revindex.Dnn.RevindexStorefront/Scripts/jquery-validation/jquery.validate.min.js" defer></script>

@* Uses jQuery Unobtrusive Validation. See http://www.mobzystems.com/blog/setting-up-jquery-unobtrusive-validation/ *@
<script src="~/DesktopModules/Revindex.Dnn.RevindexStorefront/Scripts/jquery-validate-unobtrusive/jquery.validate.unobtrusive.min.js" defer></script>

<script type="text/javascript">
	var rvdsfManageRecurringOrder = rvdsfManageRecurringOrder || {}

	rvdsfManageRecurringOrder.validate = function () {

		var validationResult = $('#Form .rvdsf-managerecurringorder-container input, .rvdsf-managerecurringorder-container select, .rvdsf-managerecurringorder-container textarea').valid()

		// Scroll to first error
		if (!validationResult) {
			$('html, body').animate({
				scrollTop: $('.has-error').offset().top - 110
			}, 800);
		}

		return validationResult
	}

	function pageLoad(sender, args) {

		// Restore jQuery Unobstrusive Validation. Parse will not update unless we reset it first.
		var form = $("#Form").removeData("validator").removeData("unobtrusiveValidation")
		$.validator.unobtrusive.parse(form);

		// Scroll to first error
		if ($('.rvd-module-container div.alert.alert-danger:visible, .rvd-module-container div.alert.alert-warning:visible, .rvd-module-container div.alert.alert-success:visible').length > 0) {
			$('html, body').animate({
				scrollTop: $('.rvd-module-container div.alert.alert-danger:visible, .rvd-module-container div.alert.alert-warning:visible, .rvd-module-container div.alert.alert-success:visible').offset().top - 110
			}, 200);
		}

		// Initialize jQuery Validation with Bootstrap default styles
		$('#Form').validate({
			// Do not ignore hidden tabs fields
			ignore: "",

			highlight: function(element) {
				$(element).closest('.form-group').addClass('has-error');
				$(element).addClass('is-invalid');
			},
			unhighlight: function(element) {
				$(element).closest('.form-group').removeClass('has-error');
				$(element).removeClass('is-invalid');
			},
			errorElement: 'div',
			errorClass: 'help-block invalid-feedback',
			errorPlacement: function(error, element) {
				if (element.parent('.input-group').length) {
					error.insertAfter(element.parent());
				} else if(element.prop('type') === 'checkbox') {
					error.appendTo(element.parent().parent());
				} else if(element.prop('type') === 'radio') {
					error.appendTo(element.parent().parent());
				} else {
					error.insertAfter(element);
				}
			},
			onsubmit: false
		})

		// Add custom method to validate at least one checkbox in group is selected
		$.validator.addMethod("requiredGroup", function (value, element, params) {
			if (params)
				return ($("input[name='" + params + "']:checked").length > 0)
			else
				return true
		}, "@HttpUtility.JavaScriptStringEncode(DotNetNuke.Services.Localization.Localization.GetString(Global.LocalizedStrings.Message_FieldRequiredError, Global.FilePaths.LocalSharedResourceFile))")

		// Track selected tab or collapsible panel
		$('#rvdsfManageRecurringOrderDetailTabs li > a').click(function () {
			sessionStorage.setItem("rvdsfManageRecurringOrderDetailTabs.selectedTab", $(this).attr('href'));
		});

		$('#rvdsfManageRecurringOrderDetailContent a[data-toggle=collapse]').click(function () {
			sessionStorage.setItem("rvdsfManageRecurringOrderDetailTabs.selectedTab", $(this).attr('href'));
		});

		// Restore last selected tab or collapsible panel
		if (sessionStorage.getItem("rvdsfManageRecurringOrderDetailTabs.selectedTab") == null) {
			$("#rvdsfManageRecurringOrderDetailTabs li:first-child > a").tab("show")
			$("#rvdsfManageRecurringOrderDetailGeneralPanel").collapse("show")
		}
		else {
			var selectedTab = sessionStorage.getItem("rvdsfManageRecurringOrderDetailTabs.selectedTab")
			if (selectedTab) {
				$("#rvdsfManageRecurringOrderDetailTabs li > a[href='" + selectedTab + "']").tab("show")
				$(selectedTab).collapse("show")
			}
		}

		// Execute start up scripts
		if ($("#rvdsfStartupScriptManageOrder").length > 0) {
			eval($("#rvdsfStartupScriptManageOrder").text())
		}
	}

	$(document).ready(function () {
		Revindex.Web.MaintainFocus.Initialize(true)
	})
</script>
