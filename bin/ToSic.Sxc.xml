<doc>
  <assembly>
    <name>ToSic.Sxc</name>
  </assembly>
  <members>
    <member name="T:ToSic.Sxc.Adam.IAsset">
      <summary>
            Describes an ADAM (Automatic Digital Asset Management) asset. <br />
            This contains properties which both <see cref="T:ToSic.Sxc.Adam.IFolder" /> and <see cref="T:ToSic.Sxc.Adam.IFile" /> have in common.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Adam.IAsset">ðŸ“– IAsset</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Adam.IAsset.HasMetadata">
      <summary>
            Informs the code if this asset has real metadata attached or not. 
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Adam.IAsset.HasMetadata">ðŸ“– HasMetadata</a></para></summary>
      <returns>True if this asset has metadata, false if it doesn't (in which case the Metadata property still works, but won't deliver any real values)</returns>
    </member>
    <member name="P:ToSic.Sxc.Adam.IAsset.Metadata">
      <summary>
            List of metadata items - 
            will automatically contain a fake item, even if no metadata exits
            to help in razor template etc.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Adam.IAsset.Metadata">ðŸ“– Metadata</a></para></summary>
      <returns>An IDynamicEntity which contains the metadata, or an empty IDynamicEntity which still works if no metadata exists.</returns>
    </member>
    <member name="P:ToSic.Sxc.Adam.IAsset.Url">
      <summary>
            The path to this asset as used from external access.
            Must be a full url beginning with a "/" like "/Portals/0/adam/..."
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Adam.IAsset.Url">ðŸ“– Url</a></para></summary>
      <returns>The url to this asset</returns>
    </member>
    <member name="P:ToSic.Sxc.Adam.IAsset.Type">
      <summary>
            The type of this asset (folder, file, etc.)
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Adam.IAsset.Type">ðŸ“– Type</a></para></summary>
      <returns>"folder", "image", "document", "file" depending on what it is</returns>
    </member>
    <member name="T:ToSic.Sxc.Adam.IFile">
      <summary>
            An ADAM (Automatic Digital Asset Management) file
            This simple interface assumes that it uses int-IDs.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Adam.IFile">ðŸ“– IFile</a></para></summary>
    </member>
    <member name="T:ToSic.Sxc.Adam.IFolder">
      <summary>
            An ADAM (Automatic Digital Asset Management) folder.
            This simple interface assumes that it uses int-IDs.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Adam.IFolder">ðŸ“– IFolder</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Adam.IFolder.Files">
      <summary>
            Get the files in this folder
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Adam.IFolder.Files">ðŸ“– Files</a></para></summary>
      <returns>A list of files in this folder as <see cref="T:ToSic.Sxc.Adam.IFile" /></returns>
    </member>
    <member name="P:ToSic.Sxc.Adam.IFolder.Folders">
      <summary>
            Get the sub-folders in this folder
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Adam.IFolder.Folders">ðŸ“– Folders</a></para></summary>
      <returns>A list of folders inside this folder - as <see cref="T:ToSic.Sxc.Adam.IFolder" />.</returns>
    </member>
    <member name="T:ToSic.Sxc.Adam.Internal.Export`2">
      <summary>
            Export helper
            provides a list of all files / folders in ADAM for export
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Adam.Internal.Export`2.#ctor(ToSic.Sxc.Adam.Internal.AdamManager{`0,`1})">
      <summary>
            Export helper
            provides a list of all files / folders in ADAM for export
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Adam.Internal.File`2.Metadata">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Adam.Internal.File`2.AttachMdRecommendations(ToSic.Eav.Metadata.IMetadataOf)">
      <summary>
            Attach metadata recommendations
            </summary>
      <param name="mdOf"></param>
    </member>
    <member name="P:ToSic.Sxc.Adam.Internal.File`2.HasMetadata">
      <inheritdoc />
    </member>
    <member name="T:ToSic.Sxc.Adam.Internal.AdamFileSystemBasic">
      <summary>
            Basic implementation of the ADAM file system.
            This is string-based, not with environment IDs.
            It's primarily meant for standalone implementations or as a template for other integrations. 
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Adam.Internal.AdamFileSystemBasic.#ctor(ToSic.Sxc.Adam.Internal.IAdamPaths)">
      <summary>
            Basic implementation of the ADAM file system.
            This is string-based, not with environment IDs.
            It's primarily meant for standalone implementations or as a template for other integrations. 
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Adam.Internal.AdamFileSystemBasic.GetFile(System.String)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Adam.Internal.AdamFileSystemBasic.GetFiles(ToSic.Sxc.Adam.IFolder)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Adam.Internal.AdamFileSystemBasic.Add(ToSic.Sxc.Adam.IFolder,System.IO.Stream,System.String,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Adam.Internal.AdamFileSystemBasic.AddFolder(System.String)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Adam.Internal.AdamFileSystemBasic.FolderExists(System.String)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Adam.Internal.AdamFileSystemBasic.GetFolder(System.String)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Adam.Internal.AdamFileSystemBasic.GetFolders(ToSic.Sxc.Adam.IFolder)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Adam.Internal.AdamFileSystemBasic.Rename(ToSic.Sxc.Adam.IFolder,System.String)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Adam.Internal.AdamFileSystemBasic.Delete(ToSic.Sxc.Adam.IFolder)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Adam.Internal.AdamFileSystemBasic.Get(System.String)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Adam.Internal.AdamFileSystemBasic`2.Rename(ToSic.Sxc.Adam.IFile,System.String)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Adam.Internal.AdamFileSystemBasic`2.Delete(ToSic.Sxc.Adam.IFile)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Adam.Internal.AdamFileSystemHelpers.FindUniqueFileName(System.String,System.String)">
      <summary>
            When uploading a new file, we must verify that the name isn't used. 
            If it is used, walk through numbers to make a new name which isn't used. 
            </summary>
      <param name="serverPath"></param>
      <param name="fileName"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Adam.Internal.AdamPathsBase.Url(System.String)">
      <summary>
            Will receive the path as is on the file system, and return the url form how it would be called from outside.
            This default implementation assumes the path of the server and url are the same.
            In .net core this will be different, so it must replace the internal logic
            </summary>
      <param name="path"></param>
      <returns></returns>
    </member>
    <member name="T:ToSic.Sxc.Adam.Internal.AdamPathsWwwroot">
      <summary>
            Basic AdamPaths resolver, assumes that files are in wwwroot/adam for now.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Adam.Internal.AdamPathsWwwroot.#ctor(ToSic.Eav.Internal.Environment.IServerPaths)">
      <summary>
            Basic AdamPaths resolver, assumes that files are in wwwroot/adam for now.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Adam.Internal.AdamPathsWwwroot.Url(System.String)">
      <summary>
            This will just assume that the path - containing 'wwwroot' will not have the 'wwwroot' in the link from outside
            </summary>
      <param name="path"></param>
      <returns></returns>
    </member>
    <member name="P:ToSic.Sxc.Adam.Internal.Folder`2.Metadata">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Adam.Internal.Folder`2.HasMetadata">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Adam.Internal.Folder`2.Url">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Adam.Internal.Folder`2.Type">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Adam.Internal.Folder`2.HasChildren">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Adam.Internal.Folder`2.Folders">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Adam.Internal.Folder`2.Files">
      <inheritdoc />
    </member>
    <member name="T:ToSic.Sxc.Adam.Internal.FolderOfField`2">
      <summary>
            The ADAM Navigator creates a folder object for an entity/field combination
            This is the root folder where all files for this field are stored
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Adam.Internal.AdamContext">
      <summary>
            The context of ADAM operations - containing site, app, field, entity-guid etc.
            </summary>
      <remarks>
            It's abstract, because there will be a typed implementation inheriting this
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Adam.Internal.AdamContext.#ctor(ToSic.Sxc.Adam.Internal.AdamContext.MyServices,System.String)">
      <summary>
            The context of ADAM operations - containing site, app, field, entity-guid etc.
            </summary>
      <remarks>
            It's abstract, because there will be a typed implementation inheriting this
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Adam.Internal.AdamContext.Init(ToSic.Eav.Context.IContextOfApp,System.String,System.String,System.Guid,System.Boolean,ToSic.Sxc.Data.Internal.CodeDataFactory)">
      <summary>
            Initializes the object and performs all the initial security checks
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Adam.Internal.AdamContext.UseSiteRoot">
      <summary>
            Determines if the files come from the root (shared files).
            Is false, if they come from the item specific ADAM folder.
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Adam.Internal.AdamContext.ItemField">
      <summary>
            The field this state is for. Will be null/empty if UsePortalRoot is true
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Adam.Internal.AdamContext.ItemGuid">
      <summary>
            The item guid this state is for. Will be Empty if UsePortalRoot is true.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Adam.Internal.AdamContext.AttributeDefinition(ToSic.Eav.Apps.Services.IAppContentTypeService,System.String,System.String)">
      <summary>
            try to find attribute definition - for later extra security checks
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Adam.Internal.AdamContext`2">
      <inheritdoc />
    </member>
    <member name="T:ToSic.Sxc.Adam.Internal.AdamManager">
      <summary>
            The Manager of ADAM
            In charge of managing assets inside this app - finding them, creating them etc.
            </summary>
      <remarks>
            It's abstract, because there will be a typed implementation inheriting this
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Adam.Internal.AdamManager.Path">
      <summary>
            Path to the app assets
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Adam.Internal.AdamManager.Create(System.String,System.String,System.Action{ToSic.Eav.Metadata.IMetadataOf})">
      <summary>
            Get the first metadata entity of an item - or return a fake one instead
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Adam.Internal.AdamManager`2.RootFolder">
      <summary>
            Root folder object of the app assets
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Adam.Internal.AdamManager`2.Exists(System.String)">
      <summary>
            Verify that a path exists
            </summary>
      <param name="path"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Adam.Internal.AdamManager`2.Add(System.String)">
      <summary>
            Create a path (folder)
            </summary>
      <param name="path"></param>
    </member>
    <member name="P:ToSic.Sxc.Adam.Internal.AdamStorage.Root">
      <summary>
            Root of this container
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Adam.Internal.AdamStorage.GeneratePath(System.String)">
      <summary>
            Figure out the path to a subfolder within this container
            </summary>
      <param name="subFolder"></param>
      <returns></returns>
    </member>
    <member name="T:ToSic.Sxc.Adam.Internal.AdamStorageOfField`2">
      <summary>
            Container of the assets of a field
            each entity+field combination has its own container for assets
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Adam.Internal.AdamStorageOfSite`2">
      <summary>
            A container for the tenant (top level)
            For browsing the tenants content files
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Adam.Internal.AdamStorage`2.Folder(System.String,System.Boolean)">
      <summary>
            Get the folder specified in App.Settings (BasePath) combined with the module's ID
            </summary>
      <remarks>
            Will create the folder if it does not exist
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Adam.Internal.AdamStorage`2.Folder(System.Boolean)">
      <summary>
            Get a (root) folder object for this container
            </summary>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Adam.Internal.AdamSecurityChecksBase.UserIsNotRestrictedOrItemIsDraft(System.Guid,ToSic.Eav.WebApi.Errors.HttpExceptionAbstraction@)">
      <summary>
            Returns true if user isn't restricted, or if the restricted user is accessing a draft item
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Adam.Internal.AdamSecurityChecksBase.FieldPermissionOk(System.Collections.Generic.List{ToSic.Eav.Security.Grants})">
      <summary>
            This will check if the field-definition grants additional rights
            Should only be called if the user doesn't have full edit-rights
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Adam.Internal.AdamSecurityChecksBasic">
      <summary>
            This is a simple AdamSecurityChecks which doesn't know much about the environment but works to get started.
            
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Adam.Internal.AdamSecurityChecksBasic.#ctor(ToSic.Sxc.Adam.Internal.AdamSecurityChecksBase.MyServices)">
      <summary>
            This is a simple AdamSecurityChecks which doesn't know much about the environment but works to get started.
            
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Adam.Internal.AdamSecurityChecksBasic.SiteAllowsExtension(System.String)">
      <summary>
            Our version here just gives an ok - so that the site doesn't block this extension.
            Note that internally we'll still check against dangerous extensions, so this would just be an extra layer of protection,
            which isn't used in the basic implementation. 
            </summary>
      <param name="fileName"></param>
      <returns></returns>
    </member>
    <member name="T:ToSic.Sxc.Apps.App">
      <summary>
            A <em>single-use</em> app-object providing quick simple api to access
            name, folder, data, metadata etc.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Apps.App">ðŸ“– App</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Apps.App.Path">
      <inheritdoc cref="P:ToSic.Sxc.Apps.IApp.Path" />
    </member>
    <member name="P:ToSic.Sxc.Apps.App.Thumbnail">
      <inheritdoc cref="P:ToSic.Sxc.Apps.IApp.Thumbnail" />
    </member>
    <member name="P:ToSic.Sxc.Apps.App.PathShared">
      <inheritdoc cref="P:ToSic.Sxc.Apps.IApp.PathShared" />
    </member>
    <member name="P:ToSic.Sxc.Apps.App.PhysicalPathShared">
      <inheritdoc cref="P:ToSic.Sxc.Apps.IApp.PhysicalPathShared" />
    </member>
    <member name="M:ToSic.Sxc.Apps.App.Init(ToSic.Eav.Apps.IAppIdentityPure,ToSic.Eav.Apps.Internal.AppDataConfigSpecs)">
      <summary>
            Main constructor which auto-configures the app-data
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Apps.App.Query">
      <summary>
            Accessor to queries. Use like:
            - App.Query.Count
            - App.Query.ContainsKey(...)
            - App.Query["One Event"].List
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Apps.App.Query">ðŸ“– Query</a></para></summary>
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Apps.App.GetQuery(System.String)">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Apps.App.Configuration">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Apps.App.Settings">
      <inheritdoc cref="P:ToSic.Sxc.Code.Internal.IDynamicCode12.Settings" />
    </member>
    <member name="P:ToSic.Sxc.Apps.App.Resources">
      <inheritdoc cref="P:ToSic.Sxc.Code.Internal.IDynamicCode12.Resources" />
    </member>
    <member name="P:ToSic.Sxc.Apps.App.ToSic#Sxc#Apps#IAppTyped#Settings">
      <inheritdoc cref="P:ToSic.Sxc.Apps.IAppTyped.Settings" />
    </member>
    <member name="P:ToSic.Sxc.Apps.App.ToSic#Sxc#Apps#IAppTyped#Resources">
      <inheritdoc cref="P:ToSic.Sxc.Apps.IAppTyped.Resources" />
    </member>
    <member name="M:ToSic.Sxc.Apps.AppAssetFolderMain.DetermineShared(System.String)">
      <summary>
            Return true/false or null to allow upstream to do auto-detect
            </summary>
      <param name="location"></param>
      <returns></returns>
      <exception cref="T:System.ArgumentException"></exception>
    </member>
    <member name="M:ToSic.Sxc.Apps.AppDataTyped.ToSic#Sxc#Apps#IAppDataTyped#GetAll``1(ToSic.Lib.Coding.NoParamOrder,System.String,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Apps.AppDataTyped.ToSic#Sxc#Apps#IAppDataTyped#GetOne``1(System.Int32,ToSic.Lib.Coding.NoParamOrder,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Apps.AppDataTyped.ToSic#Sxc#Apps#IAppDataTyped#GetOne``1(System.Guid,ToSic.Lib.Coding.NoParamOrder,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Apps.AppFolder.Init(ToSic.Sxc.Blocks.Internal.BlockWithContextProvider)">
      <summary>
            This is necessary for special calls where the _ctxResolve may not yet be complete...
            Important: not sure if this is actually needed, I believe the ctxResolver is always initialized on all web-api requests...?
            </summary>
      <param name="getBlock"></param>
      <returns></returns>
    </member>
    <member name="P:ToSic.Sxc.Apps.AppTyped.ZoneId">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Apps.AppTyped.AppId">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Apps.AppTyped.Name">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Apps.AppTyped.Data">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Apps.AppTyped.GetQuery(System.String,ToSic.Lib.Coding.NoParamOrder,ToSic.Eav.DataSource.IDataSourceLinkable,System.Object)">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Apps.AppTyped.Configuration">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Apps.AppTyped.Settings">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Apps.AppTyped.Resources">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Apps.AppTyped.Folder">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Apps.AppTyped.FolderAdvanced(ToSic.Lib.Coding.NoParamOrder,System.String)">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Apps.AppTyped.Thumbnail">
      <inheritdoc />
    </member>
    <member name="T:ToSic.Sxc.Apps.IApp">
      <summary>
            An app-object as is available in a razor template or WebApi when in classic/dynamic mode.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Apps.IApp">ðŸ“– IApp</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Apps.IApp.Configuration">
      <summary>
            Configuration object with information about the App.
            This contains things like app version, path etc.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Apps.IApp.Configuration">ðŸ“– Configuration</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Apps.IApp.Settings">
      <summary>
            All the app settings which are custom for each app. 
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Apps.IApp.Settings">ðŸ“– Settings</a></para></summary>
      <returns>An <see cref="T:ToSic.Sxc.Data.IDynamicEntity" /> object</returns>
    </member>
    <member name="P:ToSic.Sxc.Apps.IApp.Resources">
      <summary>
            All the app resources (usually used for multi-language labels etc.)
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Apps.IApp.Resources">ðŸ“– Resources</a></para></summary>
      <returns>An <see cref="T:ToSic.Sxc.Data.IDynamicEntity" /> object</returns>
    </member>
    <member name="P:ToSic.Sxc.Apps.IApp.Query">
      <summary>
            All queries of the app, to access like App.Query["name"]
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Apps.IApp.Query">ðŸ“– Query</a></para></summary>
      <returns>A dictionary with all queries. Internally the dictionary will not be built unless accessed.</returns>
    </member>
    <member name="P:ToSic.Sxc.Apps.IApp.Path">
      <summary>
            The path to the current app, for linking JS/CSS files and
            images in the app folder. 
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Apps.IApp.Path">ðŸ“– Path</a></para></summary>
      <returns>Path usually starting with /portals/...</returns>
    </member>
    <member name="P:ToSic.Sxc.Apps.IApp.PhysicalPath">
      <summary>
            The path on the server hard disk for the current app. 
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Apps.IApp.PhysicalPath">ðŸ“– PhysicalPath</a></para></summary>
      <returns>Path usually starting with c:\...</returns>
    </member>
    <member name="P:ToSic.Sxc.Apps.IApp.PathShared">
      <summary>
            The path to the current apps shared/global folder, for linking JS/CSS files and
            images in the app folder. 
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Apps.IApp.PathShared">ðŸ“– PathShared</a></para></summary>
      <returns>Path usually starting with /portals/_default/...</returns>
      <remarks>Added v13.01</remarks>
    </member>
    <member name="P:ToSic.Sxc.Apps.IApp.PhysicalPathShared">
      <summary>
            The path on the server hard disk for the current apps shared/global folder. 
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Apps.IApp.PhysicalPathShared">ðŸ“– PhysicalPathShared</a></para></summary>
      <returns>Path usually starting with c:\...</returns>
      <remarks>Added v13.01</remarks>
    </member>
    <member name="P:ToSic.Sxc.Apps.IApp.Thumbnail">
      <summary>
            The thumbnail path for the current app. 
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Apps.IApp.Thumbnail">ðŸ“– Thumbnail</a></para></summary>
      <returns>path + app-icon.png if there is an icon there. </returns>
    </member>
    <member name="T:ToSic.Sxc.Apps.IAppDataTyped">
      <summary>
            Data object of an App in **Typed** mode
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Apps.IAppDataTyped">ðŸ“– IAppDataTyped</a></para></summary>
      <remarks>Added v17</remarks>
    </member>
    <member name="M:ToSic.Sxc.Apps.IAppDataTyped.Create(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,ToSic.Eav.Metadata.ITarget)">
      <inheritdoc cref="M:ToSic.Eav.Apps.IAppData.Create(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,ToSic.Eav.Metadata.ITarget)" />
    </member>
    <member name="M:ToSic.Sxc.Apps.IAppDataTyped.Create(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)">
      <inheritdoc cref="M:ToSic.Eav.Apps.IAppData.Create(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.Dictionary{System.String,System.Object}},System.String)" />
    </member>
    <member name="M:ToSic.Sxc.Apps.IAppDataTyped.Update(System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
      <inheritdoc cref="M:ToSic.Eav.Apps.IAppData.Update(System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object},System.String)" />
    </member>
    <member name="M:ToSic.Sxc.Apps.IAppDataTyped.Delete(System.Int32,System.String)">
      <inheritdoc cref="M:ToSic.Eav.Apps.IAppData.Delete(System.Int32,System.String)" />
    </member>
    <member name="M:ToSic.Sxc.Apps.IAppDataTyped.GetContentTypes">
      <summary>
            All content types of the app.
            </summary>
      <remarks>Added v17</remarks>
    </member>
    <member name="M:ToSic.Sxc.Apps.IAppDataTyped.GetContentType(System.String)">
      <summary>
            Get a single content type by name (display name or NameId).
            </summary>
      <param name="name">the name, either the normal name or the NameId which looks like a GUID</param>
      <remarks>Added v17</remarks>
    </member>
    <member name="M:ToSic.Sxc.Apps.IAppDataTyped.GetAll``1(ToSic.Lib.Coding.NoParamOrder,System.String,System.Boolean)">
      <summary>
            Get all data from the app of the specified type.
            It will detect the expected Content-Type based on the name of the class used.
            So in most cases you will not add any parameters.
            </summary>
      <typeparam name="T">The type to get and convert to - usually inheriting <see cref="T:Custom.Data.CustomItem" /></typeparam>
      <param name="protector">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="typeName">_optional_ type name</param>
      <param name="nullIfNotFound">if set, will return null if the type doesn't exist - default is empty list.</param>
      <returns></returns>
      <remarks>
            Released in v17.03.
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Apps.IAppDataTyped.GetOne``1(System.Int32,ToSic.Lib.Coding.NoParamOrder,System.Boolean)">
      <summary>
            Get a single item from the app of the specified type.
            </summary>
      <typeparam name="T">The type to get and convert to - usually inheriting <see cref="T:Custom.Data.CustomItem" /></typeparam>
      <param name="id">the ID as an int</param>
      <param name="protector">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="skipTypeCheck">allow get even if the Content-Type of the item with the ID doesn't match the type specified in the parameter T</param>
      <returns></returns>
      <remarks>
            Released in v17.03.
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Apps.IAppDataTyped.GetOne``1(System.Guid,ToSic.Lib.Coding.NoParamOrder,System.Boolean)">
      <summary>
            Get a single item from the app of the specified type.
            </summary>
      <typeparam name="T">The type to get and convert to - usually inheriting <see cref="T:Custom.Data.CustomItem" /></typeparam>
      <param name="id">the ID as GUID</param>
      <param name="protector">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="skipTypeCheck">allow get even if the Content-Type of the item with the ID doesn't match the type specified in the parameter T</param>
      <returns></returns>
      <remarks>
            Released in v17.03.
            </remarks>
    </member>
    <member name="T:ToSic.Sxc.Apps.IAppTyped">
      <summary>
            An app-object as is available in a razor template or WebApi when in **Typed** mode.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Apps.IAppTyped">ðŸ“– IAppTyped</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Apps.IAppTyped.Name">
      <inheritdoc cref="P:ToSic.Eav.Apps.IApp.Name" />
    </member>
    <member name="P:ToSic.Sxc.Apps.IAppTyped.Data">
      <inheritdoc cref="P:ToSic.Eav.Apps.IApp.Data" />
    </member>
    <member name="M:ToSic.Sxc.Apps.IAppTyped.GetQuery(System.String,ToSic.Lib.Coding.NoParamOrder,ToSic.Eav.DataSource.IDataSourceLinkable,System.Object)">
      <summary>
            Get a query in this App, optionally with more parameters and sources.
            </summary>
      <param name="name"></param>
      <param name="noParamOrder"></param>
      <param name="attach"></param>
      <param name="parameters"></param>
      <returns></returns>
    </member>
    <member name="P:ToSic.Sxc.Apps.IAppTyped.Configuration">
      <inheritdoc cref="P:ToSic.Sxc.Apps.IApp.Configuration" />
    </member>
    <member name="P:ToSic.Sxc.Apps.IAppTyped.Settings">
      <summary>
            All the app settings which are custom for each app. 
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Apps.IAppTyped.Settings">ðŸ“– Settings</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Apps.IAppTyped.Resources">
      <summary>
            All the app resources (usually used for multi-language labels etc.)
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Apps.IAppTyped.Resources">ðŸ“– Resources</a></para></summary>
    </member>
    <member name="M:ToSic.Sxc.Apps.IAppTyped.FolderAdvanced(ToSic.Lib.Coding.NoParamOrder,System.String)">
      <summary>
            Get the folder of the current app, usually for creating links to assets etc.
            </summary>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="location">name of the app location - either `auto` (default), `site` or `shared`</param>
      <returns>an IFolder object which can then use `.Url`, `.PhysicalPath` etc.</returns>
      <remarks>
            * Despite being of type `IFolder`, the object is currently not able to traverse children folders/files.
              We may add this some day in future.
            * Previously the `Folder` property returned containing the name. This is now on `.Folder().Name`.
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Apps.IAppTyped`2.Name">
      <inheritdoc cref="P:ToSic.Eav.Apps.IApp.Name" />
    </member>
    <member name="P:ToSic.Sxc.Apps.IAppTyped`2.Data">
      <inheritdoc cref="P:ToSic.Eav.Apps.IApp.Data" />
    </member>
    <member name="M:ToSic.Sxc.Apps.IAppTyped`2.GetQuery(System.String,ToSic.Lib.Coding.NoParamOrder,ToSic.Eav.DataSource.IDataSourceLinkable,System.Object)">
      <inheritdoc cref="M:ToSic.Sxc.Apps.IAppTyped.GetQuery(System.String,ToSic.Lib.Coding.NoParamOrder,ToSic.Eav.DataSource.IDataSourceLinkable,System.Object)" />
    </member>
    <member name="P:ToSic.Sxc.Apps.IAppTyped`2.Configuration">
      <inheritdoc cref="P:ToSic.Sxc.Apps.IApp.Configuration" />
    </member>
    <member name="M:ToSic.Sxc.Apps.IAppTyped`2.FolderAdvanced(ToSic.Lib.Coding.NoParamOrder,System.String)">
      <inheritdoc cref="M:ToSic.Sxc.Apps.IAppTyped.FolderAdvanced(ToSic.Lib.Coding.NoParamOrder,System.String)" />
    </member>
    <member name="P:ToSic.Sxc.Apps.IAppTyped`2.Settings">
      <summary>
            All the app settings which are custom for each app.
            These are typed - typically to AppCode.Data.AppSettings
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Apps.IAppTyped`2.Settings">ðŸ“– Settings</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Apps.IAppTyped`2.Resources">
      <summary>
            All the app resources (usually used for multi-language labels etc.).
            /// These are typed - typically to AppCode.Data.AppResources
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Apps.IAppTyped`2.Resources">ðŸ“– Resources</a></para></summary>
    </member>
    <member name="T:ToSic.Sxc.Apps.Internal.Assets.AppAssets">
      <summary>
            Constants for App Assets
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Apps.Internal.Assets.AppAssets.PortalFileSystem">
      <summary>
            App file is located in the site itself.
            This is the Key used up until 2sxc 12.01 and will still exist in old data for a long time. 
            </summary>
      <remarks>
            It's not used in our code, but leave here for reference
            </remarks>
    </member>
    <member name="F:ToSic.Sxc.Apps.Internal.Assets.AppAssets.HostFileSystem">
      <summary>
            App file is located in the shared location. 
            This is the Key used up until 2sxc 12.01 and will still exist in old data for a long time. 
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Apps.Internal.Assets.AssetEditInfo">
      <summary>
            Information class needed by the edit-ui, to provide optimal syntax helpers etc.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Apps.Internal.Assets.AssetEditInfo.#ctor">
      <summary>
            parameter-less constructor for deserialization, to fix "System.InvalidOperationException"
            "Each parameter in the deserialization constructor on type 'ToSic.Sxc.Apps.Assets.AssetEditInfo' must bind to an object property or field on deserialization.
            Each parameter name must match with a property or field on the object. The match can be case-insensitive.",
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Apps.Internal.Assets.AssetEditor.EnsureUserMayEditAssetOrThrow(System.String)">
      <summary>
            Check permissions and if not successful, give detailed explanation
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Apps.Internal.Assets.AssetEditor.Source">
      <summary>
            Read / Write the source code of the template file
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Apps.Internal.Assets.TemplateInfo.Platforms">
      <summary>
            Returns an array of platforms this template supports so the UI can pick
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Apps.Internal.BlockConfiguration.Exists">
      <summary>
            Returns true if a content group entity for this group really exists
            Means for example, that the app can't be changed anymore
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Apps.Internal.BlockConfiguration.Content">
      <summary>
            Content is a bit special, it must always return a list with at least one null-item
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Apps.Internal.AppFolderInitializer.EnsureTemplateFolderExists(System.String,System.Boolean)">
      <summary>
            Creates a directory and copies the needed web.config for razor files
            if the directory does not exist.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Apps.Internal.Work.WorkApps.GetApps(ToSic.Eav.Context.ISite)">
      <summary>
            Returns all Apps for the current zone
            </summary>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Apps.Internal.Work.WorkApps.GetInheritableApps(ToSic.Eav.Context.ISite)">
      <summary>
            Returns all Apps for the current zone
            </summary>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Apps.Internal.Work.WorkBlocks.GetBlockConfig(System.Guid)">
      <summary></summary>
      <returns>Will always return an object, even if the group doesn't exist yet. The .Entity would be null then</returns>
    </member>
    <member name="M:ToSic.Sxc.Apps.Internal.Work.WorkViews.GetFullyCompatibleViews(ToSic.Sxc.Apps.Internal.BlockConfiguration)">
      <summary>
            Get templates which match the signature of possible content-items, presentation etc. of the current template
            </summary>
      <param name="blockConfiguration"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Apps.Internal.Work.WorkViewsMod.CreateOrUpdate(System.Nullable{System.Int32},System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.Boolean,System.String,System.Boolean,System.Boolean,System.String,System.Nullable{System.Int32},System.String)">
      <summary>
            Adds or updates a template - will create a new template if templateId is not specified
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Blocks.Internal.BlockBuilder">
      <summary>
            This is an instance-context of a Content-Module. It basically encapsulates the instance-state, incl.
            IDs of Zone and App, the App, EAV-Context, Template, Content-Groups (if available), Environment and OriginalModule (in case it's from another portal)
            It is needed for just about anything, because without this set of information
            it would be hard to get anything done .
            Note that it also adds the current-user to the state, so that the system can log data-changes to this user
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Blocks.Internal.BlockBuilder.#ctor(ToSic.Sxc.Blocks.Internal.BlockBuilder.MyServices)">
      <summary>
            This is an instance-context of a Content-Module. It basically encapsulates the instance-state, incl.
            IDs of Zone and App, the App, EAV-Context, Template, Content-Groups (if available), Environment and OriginalModule (in case it's from another portal)
            It is needed for just about anything, because without this set of information
            it would be hard to get anything done .
            Note that it also adds the current-user to the state, so that the system can log data-changes to this user
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.BlockBuilder.Block">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.BlockBuilder.DependentApps">
      <summary>
            This list is only populated on the root builder. Child builders don't actually use this.
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Blocks.Internal.BlockBuilder.InstallationOk">
      <summary>
            Cache the installation ok state, because once it's ok, we don't need to re-check
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.BlockBuilder.AnyLicenseOk">
      <summary>
            license ok state
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Blocks.Internal.BlockBuilder.GetEngine">
      <summary>
            Get the rendering engine, but avoid double execution.
            In some cases, the engine is needed early on to be sure if we need to do some overrides, but execution should then be later on Render()
            </summary>
      <returns></returns>
    </member>
    <member name="T:ToSic.Sxc.Blocks.Internal.IBlockBuilder">
      <summary>
            This is kind of the master-container for a content-management block. It's the wrapper which is in the CMS (DNN), and the module will talk with this
            Sxc Block to get everything rendered. 
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Blocks.Internal.IBlockBuilder.Run(System.Boolean,ToSic.Sxc.Blocks.Internal.RenderSpecs)">
      <summary></summary>
      <param name="topLevel">
                This means it's the outer-most render which is happening.
                This changes if things like header changes, features etc. are picked up - which should only happen at top level
            </param>
      <param name="specs">Data to be added to the model of the main template/razor</param>
      <returns></returns>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.IBlockBuilder.Block">
      <summary>
            The real block / unit of content which will be rendered. 
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.IBlockBuilder.RootBuilder">
      <summary>
            The root block, which controls what assets / js etc. will be rendered
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.IBlockBuilder.WrapInDiv">
      <summary>
            Determines if the output should be wrapped in a div or not
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Blocks.Internal.IBlockBuilder.GetEngine">
      <summary>
            Get the engine which will render a block
            </summary>
      <returns></returns>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.BlockBase.Context">
      <inheritdoc />
    </member>
    <member name="F:ToSic.Sxc.Blocks.Internal.BlockFromEntity.Entity">
      <summary>
            This is the entity that was used to configure the block
            We need it for later operations, like mentioning what index it was on in a list
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Blocks.Internal.BlockFromEntity.GetBlockEntity(ToSic.Sxc.Blocks.Internal.IBlock,System.Int32)">
      <summary>
            Get the content-block definition if we only have the ID
            </summary>
      <param name="parent"></param>
      <param name="contentBlockId">The block ID. Can sometimes be negative to mark inner-content-blocks</param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Blocks.Internal.BlockFromEntity.LoadBlockDefinition(System.Int32,ToSic.Eav.Data.IEntity,ToSic.Lib.Logging.ILog)">
      <summary>
            Get all the specs for this content-block from the entity
            </summary>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Blocks.Internal.BlockFromModule.#ctor(ToSic.Sxc.Blocks.Internal.BlockBase.MyServices)">
      <summary>
            Official constructor, must call Init afterwards
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Blocks.Internal.BlockFromModule.Init(ToSic.Sxc.Context.Internal.IContextOfBlock)">
      <summary>
            Create a module-content block
            </summary>
      <param name="ctx"></param>
    </member>
    <member name="T:ToSic.Sxc.Blocks.Internal.BlockWithContextProvider">
      <summary>
            This is an important helper.
            Background: When a block is prepared, we sometimes need the context early on to do security checks.
            1. But we cannot use the Block.Context
            2. because that again requires the Block first
            3. which would cause a StackOverflow because it needs to be created first
            4. which in turn requires the context - so it would loop and die
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Blocks.Internal.BlockWithContextProvider.#ctor(ToSic.Sxc.Context.Internal.IContextOfBlock,System.Func{ToSic.Sxc.Blocks.Internal.IBlock})">
      <summary>
            This is an important helper.
            Background: When a block is prepared, we sometimes need the context early on to do security checks.
            1. But we cannot use the Block.Context
            2. because that again requires the Block first
            3. which would cause a StackOverflow because it needs to be created first
            4. which in turn requires the context - so it would loop and die
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Blocks.Internal.IBlock">
      <summary>
            INTERNAL: A unit / block of output in a CMS. 
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.IBlock.ParentId">
      <summary>
            The module ID or the parent-content-block id, probably not ideal here, but not sure
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.IBlock.Context">
      <summary>
            The context we're running in, with tenant, container etc.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.IBlock.View">
      <summary>
            The view which will be used to render this block
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.IBlock.App">
      <summary>
            The app this block is running in
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.IBlock.Data">
      <summary>
            The <see cref="T:ToSic.Sxc.DataSources.IBlockInstance" /> which delivers data for this block (will be used by the <see cref="T:ToSic.Sxc.Engines.IEngine" /> together with the View)
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Blocks.Internal.Render.IRenderResult">
      <summary>
            Contains everything which results from a render of a Block
            Incl. all the features that are activated, page changes etc.
            It's kind of like a bundle of things the CMS must then do to deliver to the page
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.Render.IRenderResult.Html">
      <summary>
            The resulting HTML to add to the page
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.Render.IRenderResult.Size">
      <summary>
            WIP - should tell us how big this is in memory - estimate
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.Render.IRenderResult.CanCache">
      <summary>
            Determines if this render-result can be cached.
            Should be false in case of errors or not-yet initialized content
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.Render.IRenderResult.IsError">
      <summary>
            Information that the result contains an error message and should be treated differently, like no caching
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.Render.IRenderResult.Features">
      <summary>
            Built-in page features (like jQuery, 2sxc.JsCode, ...) which were requested by the code and should be enabled
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.Render.IRenderResult.Assets">
      <summary>
            Assets (js, css) which must be added to the page
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.Render.IRenderResult.PageChanges">
      <summary>
            Changes to the page properties - like Title, Description, Keywords etc.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.Render.IRenderResult.HeadChanges">
      <summary>
            Changes to the Page Header like Meta-Tags etc.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.Render.IRenderResult.FeaturesFromSettings">
      <summary>
            Features which are defined in the SystemSettings and wer requested by the code and should be enabled.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.Render.IRenderResult.HttpHeaders">
      <summary>
            List of HttpHeaders to add to the response in format "key:value"
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.Render.IRenderResult.HttpStatusCode">
      <summary>
            Optional HTTP-Status Code which the code returned.
            Typically used on details-pages, which could return a 404 or similar.
            If it's applied to the Response, it should probably also include the <see cref="P:ToSic.Sxc.Blocks.Internal.Render.IRenderResult.HttpStatusMessage" /></summary>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.Render.IRenderResult.HttpStatusMessage">
      <summary>
            Optional status message which could give the <see cref="P:ToSic.Sxc.Blocks.Internal.Render.IRenderResult.HttpStatusCode" /> some context.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.Render.IRenderResult.Errors">
      <summary>
            Errors such as not-activated features
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Blocks.Internal.Render.RenderResult">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Blocks.Internal.Render.RenderResult.#ctor(System.String)">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.Render.RenderResult.Html">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.Render.RenderResult.CanCache">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.Render.RenderResult.IsError">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.Render.RenderResult.Features">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.Render.RenderResult.Assets">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.Render.RenderResult.PageChanges">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.Render.RenderResult.HeadChanges">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.Render.RenderResult.FeaturesFromSettings">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.Render.RenderResult.HttpStatusCode">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.Render.RenderResult.HttpStatusMessage">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.Render.RenderResult.DependentApps">
      <inheritdoc />
    </member>
    <member name="T:ToSic.Sxc.Blocks.Internal.Render.RenderService">
      <summary>
            Block-Rendering system. It's responsible for taking a Block and delivering HTML for the output. <br />
            It's used for InnerContent, so that Razor-Code can easily render additional content blocks. <br />
            See also <a href="https://go.2sxc.org/xref17?xref=Basics.Cms.InnerContent.Index">Basics.Cms.InnerContent.Index</a></summary>
    </member>
    <member name="M:ToSic.Sxc.Blocks.Internal.Render.RenderService.One(ToSic.Sxc.Data.Internal.ICanBeItem,ToSic.Lib.Coding.NoParamOrder,ToSic.Eav.Data.ICanBeEntity,System.Object,System.String,System.Nullable{System.Guid})">
      <summary>
            Render one content block
            This is accessed through DynamicEntity.Render()
            At the moment it MUST stay internal, as it's not clear what API we want to surface
            </summary>
      <param name="parent">The parent-item containing the content-blocks and providing edit-context</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="item">The content-block item to render. Optional, by default the same item is used as the context.</param>
      <param name="data">TODO V16.00</param>
      <param name="field">Optional: </param>
      <param name="newGuid">Internal: this is the guid given to the item when being created in this block. Important for the inner-content functionality to work. </param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Blocks.Internal.Render.RenderService.All(ToSic.Sxc.Data.Internal.ICanBeItem,ToSic.Lib.Coding.NoParamOrder,System.String,System.String,System.Int32,System.String)">
      <summary>
            Render content-blocks into a larger html-block containing placeholders
            </summary>
      <param name="parent">The parent-item containing the content-blocks and providing edit-context</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="field">Required: Field containing the content-blocks. </param>
      <param name="max">BETA / WIP</param>
      <param name="merge">Optional: html-text containing special placeholders.</param>
      <param name="apps">BETA / WIP</param>
      <returns></returns>
      <remarks>
            * Changed result object to `IRawHtmlString` in v16.02 from `IHybridHtmlString`
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Blocks.Internal.Render.RenderService.Module(System.Int32,System.Int32,ToSic.Lib.Coding.NoParamOrder,System.Object)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Blocks.Internal.Render.RenderService.GetEditService(ToSic.Sxc.Blocks.Internal.IBlock)">
      <summary>
            create edit-object which is necessary for context attributes
            We need a new one for each parent
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.BlockResourceExtractor.Assets">
      <summary>
            List of extracted assets - this must be processed later by the caller
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Blocks.Internal.BlockResourceExtractor.Process(System.String,ToSic.Sxc.Web.Internal.ClientAssets.ClientAssetsExtractSettings)">
      <summary>
            Run the sequence to extract assets
            </summary>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Blocks.Internal.BlockResourceExtractor.GetHtmlAttributes(System.String)">
      <summary>
            Extract dictionary of html attributes
            </summary>
      <param name="htmlTag"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Blocks.Internal.BlockResourceExtractor.Is2SxcApiJs(System.String)">
      <summary></summary>
      <remarks>
            check special case: the 2sxc.api script. only check the first part of the path
            because it could be .min, or have versions etc.
            </remarks>
      <param name="url"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Blocks.Internal.BlockResourceExtractor.FixUrlWithSpaces(System.String)">
      <summary>
            Because of an issue with spaces, prepend tilde to urls that start at root
            and contain spaces: https://github.com/2sic/2sxc/issues/1566
            </summary>
      <returns></returns>
    </member>
    <member name="T:ToSic.Sxc.Blocks.Internal.BlockResourceExtractorWithInline">
      <summary>
            ATM only used in Oqtane, where external and internal scripts must be extracted
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Blocks.Internal.BlockResourceExtractorWithInline.#ctor(ToSic.Sxc.Web.Internal.PageService.PageServiceShared)">
      <summary>
            ATM only used in Oqtane, where external and internal scripts must be extracted
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Blocks.Internal.IBlockResourceExtractor">
      <summary>
            System to automatically pick up JS/CSS files which should be bundled
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Blocks.Internal.IBlockResourceExtractor.Process(System.String,ToSic.Sxc.Web.Internal.ClientAssets.ClientAssetsExtractSettings)">
      <summary>
            Scan the html for possible JS/CSS files which should be bundled and extract these. 
            </summary>
      <param name="html">html to extract from</param>
      <param name="settings">settings to use</param>
      <returns>
            Original html without the js/css tags which were bundled (so they get removed here)
            Second return-param is an information if the core $2sxc.js should be included
            </returns>
    </member>
    <member name="T:ToSic.Sxc.Blocks.Internal.BlockViewLoader">
      <summary>
            This contains the logic to decide which view a block will have
            Basically the one which is configured, or a replacement based on the url
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Blocks.Internal.BlockViewLoader.#ctor(ToSic.Lib.Logging.ILog)">
      <summary>
            This contains the logic to decide which view a block will have
            Basically the one which is configured, or a replacement based on the url
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Blocks.Internal.IView">
      <summary>
            Defines a view configuration which is loaded from a <see cref="T:ToSic.Eav.Data.EntityBasedType" />.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.IView.Name">
      <summary>
            The name, localized in the current UI language.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.IView.Identifier">
      <summary>
            An optional unique identifier for this View configuration. 
            </summary>
      <remarks>New in 12.02</remarks>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.IView.Icon">
      <summary>
            An optional Icon for this View configuration. Would be used instead of the file name in the App-folder. WIP
            </summary>
      <remarks>New in 12.02</remarks>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.IView.Path">
      <summary>
            Path to the template
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.IView.Type">
      <summary>
            The underlying type name of the template, ATM they are unfortunately hard-coded as "C# Razor" and "Token"
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.IView.IsHidden">
      <summary>
            Determine if we should hide this view/template from the pick-UI.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.IView.IsShared">
      <summary>
            Translates the location to tell us if it's a shared view (the template is in a shared location)
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.IView.UseForList">
      <summary>
            Determines if the view should behave as a list or not. Views that are lists also
            have Header configuration and treat content in a special way. 
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.IView.QueryRaw">
      <summary>
            The query which provides data to this view. 
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.IView.Query">
      <summary>
            The query attached to this view (if one was specified)
            </summary>
      <returns>A query object or null</returns>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.IView.UrlIdentifier">
      <summary>
            An identifier which could occur in the url, causing the view to automatically switch to this one. 
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.IView.IsRazor">
      <summary>
            Returns true if the current template uses Razor
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.IView.Edition">
      <summary>
            Contains the polymorph edition name for this view, which changes
            what path is loaded.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.IView.SearchIndexingDisabled">
      <summary>
            Determines if search indexing should be disabled - so this view will not provide search data.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.IView.ViewController">
      <summary>
            The external class which should be compiled / used to customize search.
            
            In future this could do more, which is why it's called ViewController and not SearchController or something. 
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.IView.SearchIndexingStreams">
      <summary>
            Streams which should be included in the search index.
            If empty will use all streams.
            CSV
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.View.IsRazor">
      <summary>
            Returns true if the current template uses Razor
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.View.SearchIndexingDisabled">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.View.ViewController">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Blocks.Internal.View.SearchIndexingStreams">
      <inheritdoc />
    </member>
    <member name="T:ToSic.Sxc.Blocks.IRenderService">
      <summary>
            Old name for the IRenderService, it's in use in some v12 App templates so we must keep it working.
            Will continue to work, but shouldn't be used. Please use <see cref="T:ToSic.Sxc.Services.IRenderService" />  instead
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Blocks.IRenderService">ðŸ“– IRenderService</a></para></summary>
    </member>
    <member name="T:ToSic.Sxc.Cms.Data.GpsCoordinates">
      <summary>
            Represents GPS coordinates.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Cms.Data.GpsCoordinates">ðŸ“– GpsCoordinates</a></para></summary>
      <remarks>
            Released in v17.03, still BETA.
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Cms.Data.GpsCoordinates.Latitude">
      <summary>
            The latitude (North is +, South is -) of the GPS coordinates.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Cms.Data.GpsCoordinates.Latitude">ðŸ“– Latitude</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Cms.Data.GpsCoordinates.Longitude">
      <summary>
            The longitude (East is +, West is -) of the GPS coordinates.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Cms.Data.GpsCoordinates.Longitude">ðŸ“– Longitude</a></para></summary>
    </member>
    <member name="M:ToSic.Sxc.Cms.Data.GpsCoordinates.FromJson(System.String)">
      <summary>
            Parse a json string into a <see cref="T:ToSic.Sxc.Cms.Data.GpsCoordinates" /> object.
            It's an own function, to ensure that the deserialization is done with the correct options,
            since it may be used in places where the IJsonService is not available.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Cms.Internal.Publishing.IPagePublishing.DoInsidePublishing(ToSic.Eav.Context.IContextOfSite,System.Action{ToSic.Eav.Cms.Internal.VersioningActionInfo})">
      <summary>
            Wraps an action and performs pre/post processing related to versioning of the environment.
            </summary>
      <param name="context"></param>
      <param name="action"></param>
    </member>
    <member name="T:ToSic.Sxc.Cms.Internal.Publishing.NoPagePublishing">
      <summary>
            This is the fallback page publishing strategy, which basically says that page publishing isn't enabled
            NOTE: It is currently not in use, and that's ok. 
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Cms.Internal.Publishing.NoPagePublishing.#ctor">
      <summary>
            This is the fallback page publishing strategy, which basically says that page publishing isn't enabled
            NOTE: It is currently not in use, and that's ok. 
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Cms.Internal.Publishing.PagePublishingGetSettingsBase.LookupRequirements(System.Int32)">
      <summary>
            The lookup must be implemented for each platform
            </summary>
      <param name="moduleId"></param>
      <returns></returns>
    </member>
    <member name="T:ToSic.Sxc.Cms.Internal.Publishing.PagePublishingGetSettingsForbidden">
      <summary>
            This is the fallback page publishing strategy, which basically says that page publishing isn't enabled
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Cms.Internal.Publishing.PagePublishingGetSettingsOptional">
      <summary>
            This is the fallback page publishing strategy, which basically says that page publishing isn't enabled
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Cms.Internal.Publishing.PagePublishingGetSettingsOptional.#ctor">
      <summary>
            This is the fallback page publishing strategy, which basically says that page publishing isn't enabled
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Cms.Internal.Publishing.BlockPublishingSettings">
      <summary>
            Tell the save operations if saving should trigger change-detection at page level to start work flows
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Code.ICodeCustomizer">
      <summary>
             Helper object to use on Razor, Code, APIs to create more app-specific helper objects.
             Eg. the `App` object, `View` object etc.
            
             It will usually be provided on a protected `Customize` property on RazorTyped etc.
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Code.ICodeCustomizer">ðŸ“– ICodeCustomizer</a></para></summary>
    </member>
    <member name="M:ToSic.Sxc.Code.ICodeCustomizer.App``2">
      <summary>
            Create (and cache for reuse) a strongly typed App instance for the App object.
            </summary>
      <typeparam name="TSettings">Type to use for Settings.</typeparam>
      <typeparam name="TResources">Type to use for Resources</typeparam>
    </member>
    <member name="M:ToSic.Sxc.Code.ICodeCustomizer.MyView``2">
      <summary>
            Create (and cache for reuse) a strongly typed View instance for the MyView object.
            </summary>
      <typeparam name="TSettings">Type to use for Settings.</typeparam>
      <typeparam name="TResources">Type to use for Resources</typeparam>
    </member>
    <member name="T:ToSic.Sxc.Code.IDevTools">
      <summary>
             WIP!!!
            
             This should provide special APIs to assist developers.
             It will probably change from version to version, so the use should be limited to quick debugs and similar,
             but never remain in the code.
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Code.IDevTools">ðŸ“– IDevTools</a></para></summary>
    </member>
    <member name="M:ToSic.Sxc.Code.IDevTools.Debug(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Boolean)">
      <summary>
            Enable debugging on a specific object, if it supports it.
            </summary>
      <param name="target"></param>
      <param name="noParamOrder"></param>
      <param name="debug"></param>
    </member>
    <member name="T:ToSic.Sxc.Code.IHasCodeContext">
      <summary>
             Special interface to mark all objects which have the current code context.
             These objects know about the current App, are able to provide ServiceKits and more.
            
             The interface is used to allow for code in the `AppCode` folder to pass the context to the base class.
             Thereby enabling things such as the `Kit` or `App` object to magically work.
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Code.IHasCodeContext">ðŸ“– IHasCodeContext</a></para></summary>
    </member>
    <member name="T:ToSic.Sxc.Code.Internal.CodeApiServiceFactory">
      <summary>
            Special helper which will create the code-root based on the parent class requesting it.
            If the parent is generic supporting IDynamicModel[Model, Kit] it will create the generic root
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.CodeApiServiceFactory.#ctor(System.IServiceProvider)">
      <summary>
            Special helper which will create the code-root based on the parent class requesting it.
            If the parent is generic supporting IDynamicModel[Model, Kit] it will create the generic root
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.CodeApiServiceFactory.BuildGenericCodeRoot(System.Type)">
      <summary>
            Special helper for new Kit-based Razor templates in v14
            </summary>
      <returns>`null` if not applicable, otherwise the typed DynamicRoot</returns>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.CodeApiServiceObsolete.TryToBuildElementList">
      <remarks>
            This must be lazy-loaded, otherwise initializing the AppAndDataHelper will break when the Data-object fails 
            - this would break API even though the List etc. are never accessed
            </remarks>
    </member>
    <member name="T:ToSic.Sxc.Code.Internal.CodeApiService">
      <summary>
            Base class for any dynamic code root objects. <br />
            Root objects are the ones compiled by 2sxc - like the RazorComponent or ApiController. <br />
            If you create code for dynamic compilation, you'll always inherit from ToSic.Sxc.Dnn.DynamicCode.
            Note that other DynamicCode objects like RazorComponent or ApiController reference this object for all the interface methods of <see cref="T:ToSic.Sxc.Code.IDynamicCode" />.
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Code.Internal.CodeApiService.MyServices">
      <summary>
            Helper class to ensure if dependencies change, inheriting objects don't need to change their signature
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.CodeApiService.GetService``1">
      <inheritdoc cref="M:ToSic.Eav.Code.ICanGetService.GetService``1" />
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.CodeApiService.App">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.CodeApiService.Data">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.CodeApiService.Link">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.Link" />
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.CodeApiService.Edit">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.CodeApiService.AsDynamic(System.String,System.String)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.AsDynamic(System.String,System.String)" />
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.CodeApiService.AsDynamic(ToSic.Eav.Data.IEntity)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.AsDynamic(ToSic.Eav.Data.IEntity)" />
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.CodeApiService.AsDynamic(System.Object)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.AsDynamic(System.Object)" />
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.CodeApiService.AsDynamic(System.Object[])">
      <inheritdoc cref="M:ToSic.Sxc.Code.Internal.IDynamicCode12.AsDynamic(System.Object[])" />
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.CodeApiService.AsEntity(System.Object)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.AsEntity(System.Object)" />
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.CodeApiService.AsList(System.Object)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.AsList(System.Object)" />
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.CodeApiService.Convert">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.CodeApiService.AsAdam(ToSic.Eav.Data.ICanBeEntity,System.String)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.AsAdam(ToSic.Eav.Data.ICanBeEntity,System.String)" />
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.CodeApiService.CreateInstance(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.String,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.CodeApiService.CreateInstancePath">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.CodeApiService.Content">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.Content" />
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.CodeApiService.Header">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.Header" />
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.CodeApiService.CreateSource``1(ToSic.Eav.DataSource.IDataSource,ToSic.Eav.LookUp.ILookUpEngine)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.CreateSource``1(ToSic.Eav.DataSource.IDataSource,ToSic.Eav.LookUp.ILookUpEngine)" />
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.CodeApiService.CreateSource``1(ToSic.Eav.DataSource.IDataStream)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.CreateSource``1(ToSic.Eav.DataSource.IDataStream)" />
    </member>
    <member name="F:ToSic.Sxc.Code.Internal.CodeApiService._reusableServices">
      <summary>
            A kind of cache for:
            - all kinds of kits by version, eg. Kit14, Kit16
            - all services used inside these kits, as they should share the state (eg. the Edit kit)
            ...so we don't have to create them over and over again.
            This allows us to just get an object, kit, and if it's already created, we get the same instance.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.CodeApiService.ToSic#Sxc#Code#Internal#ICodeApiServiceInternal#GetKit``1">
      <summary>
            Get or Create a Kit by type
            </summary>
      <typeparam name="TKit"></typeparam>
      <returns></returns>
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.CodeApiService.Resources">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.CodeApiService.Settings">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.CodeApiService`2.Kit">
      <summary>
            The primary kit for this service.
            Other kit versions can be accessed using `GetKit{TKit}`
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Code.Internal.ICodeApiService">
      <summary>
            This is the same as IDynamicCode, but the root object. 
            We create another interface to ensure we don't accidentally pass around a sub-object where the root is really needed.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.ICodeApiService.GetService``1(ToSic.Lib.Coding.NoParamOrder,System.Boolean)">
      <summary>
            Special GetService which can cache the found service so any other use could get the same instance.
            This should ensure that an Edit service requested through Kit14 and Kit16 are both the same, etc.
            </summary>
      <typeparam name="TService"></typeparam>
      <param name="protector"></param>
      <param name="reuse">if true, then a service requested multiple times will return the same instance</param>
      <returns></returns>
    </member>
    <member name="T:ToSic.Sxc.Code.Internal.IHasCodeApiService">
      <summary>
            Marks objects which have DynCodeRoot which is passed around to sub-objects as needed
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.IHasCodeApiService._CodeApiSvc">
      <summary>
            The dynamic code root which many dynamic code objects need to access prepared context, state etc.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.CodeErrorHelp.CodeHelpBuilder.BuildVariations(ToSic.Eav.Code.Help.CodeHelp,System.Func{ToSic.Eav.Code.Help.CodeHelp,ToSic.Eav.Code.Help.CodeHelp}[])">
      <summary>
            Get a list containing the first help and various derived helps
            </summary>
      <param name="first"></param>
      <param name="generators"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.CodeErrorHelp.CodeHelpBuilder.BuildListFromDiverseSources(System.Object[])">
      <summary>
            Generate a list of help using help-objects, generator objects or list of help
            </summary>
      <param name="parts"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.CodeErrorHelp.GenNotExist.DetectTypeDoesNotContain(System.String,System.String)">
      <summary>
            Build detection string for errors which say ... does not contain...
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.CodeErrorHelp.HelpForRazor12.Issues12To14">
      <summary>
            List re-used in v12 and v14
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.CodeErrorHelp.HelpForRazor12.Compile12">
      <summary>
            All issues for v12 - ATM identical with the shared list.
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "F:ToSic.Sxc.Code.Internal.CodeErrorHelp.HelpForRazorTyped.GenericExpressionMistakenForHtml" -->
    <member name="F:ToSic.Sxc.Code.Internal.CodeErrorHelp.HelpForRazorTyped.IncorrectDynamicUsage">
      <summary>
            Help when a developer accidentally casts an ITypedItem to dynamic, and tries to use methods not accessible through dynamic due to explicit interface implementation.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.CodeErrorHelp.HelpForRazorTyped.Compile16">
      <summary>
            Compile Help for RazorTyped etc.
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Code.Internal.CodeErrorHelp.HelpForRazorCompileErrors">
      <summary>
            Help for compile errors before the Razor base class is known.
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Code.Internal.CodeErrorHelp.HelpForRazorCompileErrors.UnknownNamespace">
      <summary>
            Help when compiling with a namespace which is not known
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Code.Internal.CodeErrorHelp.HelpForRazorCompileErrors.ProbablySemicolonAfterInherits">
      <summary>
            Help when the new Roslyn compiler runs into a conversion problem because of a semicolon at the end of the inherits-statement
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Code.Internal.CodeErrorHelp.HelpForRazorCompileErrors.ProbablyCommentAfterInherits">
      <summary>
            Help when the new Roslyn compiler runs into a conversion problem because of a comment at the end of the inherits-statement
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.CodeRunHelpers.CodeHelper.CreateInstance(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.String,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="T:ToSic.Sxc.Code.Internal.CodeRunHelpers.CodeHelperSpecs">
      <summary>
            Helper information for all code helpers, which is often passed around from one helper to another.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.CodeRunHelpers.CodeHelperSpecs.#ctor(ToSic.Sxc.Code.Internal.ICodeApiService,System.Boolean,System.String)">
      <summary>
            Helper information for all code helpers, which is often passed around from one helper to another.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.CodeRunHelpers.RazorHelperBase.ResolvePathIfAbsoluteToApp(System.String,ToSic.Sxc.Code.Internal.ICodeApiService)">
      <summary></summary>
      <param name="path"></param>
      <param name="overrideCodeRoot">Insert another code Root, ATM a patch for Oqtane Razor</param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.CodeRunHelpers.RazorHelperBase.GetCode(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.Boolean)">
      <summary>
            Creates instances of the shared pages with the given relative path
            </summary>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.CustomCodeBase.#ctor(System.String)">
      <summary>
            Main constructor, NOT for DI may never have parameters, otherwise inheriting code will run into problems. 
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.CustomCodeBase.SysHlp">
      <summary>
            Special helper to move all Razor logic into a separate class.
            For architecture of Composition over Inheritance.
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Code.Internal.Generate.CodeFileRaw">
      <summary>
            Object which contains the info to generate the class code file.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.Generate.CodeFileRaw.#ctor(System.String,System.String,System.String)">
      <summary>
            Object which contains the info to generate the class code file.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.Generate.CodeFileRaw.FileName">
      <summary>
            The file name to store into.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.Generate.CodeFileRaw.BodyWithoutIntro">
      <summary>
            The main code body of the class.
            It's separate from the intro, to allow optional check if the file changed.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.Generate.CodeFileRaw.IntroComment">
      <summary>
            Intro comment to add to the top of the file.
            It always changes a bit, as it has a time stamp and version number.
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Code.Internal.Generate.CodeFragment">
      <summary>
            Temporary object to hold the generated code and usings,
            so that the caller can later merge all required usings.
            </summary>
      <param name="code"></param>
      <param name="usings"></param>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.Generate.CodeFragment.#ctor(System.String,System.String,System.Boolean,System.Collections.Generic.List{System.String},System.String)">
      <summary>
            Temporary object to hold the generated code and usings,
            so that the caller can later merge all required usings.
            </summary>
      <param name="code"></param>
      <param name="usings"></param>
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.Generate.CodeGenSpecs.DataNamespace">
      <summary>
            Namespace for the data classes
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.Generate.CodeGenSpecs.DataNamespaceGenerated">
      <summary>
            Namespace for the data classes
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.Generate.CodeGenSpecs.DataClassGeneratedSuffix">
      <summary>
            This is added to the end of the class name to indicate that it was auto-generated.
            It's quite verbose, to ensure that it's unlikely to clash with a real class name.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.Generate.CodeGenSpecs.DataInherits">
      <summary>
            Default class to inherit from - ATM CustomItem only
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.Generate.CodeGenSpecs.Edition">
      <summary>
            The edition of the generated code
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.Generate.CodeGenSpecs.FileGeneratedSuffix">
      <summary>
            This is added to the end of a file name to indicate that it was auto-generated.
            It's shorter for practical reasons, and should start with a dot and a letter &gt; "c"
            so that in the list of files it will be after the ".cs" file which may be created.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.Generate.CodeGenSpecs.TabSize">
      <summary>
            Tab size for the generated code
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.Generate.CodeGenSpecs.TabsNamespace">
      <summary>
            Tabs in front of namespace code
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.Generate.CodeGenSpecs.TabsClass">
      <summary>
            Tabs in front of class code
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.Generate.CodeGenSpecs.TabsProperty">
      <summary>
            Tabs in front of property code
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Code.Internal.Generate.DataClassesGenerator">
      <summary>
            Experimental
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.Generate.DataClassesGenerator.#ctor(ToSic.Eav.Context.ISite,ToSic.Eav.Context.IUser,ToSic.Eav.Apps.IAppStates,ToSic.Eav.Apps.Integration.IAppPathsMicroSvc)">
      <summary>
            Experimental
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.Generate.GeneratePropertyEmpty.Generate(ToSic.Sxc.Code.Internal.Generate.CodeGenSpecs,ToSic.Eav.Data.IContentTypeAttribute,System.Int32)">
      <summary>
            Empty is - empty - so we don't generate anything
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.HotBuild.AppCodeCompiler.GetAppCodeDllName(System.String,ToSic.Sxc.Code.Internal.HotBuild.HotBuildSpec)">
      <summary>
            Generates a random name for a dll file and ensures it does not already exist in the "2sxc.bin" folder.
            </summary>
      <returns>The generated random name.</returns>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.HotBuild.AppCodeCompiler.GetDependencyDllName(System.String,System.String,ToSic.Sxc.Code.Internal.HotBuild.HotBuildSpec)">
      <summary>
            Generates a random name for a dll file and ensures it does not already exist in the "2sxc.bin" folder.
            </summary>
      <returns>The generated random name.</returns>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.HotBuild.AppCodeCompiler.NormalizeFullPath(System.String)">
      <summary>
            Normalize full file or folder path, so it is without redirections like "../" in "dir1/dir2/../file.cs"
            </summary>
      <param name="fullPath"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.HotBuild.AppCodeLoader.GetAppCode(ToSic.Sxc.Code.Internal.HotBuild.HotBuildSpec)">
      <summary>
            Try to get the app code - first of the edition, then of the root.
            </summary>
      <param name="spec"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.HotBuild.AppCodeLoader.GetOrBuildAppCode(ToSic.Sxc.Code.Internal.HotBuild.HotBuildSpec)">
      <summary>
            AppCode - get from cache or build - if there is any code to build.
            Will throw exceptions if compile fails, but not if there is no code to compile.
            </summary>
      <param name="spec"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.HotBuild.AppCodeLoader.TryBuildAppCodeAndLog(ToSic.Sxc.Code.Internal.HotBuild.HotBuildSpec)">
      <summary>
            Get the AppCode assembly, or throw an exception if it can't be found or compiled.
            It can also return null, if there is no code to compile.
            </summary>
      <param name="spec"></param>
      <returns></returns>
    </member>
    <member name="T:ToSic.Sxc.Code.Internal.HotBuild.AssemblyResolver">
      <summary>
            Special SINGLETON service to resolve assemblies.
            The purpose is to ensure .net can access assemblies which are compiled at runtime.
            </summary>
      <remarks>
            This is a singleton!
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.HotBuild.AssemblyResult.MainType">
      <summary>
            The main type of this assembly - typically for Razor files which usually just publish a single type.
            This is to speed up performance, so the user of it doesn't need to find it again. 
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.HotBuild.AssemblyResult.WatcherFolders">
      <summary>
            The list of folders which must be watched for changes when using this assembly.
            ATM just used for AppCode assemblies, should maybe be in an inheriting class...
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.HotBuild.AssemblyResult.HasAssembly">
      <summary>
            True if an assembly was created without compile errors.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.HotBuild.CodeCompiler.CheckIfPathsOkAndCleanUp(System.String@,System.String)">
      <summary>
            Check the path and perform various corrections
            </summary>
      <param name="virtualPath">primary path to use</param>
      <param name="relativePath">optional second path to which the primary one would be attached to</param>
      <returns>null if all is ok, or an error message if not</returns>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.HotBuild.HotBuildSpec.ToString">
      <summary>
            Override ToString for better debugging
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.HotBuild.HotBuildSpec.ToDictionary">
      <summary>
            Create a dictionary of the specs for logging
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Code.Internal.HotBuild.ImplicitUsings.ForRazor">
      <summary>
             Usings which are implicitly added to all generated code files.
             It's important that they are the same in Dnn and Oqtane, and that it's not too much,
             because that ensures that the code created by others has to mention their usings explicitly.
            
             Otherwise, if we once shrink this list, then all code created by others could break.
             </summary>
    </member>
    <member name="T:ToSic.Sxc.Code.Internal.ICompatibilityLevel">
      <summary>
            Carries information about what compatibility level to use. Important for components that have an older and newer API.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.ICompatibilityLevel.CompatibilityLevel">
      <summary>
            The compatibility level to use. 
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Code.Internal.ICreateInstance">
      <summary>
            Marks objects - usually DynamicCode - which can create instances of other C# files. <br />
            A special feature is that it must store a reference to the path it's in (provided by the compiler that created this instance).
            This is important, so that CreateInstance knows what path to start in. 
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.ICreateInstance.CreateInstance(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.String,System.Boolean)">
      <summary>
            Create an instance of code lying in a file near this
            </summary>
      <param name="virtualPath">path to the other code file to compile</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="name">Override the class name to compile - usually not required as it should match the file name</param>
      <param name="relativePath">optional relative path, will usually use the <see cref="P:ToSic.Sxc.Code.Internal.IGetCodePath.CreateInstancePath" /></param>
      <param name="throwOnError">throw errors if compiling fails, recommended</param>
      <returns>An object of the class in the file</returns>
      <remarks>
            Note that the C# code which we are creating inherits from a standard base class such as <see cref="T:Custom.Hybrid.Code12" /> or <see cref="T:ToSic.Sxc.Code.DynamicCode" />
            then it will automatically be initialized to support App, AsDynamic etc.
            </remarks>
    </member>
    <member name="T:ToSic.Sxc.Code.Internal.IDynamicCode12">
      <summary>
            Interface for Dynamic Code with enhancements after v12. It extends <see cref="T:ToSic.Sxc.Code.IDynamicCode" />
            
            Dynamic Code is the API for files like Razor or WebApis.
            Supports many properties like App, etc. to ensure that the dynamic code has everything you need. <br />
            Also provides many Conversions between <see cref="T:ToSic.Eav.Data.IEntity" /> and <see cref="T:ToSic.Sxc.Data.IDynamicEntity" />.
            Important for dynamic code files like Razor or WebApi. Note that there are many overloads to ensure that AsDynamic and AsEntity "just work" even if you give them the original data.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.IDynamicCode12.GetService``1">
      <inheritdoc cref="M:ToSic.Eav.Code.ICanGetService.GetService``1" />
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.IDynamicCode12.App">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.App" />
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.IDynamicCode12.Data">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.Data" />
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.IDynamicCode12.Content">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.Content" />
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.IDynamicCode12.Header">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.Header" />
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.IDynamicCode12.AsAdam(ToSic.Eav.Data.ICanBeEntity,System.String)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.AsAdam(ToSic.Eav.Data.ICanBeEntity,System.String)" />
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.IDynamicCode12.Link">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.Link" />
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.IDynamicCode12.Edit">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.Edit" />
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.IDynamicCode12.AsDynamic(System.String,System.String)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.AsDynamic(System.String,System.String)" />
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.IDynamicCode12.AsDynamic(ToSic.Eav.Data.IEntity)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.AsDynamic(ToSic.Eav.Data.IEntity)" />
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.IDynamicCode12.AsDynamic(System.Object)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.AsDynamic(System.Object)" />
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.IDynamicCode12.AsEntity(System.Object)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.AsEntity(System.Object)" />
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.IDynamicCode12.AsList(System.Object)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.AsList(System.Object)" />
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.IDynamicCode12.CreateSource``1(ToSic.Eav.DataSource.IDataStream)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.CreateSource``1(ToSic.Eav.DataSource.IDataStream)" />
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.IDynamicCode12.CreateSource``1(ToSic.Eav.DataSource.IDataSource,ToSic.Eav.LookUp.ILookUpEngine)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.CreateSource``1(ToSic.Eav.DataSource.IDataSource,ToSic.Eav.LookUp.ILookUpEngine)" />
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.IDynamicCode12.CmsContext">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.CmsContext" />
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.IDynamicCode12.AsDynamic(System.Object[])">
      <summary>
            Convert one or many Entities and Dynamic entities into an <see cref="T:ToSic.Sxc.Data.IDynamicStack" /></summary>
      <param name="entities">one or more source object</param>
      <returns>a dynamic object for easier coding</returns>
      <remarks>
            New in 12.05
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.IDynamicCode12.Convert">
      <summary>
            Conversion helper for common data conversions in Razor and WebAPIs
            </summary>
      <remarks>
            Added in 2sxc 12.05
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.IDynamicCode12.Resources">
      <summary>
             Resources for this Scenario. This is a dynamic object based on the <see cref="T:ToSic.Sxc.Data.IDynamicStack" />.
            
             It will combine both the Resources of the View and the App. The View-Resources will have priority. In future it may also include some global Resources. 
             
             ðŸª’ Use in Razor: `@Resources.CtaButtonLabel`
             </summary>
      <remarks>New in 12.03</remarks>
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.IDynamicCode12.Settings">
      <summary>
            Settings for this Scenario. This is a dynamic object based on the <see cref="T:ToSic.Sxc.Data.IDynamicStack" />.
            
            It will combine both the Settings of the View and the App. The View-Settings will have priority. In future it may also include some global Settings. 
            
            ðŸª’ Use in Razor: `@Settings.ItemsPerRow`
            </summary>
      <remarks>New in 12.03</remarks>
    </member>
    <member name="T:ToSic.Sxc.Code.Internal.IDynamicCode14`2">
      <summary>
            Interface for Dynamic Code with enhancements after v12. It extends <see cref="T:ToSic.Sxc.Code.IDynamicCode" />
            
            Dynamic Code is the API for files like Razor or WebApis.
            Supports many properties like App, etc. to ensure that the dynamic code has everything you need. <br />
            Also provides many Conversions between <see cref="T:ToSic.Eav.Data.IEntity" /> and <see cref="T:ToSic.Sxc.Data.IDynamicEntity" />.
            Important for dynamic code files like Razor or WebApi. Note that there are many overloads to ensure that AsDynamic and AsEntity "just work" even if you give them the original data.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.IDynamicCode14`2.GetService``1">
      <inheritdoc cref="M:ToSic.Eav.Code.ICanGetService.GetService``1" />
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.IDynamicCode14`2.App">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.App" />
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.IDynamicCode14`2.Data">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.Data" />
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.IDynamicCode14`2.Content">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.Content" />
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.IDynamicCode14`2.Header">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.Header" />
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.IDynamicCode14`2.AsAdam(ToSic.Eav.Data.ICanBeEntity,System.String)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.AsAdam(ToSic.Eav.Data.ICanBeEntity,System.String)" />
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.IDynamicCode14`2.Link">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.Link" />
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.IDynamicCode14`2.Edit">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.Edit" />
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.IDynamicCode14`2.AsDynamic(System.String,System.String)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.AsDynamic(System.String,System.String)" />
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.IDynamicCode14`2.AsDynamic(ToSic.Eav.Data.IEntity)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.AsDynamic(ToSic.Eav.Data.IEntity)" />
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.IDynamicCode14`2.AsDynamic(System.Object)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.AsDynamic(System.Object)" />
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.IDynamicCode14`2.AsEntity(System.Object)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.AsEntity(System.Object)" />
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.IDynamicCode14`2.AsList(System.Object)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.AsList(System.Object)" />
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.IDynamicCode14`2.CreateSource``1(ToSic.Eav.DataSource.IDataStream)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.CreateSource``1(ToSic.Eav.DataSource.IDataStream)" />
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.IDynamicCode14`2.CreateSource``1(ToSic.Eav.DataSource.IDataSource,ToSic.Eav.LookUp.ILookUpEngine)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.CreateSource``1(ToSic.Eav.DataSource.IDataSource,ToSic.Eav.LookUp.ILookUpEngine)" />
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.IDynamicCode14`2.CmsContext">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.CmsContext" />
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.IDynamicCode14`2.AsDynamic(System.Object[])">
      <inheritdoc cref="M:ToSic.Sxc.Code.Internal.IDynamicCode12.AsDynamic(System.Object[])" />
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.IDynamicCode14`2.Resources">
      <inheritdoc cref="P:ToSic.Sxc.Code.Internal.IDynamicCode12.Resources" />
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.IDynamicCode14`2.Settings">
      <inheritdoc cref="P:ToSic.Sxc.Code.Internal.IDynamicCode12.Settings" />
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.IDynamicCode14`2.GetCode(System.String,ToSic.Lib.Coding.NoParamOrder,System.String)">
      <inheritdoc cref="M:ToSic.Sxc.Code.Internal.IDynamicCode16.GetCode(System.String,ToSic.Lib.Coding.NoParamOrder,System.String)" />
    </member>
    <member name="T:ToSic.Sxc.Code.Internal.IDynamicCode16">
      <summary>
            Standard interface for all TypedCode such as RazorPro or WebApiPro.
            Provides typed APIs to access Settings, Resources and more.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.IDynamicCode16.GetService``1">
      <inheritdoc cref="M:ToSic.Eav.Code.ICanGetService.GetService``1" />
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.IDynamicCode16.Link">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.Link" />
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.IDynamicCode16.MyContext">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.CmsContext" />
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.IDynamicCode16.MyPage">
      <inheritdoc cref="P:ToSic.Sxc.Context.ICmsContext.Page" />
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.IDynamicCode16.MyUser">
      <inheritdoc cref="P:ToSic.Sxc.Context.ICmsContext.User" />
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.IDynamicCode16.MyView">
      <inheritdoc cref="P:ToSic.Sxc.Context.ICmsContext.View" />
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.IDynamicCode16.UniqueKey">
      <inheritdoc cref="P:ToSic.Sxc.Services.IKeyService.UniqueKey" />
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.IDynamicCode16.App">
      <summary>
            The current App object (with strictly typed Settings/Resources).
            Use it to access App properties such as `Path` or any data in the App.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.IDynamicCode16.AllResources">
      <summary>
             Stack of all Resources in the System, merging Resources of View, App, Site, Global etc.
             Will retrieve values by priority, with View-Resources being top priority and Preset-Resources being the lowest.
            
             &gt; [!TIP]
             &gt; If you know that Resources come from the App, you should prefer `App.Resources` instead.
             &gt; That is faster and helps people reading your code figure out where to change a value.
             </summary>
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.IDynamicCode16.AllSettings">
      <summary>
             Stack of all Settings in the System, merging Settings of View, App, Site, Global etc.
             Will retrieve values by priority, with View-Settings being top priority and Preset-Settings being the lowest.
            
             &gt; [!TIP]
             &gt; If you know that Settings come from the App, you should prefer `App.Settings` instead.
             &gt; That is faster and helps people reading your code figure out where to change a value.
             </summary>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.IDynamicCode16.AsItem(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
      <summary>
            Convert something to a <see cref="T:ToSic.Sxc.Data.ITypedItem" />.
            This works for all kinds of <see cref="T:ToSic.Eav.Data.IEntity" />s,
            <see cref="T:ToSic.Sxc.Data.IDynamicEntity" />s as well as Lists/IEnumerables of those.
            
            Will always return a single item.
            If a list is provided, it will return the first item in the list.
            If null was provided, it will return null.
            </summary>
      <param name="data">An original object which can be converted to a TypedItem, such as a <see cref="T:ToSic.Eav.Data.IEntity" /> .</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="propsRequired">make the resulting object <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">strict</a>, default `true`</param>
      <param name="mock">Specify that the data is fake/mock data, which should pretend to be an Item. Default is `false`</param>
      <returns></returns>
      <remarks>New in v16.02</remarks>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.IDynamicCode16.AsItems(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean})">
      <summary>
            Convert an object containing a list of Entities or similar to a list of <see cref="T:ToSic.Sxc.Data.ITypedItem" />s.
            </summary>
      <param name="list">The original list which is usually a list of <see cref="T:ToSic.Eav.Data.IEntity" /> objects.</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="propsRequired">make the resulting object <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">strict</a>, default `true`</param>
      <returns></returns>
      <remarks>New in v16.01</remarks>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.IDynamicCode16.AsEntity(ToSic.Eav.Data.ICanBeEntity)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.AsEntity(System.Object)" />
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.IDynamicCode16.AsTyped(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean})">
      <summary>
            Creates a typed object to read the original passed into this function.
            This is usually used to process objects which the compiler can't know, such as anonymous objects returned from helper code etc.
            
            If you have an array of such objects, use <see cref="M:ToSic.Sxc.Code.Internal.IDynamicCode16.AsTypedList(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean})" />.
            </summary>
      <param name="data"></param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="propsRequired">make the resulting object <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">strict</a>, default `true`</param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.IDynamicCode16.AsTypedList(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean})">
      <summary>
            Create a list
            </summary>
      <param name="list">List/Enumerable object containing a bunch of items to make typed</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="propsRequired">make the resulting object <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">strict</a>, default `true`</param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.IDynamicCode16.AsStack(System.Object[])">
      <summary>
            Create a typed object which will provide all the properties of the things wrapped inside it.
            The priority is first-object first, so if multiple items have the property, the first in the list will be returned.
            </summary>
      <param name="items"></param>
      <returns></returns>
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.IDynamicCode16.MyItem">
      <summary>
             The main Item belonging to this Template/Module.
             This data is edited by the user directly on this specific module.
             In some cases it can also be a pre-set item configured in the View to be used if the user has not added any data himself.
            
             If this view can have a list of items (more than one) then this contains the first item.
             To get all the items, see <see cref="P:ToSic.Sxc.Code.Internal.IDynamicCode16.MyItems" /></summary>
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.IDynamicCode16.MyItems">
      <summary>
             List of all Items belonging to this Template/Module.
             This data is edited by the user directly on this specific module.
             In some cases it can also be a pre-set item configured in the View to be used if the user has not added any data himself.
            
             If this view is configured to only have one item, then this list will only contain one item.
             Otherwise it will have as many items as the editor added.
             </summary>
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.IDynamicCode16.MyHeader">
      <summary>
            The Header-Item belonging to this Template/Module.
            This data is edited by the user directly on this specific module.
            In some cases it can also be a pre-set item configured in the View to be used if the user has not added any data himself.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.IDynamicCode16.MyData">
      <summary>
             All the data which the current Template received, based on the View configuration.
             There are a few common scenarios:
            
             1. If it's a simple view, then this will just contain streams with the main Item(s) and Header
             1. If the view expects no data, it will just contain a `Default` stream containing no items
             1. If the view has a Query behind it, then MyData will have all the streams provided by the Query
             </summary>
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.IDynamicCode16.MyModel">
      <summary>
            Data passed to this Razor template by a caller.
            This is typical for Razor components which are re-used, and called from other Razor templates using `@Html.Partial("filename.cshtml", new { thing = 7 })`.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.IDynamicCode16.GetCode(System.String,ToSic.Lib.Coding.NoParamOrder,System.String)">
      <summary>
            Create an instance of a class in a `.cs` code file.
            Note that the class name in the file must match the file name, so `MyHelpers.cs` must have a `MyHelpers` class.
            </summary>
      <param name="path">The path, like `Helper.cs`, `./helper.cs`, `../../Helper.cs` or `/SomeFolderInApp/Helper.cs` (new 16.05)</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="className">Optional class name, if it doesn't match the file name (new 16.03)</param>
      <returns>, </returns>
      <remarks>
            * Created in 16.02
            * `className` added in 16.03
            * Ability to give a path beginning with `/` as app-root in 16.05
            
            In older code there was a similar `CreateInstance` method
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.IDynamicCode16.As``1(ToSic.Eav.Data.ICanBeEntity,ToSic.Lib.Coding.NoParamOrder,System.Boolean)">
      <summary>
            Convert an Entity or TypedItem into a strongly typed object.
            Typically, the type will be from your `AppCode.Data`.
            </summary>
      <typeparam name="T">the target type</typeparam>
      <param name="source">the source object - an `IEntity` or `ITypedItem`</param>
      <param name="protector">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="mock">if `true` will return a fake when `source` is `null` - otherwise a wrapper item with empty-contents</param>
      <returns></returns>
      <remarks>
            BETA in v17.03
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.IDynamicCode16.AsList``1(System.Collections.Generic.IEnumerable{ToSic.Eav.Data.ICanBeEntity},ToSic.Lib.Coding.NoParamOrder,System.Boolean)">
      <summary>
            Convert a list of Entities or TypedItems into a strongly typed list.
            Typically, the type will be from your `AppCode.Data`.
            </summary>
      <typeparam name="T">the target type</typeparam>
      <param name="source">the source object - a List/Enumerable of `IEntity` or `ITypedItem`</param>
      <param name="protector">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="nullIfNull">if `true` will return null when `source` is `null` - otherwise a wrapper item with empty-contents</param>
      <returns></returns>
      <remarks>
            BETA in v17.03
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.IGetCodePath.CreateInstancePath">
      <summary>
            Location of the current code. This is important when trying to create instances for
            other code in relative folders - as this is usually not known. 
            </summary>
      <returns>The real path to the currently executed code - important for dynamically compiled code like WebApis</returns>
    </member>
    <member name="P:ToSic.Sxc.Code.Internal.IHasKit`1.Kit">
      <summary>
            The Service Kit containing all kinds of services which are commonly used.
            The services on the Kit are context-aware, so they know what App is currently being used etc.
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Code.Internal.SourceCode.CodeFileInfo.CodeFileInfoTemplates">
      <summary>
            Template CodeFile objects for different types of files.
            They don't contain the source code, which would be added later if needed.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.SourceCode.CodeFileInfo.ToString">
      <summary>
            Override ToString for better debugging
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.SourceCode.CodeFileInfo.ToDictionary">
      <summary>
            Create a dictionary of the specs for logging
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.SourceCode.CodeFileInfoExtensions.IsHotBuildSupported(ToSic.Sxc.Code.Internal.SourceCode.CodeFileInfo)">
      <summary>
            AppCode is supported in RazorTyped and newer, and
            enabled when "using AppCode" is used
            </summary>
      <param name="razorType"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Code.Internal.SourceCode.SourceAnalyzer.ExtractBaseClass(System.String,System.String)">
      <summary>
            Extract 'className' base class from source code
            </summary>
      <param name="sourceCode"></param>
      <param name="className"></param>
      <returns></returns>
      <remarks>
            Code Complexity: This regex won't work well if the class declaration spans multiple lines or if there are comments between the class name and its base class.
            Generic Classes: If the base class uses generics, the regex needs to be adjusted to handle such cases.
            Multiple Inheritance: C# doesn't support multiple inheritance for classes. However, if interfaces are involved, this regex will only capture the first inherited type (which is usually the base class).
            Formatting: The regex assumes standard formatting.If there are unusual spacings or line breaks, it might not work correctly.
            Nested Classes: If the class is nested within another class, the regex will not match it.
            Comments and Strings: If the class declaration is commented out or appears within a string, the regex will still match it, which might not be desired.
            More robust solution can be done with Roslyn source pars, but additional packages can be needed.
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Code.CodeLog.Add(System.String,System.String,System.String,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Code.CodeLog.Warn(System.String,System.String,System.String,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Code.CodeLog.Call(System.String,System.String,System.Boolean,System.String,System.String,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Code.CodeLog.Call``1(System.String,System.String,System.Boolean,System.String,System.String,System.Int32)">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Code.CodeLog.Preserve">
      <inheritdoc />
    </member>
    <member name="T:ToSic.Sxc.Code.ICodeLog">
      <summary>
            A special logger for dynamic code (Razor, WebApi).
            It is always available to add messages to insights. 
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Code.ICodeLog">ðŸ“– ICodeLog</a></para></summary>
      <remarks>
            Added in v15, replaces the then removed `ILog` interface.
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Code.ICodeLog.Add(System.String,System.String,System.String,System.Int32)">
      <summary>
            Add a message log entry
            </summary>
      <param name="message">Message to log</param>
      <param name="cPath">auto pre filled by the compiler - the path to the code file</param>
      <param name="cName">auto pre filled by the compiler - the method name</param>
      <param name="cLine">auto pre filled by the compiler - the code line</param>
    </member>
    <member name="M:ToSic.Sxc.Code.ICodeLog.Warn(System.String,System.String,System.String,System.Int32)">
      <summary>
            Add a warning log entry
            </summary>
      <param name="message"></param>
      <param name="cPath">auto pre filled by the compiler - the path to the code file</param>
      <param name="cName">auto pre filled by the compiler - the method name</param>
      <param name="cLine">auto pre filled by the compiler - the code line</param>
    </member>
    <member name="M:ToSic.Sxc.Code.ICodeLog.Exception(System.Exception,System.String,System.String,System.Int32)">
      <summary>
            Add an exception as special log entry
            </summary>
      <param name="ex">The Exception object</param>
      <param name="cPath">auto pre filled by the compiler - the path to the code file</param>
      <param name="cName">auto pre filled by the compiler - the method name</param>
      <param name="cLine">auto pre filled by the compiler - the code line</param>
    </member>
    <member name="M:ToSic.Sxc.Code.ICodeLog.Call(System.String,System.String,System.Boolean,System.String,System.String,System.Int32)">
      <summary>
            Add a log entry for method call, returning a method to call when done
            </summary>
      <param name="parameters">what was passed to the call in the brackets</param>
      <param name="message">the message to log</param>
      <param name="useTimer">enable a timer from call/close</param>
      <param name="cPath">auto pre filled by the compiler - the path to the code file</param>
      <param name="cName">auto pre filled by the compiler - the method name</param>
      <param name="cLine">auto pre filled by the compiler - the code line</param>
    </member>
    <member name="M:ToSic.Sxc.Code.ICodeLog.Call``1(System.String,System.String,System.Boolean,System.String,System.String,System.Int32)">
      <summary>
            Add a log entry for method call, returning a method to call when done
            </summary>
      <param name="parameters">what was passed to the call in the brackets</param>
      <param name="message">the message to log</param>
      <param name="useTimer">enable a timer from call/close</param>
      <param name="cPath">auto pre filled by the compiler - the path to the code file</param>
      <param name="cName">auto pre filled by the compiler - the method name</param>
      <param name="cLine">auto pre filled by the compiler - the code line</param>
      <remarks>
            Not used much, but major change in V15 - the first value in the result is the data, the second is the string to log.
            Before in the `ILog` it was (message, data), new is (data, message)
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Code.ICodeLog.Preserve">
      <summary>
             Determines if this log should be preserved in the short term.
             Like for live-analytics / live-insights.
             Default is true.
            
             In scenarios like search-indexing it will default to false.
             You can then do `Log.Preserve = true;` to temporarily activate it while debugging.
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Code.ICodeLog.Preserve">ðŸ“– Preserve</a></para></summary>
    </member>
    <member name="T:ToSic.Sxc.Code.IHasCodeLog">
      <summary>
            Marks all Razor / WebAPI classes which provide logging functionality
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Code.IHasCodeLog">ðŸ“– IHasCodeLog</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Code.IHasCodeLog.Log">
      <summary>
            The logger for the current Razor / WebApi which allows you to add logs to Insights.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Code.IHasCodeLog.Log">ðŸ“– Log</a></para></summary>
    </member>
    <member name="T:ToSic.Sxc.Code.DynamicCode">
      <summary>
             This is a base class for dynamic code which is compiled at runtime.
            
             &gt; [!TIP]
             &gt; This is an old base class and works, but you should use a newer one such as <see cref="T:Custom.Hybrid.CodeTyped" /><para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Code.DynamicCode">ðŸ“– DynamicCode</a></para></summary>
    </member>
    <member name="M:ToSic.Sxc.Code.DynamicCode.#ctor">
      <summary>
            Main constructor, to enable easy inheriting in custom code.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Code.DynamicCode.Log">
      <inheritdoc cref="P:ToSic.Sxc.Code.IHasCodeLog.Log" />
    </member>
    <member name="M:ToSic.Sxc.Code.DynamicCode.GetService``1">
      <inheritdoc cref="M:ToSic.Eav.Code.ICanGetService.GetService``1" />
    </member>
    <member name="P:ToSic.Sxc.Code.DynamicCode.App">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.App" />
    </member>
    <member name="P:ToSic.Sxc.Code.DynamicCode.Data">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.Data" />
    </member>
    <member name="P:ToSic.Sxc.Code.DynamicCode.Content">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.Content" />
    </member>
    <member name="P:ToSic.Sxc.Code.DynamicCode.Header">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.Header" />
    </member>
    <member name="P:ToSic.Sxc.Code.DynamicCode.Link">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.Link" />
    </member>
    <member name="P:ToSic.Sxc.Code.DynamicCode.Edit">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.Edit" />
    </member>
    <member name="P:ToSic.Sxc.Code.DynamicCode.ToSic#Sxc#Code#Internal#IGetCodePath#CreateInstancePath">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Code.DynamicCode.CreateInstance(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.String,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Code.DynamicCode.CmsContext">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.CmsContext" />
    </member>
    <member name="M:ToSic.Sxc.Code.DynamicCode.AsDynamic(System.String,System.String)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Code.DynamicCode.AsDynamic(ToSic.Eav.Data.IEntity)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Code.DynamicCode.AsDynamic(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Code.DynamicCode.AsDynamic(System.Object[])">
      <inheritdoc cref="M:ToSic.Sxc.Code.Internal.IDynamicCode12.AsDynamic(System.Object[])" />
    </member>
    <member name="M:ToSic.Sxc.Code.DynamicCode.AsEntity(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Code.DynamicCode.AsList(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Code.DynamicCode.CreateSource``1(ToSic.Eav.DataSource.IDataStream)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Code.DynamicCode.CreateSource``1(ToSic.Eav.DataSource.IDataSource,ToSic.Eav.LookUp.ILookUpEngine)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Code.DynamicCode.AsAdam(ToSic.Eav.Data.ICanBeEntity,System.String)">
      <inheritdoc />
    </member>
    <member name="T:ToSic.Sxc.Code.DynamicCode12">
      <summary>
             Base class for v12 Dynamic Code
             Adds new properties and methods, and doesn't keep old / legacy APIs
            
             &gt; [!TIP]
             &gt; This is an old base class and works, but you should use a newer one such as <see cref="T:Custom.Hybrid.CodeTyped" /><para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Code.DynamicCode12">ðŸ“– DynamicCode12</a></para></summary>
    </member>
    <member name="M:ToSic.Sxc.Code.DynamicCode12.#ctor">
      <summary>
            Main constructor. May never have parameters, otherwise inheriting code will run into problems. 
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Code.DynamicCode12.Log">
      <inheritdoc cref="P:ToSic.Sxc.Code.IHasCodeLog.Log" />
    </member>
    <member name="M:ToSic.Sxc.Code.DynamicCode12.GetService``1">
      <inheritdoc cref="M:ToSic.Eav.Code.ICanGetService.GetService``1" />
    </member>
    <member name="P:ToSic.Sxc.Code.DynamicCode12.Convert">
      <inheritdoc cref="P:ToSic.Sxc.Code.Internal.IDynamicCode12.Convert" />
    </member>
    <member name="P:ToSic.Sxc.Code.DynamicCode12.Resources">
      <inheritdoc cref="P:ToSic.Sxc.Code.Internal.IDynamicCode12.Resources" />
    </member>
    <member name="P:ToSic.Sxc.Code.DynamicCode12.Settings">
      <inheritdoc cref="P:ToSic.Sxc.Code.Internal.IDynamicCode12.Settings" />
    </member>
    <member name="P:ToSic.Sxc.Code.DynamicCode12.App">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.App" />
    </member>
    <member name="P:ToSic.Sxc.Code.DynamicCode12.Data">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.Data" />
    </member>
    <member name="P:ToSic.Sxc.Code.DynamicCode12.Content">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.Content" />
    </member>
    <member name="P:ToSic.Sxc.Code.DynamicCode12.Header">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.Header" />
    </member>
    <member name="P:ToSic.Sxc.Code.DynamicCode12.Link">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.Link" />
    </member>
    <member name="P:ToSic.Sxc.Code.DynamicCode12.Edit">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.Edit" />
    </member>
    <member name="P:ToSic.Sxc.Code.DynamicCode12.ToSic#Sxc#Code#Internal#IGetCodePath#CreateInstancePath">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Code.DynamicCode12.CreateInstance(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.String,System.Boolean)">
      <inheritdoc cref="!:IDynamicCode.CreateInstance(string, NoParamOrder, string, string, bool)" />
    </member>
    <member name="P:ToSic.Sxc.Code.DynamicCode12.CmsContext">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.CmsContext" />
    </member>
    <member name="M:ToSic.Sxc.Code.DynamicCode12.AsDynamic(System.String,System.String)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.AsDynamic(System.String,System.String)" />
    </member>
    <member name="M:ToSic.Sxc.Code.DynamicCode12.AsDynamic(ToSic.Eav.Data.IEntity)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.AsDynamic(ToSic.Eav.Data.IEntity)" />
    </member>
    <member name="M:ToSic.Sxc.Code.DynamicCode12.AsDynamic(System.Object)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.AsDynamic(System.Object)" />
    </member>
    <member name="M:ToSic.Sxc.Code.DynamicCode12.AsDynamic(System.Object[])">
      <inheritdoc cref="M:ToSic.Sxc.Code.Internal.IDynamicCode12.AsDynamic(System.Object[])" />
    </member>
    <member name="M:ToSic.Sxc.Code.DynamicCode12.AsEntity(System.Object)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.AsEntity(System.Object)" />
    </member>
    <member name="M:ToSic.Sxc.Code.DynamicCode12.AsList(System.Object)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.AsList(System.Object)" />
    </member>
    <member name="M:ToSic.Sxc.Code.DynamicCode12.CreateSource``1(ToSic.Eav.DataSource.IDataStream)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.CreateSource``1(ToSic.Eav.DataSource.IDataStream)" />
    </member>
    <member name="M:ToSic.Sxc.Code.DynamicCode12.CreateSource``1(ToSic.Eav.DataSource.IDataSource,ToSic.Eav.LookUp.ILookUpEngine)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.CreateSource``1(ToSic.Eav.DataSource.IDataSource,ToSic.Eav.LookUp.ILookUpEngine)" />
    </member>
    <member name="M:ToSic.Sxc.Code.DynamicCode12.AsAdam(ToSic.Eav.Data.ICanBeEntity,System.String)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.AsAdam(ToSic.Eav.Data.ICanBeEntity,System.String)" />
    </member>
    <member name="T:ToSic.Sxc.Code.IDynamicCode">
      <summary>
            Dynamic code files like Razor or WebApis.
            Supports many properties like App, etc. to ensure that the dynamic code has everything you need. <br />
            Also provides many Conversions between <see cref="T:ToSic.Eav.Data.IEntity" /> and <see cref="T:ToSic.Sxc.Data.IDynamicEntity" />.
            Important for dynamic code files like Razor or WebApi. Note that there are many overloads to ensure that AsDynamic and AsEntity "just work" even if you give them the original data. 
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Code.IDynamicCode">ðŸ“– IDynamicCode</a></para></summary>
    </member>
    <member name="M:ToSic.Sxc.Code.IDynamicCode.GetService``1">
      <inheritdoc cref="M:ToSic.Eav.Code.ICanGetService.GetService``1" />
    </member>
    <member name="P:ToSic.Sxc.Code.IDynamicCode.App">
      <summary>
            A fully prepared <see cref="T:ToSic.Sxc.Apps.IApp" /> object letting you access all the data and queries in the current app. 
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Code.IDynamicCode.App">ðŸ“– App</a></para></summary>
      <returns>The current app</returns>
    </member>
    <member name="P:ToSic.Sxc.Code.IDynamicCode.Data">
      <summary>
            The data prepared for the current Code. Usually user data which was manually added to the instance, but can also be a query.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Code.IDynamicCode.Data">ðŸ“– Data</a></para></summary>
      <returns>
            An <see cref="T:ToSic.Sxc.DataSources.IBlockInstance" /> which is as <see cref="T:ToSic.Eav.DataSource.IDataSource" />.</returns>
    </member>
    <member name="P:ToSic.Sxc.Code.IDynamicCode.Content">
      <summary>
            The content object of the current razor view - IF the current view has content.
            If the view is a list, it will return the first item. 
            Will be null otherwise.
            To tell if it's the demo/default item, use <see cref="P:ToSic.Sxc.Data.IDynamicEntity.IsDemoItem" />.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Code.IDynamicCode.Content">ðŸ“– Content</a></para></summary>
      <returns>A <see cref="T:ToSic.Sxc.Data.IDynamicEntity" /> object with the current content - or null.</returns>
    </member>
    <member name="P:ToSic.Sxc.Code.IDynamicCode.Header">
      <summary>
            The header object of the current razor view, if it's a list and has a header object.
            If it's a list and doesn't have a header (and no default), it will return null.
            To tell if it's the demo/default item, use <see cref="P:ToSic.Sxc.Data.IDynamicEntity.IsDemoItem" />.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Code.IDynamicCode.Header">ðŸ“– Header</a></para></summary>
      <returns>A <see cref="T:ToSic.Sxc.Data.IDynamicEntity" /> object with the current content.</returns>
      <remarks>
            Introduced in 2sxc 10.10 - previously it was called ListContent, now deprecated.
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Code.IDynamicCode.AsAdam(ToSic.Eav.Data.ICanBeEntity,System.String)">
      <summary>
            Provides an Adam instance for this item and field
            </summary>
      <param name="item">The item - an IEntity, IDynamicEntity, ITypedItem etc. often Content or similar</param>
      <param name="fieldName">The field name, like "Gallery" or "Pics"</param>
      <returns>An Adam object for navigating the assets</returns>
    </member>
    <member name="P:ToSic.Sxc.Code.IDynamicCode.Link">
      <summary>
            Link helper object to create the correct links
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Code.IDynamicCode.Link">ðŸ“– Link</a></para></summary>
      <returns>
            A <see cref="T:ToSic.Sxc.Services.ILinkService" /> object.
            </returns>
    </member>
    <member name="P:ToSic.Sxc.Code.IDynamicCode.Edit">
      <summary>
            Helper commands to enable in-page editing functionality
            Use it to check if edit is enabled, generate context-json infos and provide toolbar buttons
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Code.IDynamicCode.Edit">ðŸ“– Edit</a></para></summary>
      <returns>
            An <see cref="T:ToSic.Sxc.Services.IEditService" /> object.
            </returns>
    </member>
    <member name="M:ToSic.Sxc.Code.IDynamicCode.AsDynamic(System.String,System.String)">
      <summary>
            Take a json and provide it as a dynamic object to the code
            </summary>
      <remarks>Added in 2sxc 10.22.00</remarks>
      <param name="json">the original json string</param>
      <param name="fallback">
            Alternate string to use, if the original json can't parse.
            Can also be null or the word "error" if you would prefer an error to be thrown.</param>
      <returns>A dynamic object representing the original json.
            If it can't be parsed, it will parse the fallback, which by default is an empty empty dynamic object.
            If you provide null for the fallback, then you will get null back.
            </returns>
    </member>
    <member name="M:ToSic.Sxc.Code.IDynamicCode.AsDynamic(ToSic.Eav.Data.IEntity)">
      <summary>
            Wraps an entity into a <see cref="T:ToSic.Sxc.Data.IDynamicEntity" /></summary>
      <param name="entity">the original object</param>
      <returns>a dynamic object for easier coding</returns>
    </member>
    <member name="M:ToSic.Sxc.Code.IDynamicCode.AsDynamic(System.Object)">
      <summary>
            Convert a dynamic entity and return itself again. This is so coders don't have to worry if the original object was an <see cref="T:ToSic.Eav.Data.IEntity" /> or a <see cref="T:ToSic.Sxc.Data.IDynamicEntity" /> in the first place. 
            </summary>
      <param name="dynamicEntity">the original object</param>
      <returns>a dynamic object for easier coding</returns>
    </member>
    <member name="M:ToSic.Sxc.Code.IDynamicCode.AsEntity(System.Object)">
      <summary>
            Unwraps a dynamic entity or <see cref="T:ToSic.Sxc.Data.ITypedItem" /> back into the underlying <see cref="T:ToSic.Eav.Data.IEntity" /></summary>
      <param name="dynamicEntity">the wrapped IEntity</param>
      <returns>A normal IEntity</returns>
    </member>
    <member name="M:ToSic.Sxc.Code.IDynamicCode.AsList(System.Object)">
      <summary>
            Converts a list of <see cref="T:ToSic.Eav.Data.IEntity" /> objects into a list of <see cref="T:ToSic.Sxc.Data.IDynamicEntity" /> objects. 
            </summary>
      <param name="list">typically a List/IEnumerable of Entities or DynamicEntities. <br />
            Can also be a <see cref="T:ToSic.Eav.DataSource.IDataSource" /> in which case it uses the default stream. </param>
      <remarks>Added in 2sxc 10.21.00</remarks>
      <returns>a list of <see cref="T:ToSic.Sxc.Data.IDynamicEntity" /> objects</returns>
    </member>
    <member name="M:ToSic.Sxc.Code.IDynamicCode.CreateSource``1(ToSic.Eav.DataSource.IDataStream)">
      <summary>
            Create a <see cref="T:ToSic.Eav.DataSource.IDataSource" /> which will process data from the given stream.
            </summary>
      <param name="source">The stream which will be the default In of the new data-source.</param>
      <typeparam name="T">A data-source type - must be inherited from IDataSource</typeparam>
      <returns>A typed DataSource object</returns>
    </member>
    <member name="M:ToSic.Sxc.Code.IDynamicCode.CreateSource``1(ToSic.Eav.DataSource.IDataSource,ToSic.Eav.LookUp.ILookUpEngine)">
      <summary>
            Create a <see cref="T:ToSic.Eav.DataSource.IDataSource" /> which will process data from the given stream.
            </summary>
      <param name="inSource">The data source which will be the default In of the new data-source.</param>
      <param name="configurationProvider">An alternate configuration provider for the DataSource</param>
      <typeparam name="T">A data-source type - must be inherited from IDataSource</typeparam>
      <returns>A typed DataSource object</returns>
    </member>
    <member name="P:ToSic.Sxc.Code.IDynamicCode.CmsContext">
      <summary>
             This Context tells you about the environment, such as
            
             * the current User
             * the Page
             * the View
             * the Site
             
             It's supposed to replace direct access to Dnn or Oqtane object in Razor and WebAPI code,
             allowing hybrid code that works everywhere.
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Code.IDynamicCode.CmsContext">ðŸ“– CmsContext</a></para></summary>
      <remarks>
             New in v11.11
             </remarks>
    </member>
    <member name="T:ToSic.Sxc.Code.ITypedModel">
      <summary>
             Object in partial Razor files to access parameters handed in.
             Example caller:
            
             ```c#
             @Html.Partial(someFile, new { blogPost, file = mainFile, title = "hello" }
             ```
            
             Example partial:
            
             ```c#
             var blogPost = MyModel.Item("BlogPost");
             var file = MyModel.File("File");
             var title = MyModel.String("Title");
             ```
            
             &gt; [!TIP]
             &gt; The common data types such as `string` or <see cref="T:ToSic.Sxc.Data.ITypedItem" /> have methods to quickly get them in the desired type.
             &gt; This allows things such as `var message = MyModel.String("Message");`
             &gt; For less common types you'll need to use <see cref="M:ToSic.Sxc.Code.ITypedModel.Get(System.String,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean})" /> and cast it as needed, like this:
             &gt; `string message = MyModel.Get("Message");`.
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Code.ITypedModel">ðŸ“– ITypedModel</a></para></summary>
      <remarks>Introduced in v16.02</remarks>
    </member>
    <member name="M:ToSic.Sxc.Code.ITypedModel.ContainsKey(System.String)">
      <inheritdoc cref="M:ToSic.Sxc.Data.Internal.IHasKeys.ContainsKey(System.String)" />
    </member>
    <member name="M:ToSic.Sxc.Code.ITypedModel.Keys(ToSic.Lib.Coding.NoParamOrder,System.Collections.Generic.IEnumerable{System.String})">
      <inheritdoc cref="M:ToSic.Sxc.Data.Internal.IHasKeys.Keys(ToSic.Lib.Coding.NoParamOrder,System.Collections.Generic.IEnumerable{System.String})" />
    </member>
    <member name="M:ToSic.Sxc.Code.ITypedModel.Get(System.String,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean})">
      <summary>
            Will get the value and return as object, since the type isn't known. 
            </summary>
      <param name="name">Property name on the passed in data object</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="required">throw error if `name` doesn't exist, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">NetCode.Conventions.PropertiesRequired</a></param>
      <returns>Object if found, `null` if not found.</returns>
    </member>
    <member name="M:ToSic.Sxc.Code.ITypedModel.Get``1(System.String,ToSic.Lib.Coding.NoParamOrder,``0,System.Nullable{System.Boolean})">
      <summary>
            Will get the value and return as type T as specified.
            </summary>
      <typeparam name="T">The returned type</typeparam>
      <param name="name">Property name on the passed in data object</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">The fallback value. If provided, the type is automatically determined.</param>
      <param name="required">
            Throw error if `name` doesn't exist, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">NetCode.Conventions.PropertiesRequired</a>.
            It is automatically `false` if a `fallback` is provided which is not the `default`.
            So eg. `Get&lt;string&gt;(..., fallback: false)` can't be detected, but `..., fallback: "hello"` can.
            </param>
      <returns>Object of type T if found, `null` if not found.</returns>
    </member>
    <member name="M:ToSic.Sxc.Code.ITypedModel.Code(System.String,ToSic.Lib.Coding.NoParamOrder,System.Object,System.Nullable{System.Boolean})">
      <summary>
            Get code forwarded to the current razor.
            Code was usually created in the caller using `GetCode(...)` and may need to be passed around.
            </summary>
      <param name="name">Property name on the passed in data object</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">A fallback to use if not found - not commonly used here.</param>
      <param name="required">
            Throw error if `name` doesn't exist, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">NetCode.Conventions.PropertiesRequired</a>.
            It is automatically `false` if a `fallback` is not `null`.
            </param>
      <returns>The resulting object is `dynamic` which is necessary for making calls to methods etc.</returns>
      <remarks>New in 16.05</remarks>
    </member>
    <member name="M:ToSic.Sxc.Code.ITypedModel.String(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.Nullable{System.Boolean})">
      <summary>
            Will get the value and return in the desired type.
            </summary>
      <param name="name">Property name on the passed in data object</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">The optional fallback value.</param>
      <param name="required">
            Throw error if `name` doesn't exist, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">NetCode.Conventions.PropertiesRequired</a>.
            It is automatically `false` if a `fallback` is not `null`.
            </param>
      <returns>typed result if found, `null` if not found.</returns>
    </member>
    <member name="M:ToSic.Sxc.Code.ITypedModel.Bool(System.String,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
      <summary>
            Will get the value and return in the desired type.
            </summary>
      <param name="name">Property name on the passed in data object</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">The optional fallback value.</param>
      <param name="required">
            Throw error if `name` doesn't exist, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">NetCode.Conventions.PropertiesRequired</a>.
            It is automatically `false` if a `fallback` is set / not `null`.
            </param>
      <returns>typed result if found, false if not found.</returns>
    </member>
    <member name="M:ToSic.Sxc.Code.ITypedModel.Guid(System.String,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Guid},System.Nullable{System.Boolean})">
      <summary>
            Will get the value and return in the desired type.
            </summary>
      <param name="name">Property name on the passed in data object</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">The optional fallback value.</param>
      <param name="required">
            Throw error if `name` doesn't exist, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">NetCode.Conventions.PropertiesRequired</a>.
            It is automatically `false` if a `fallback` is set / not `null`.
            </param>
      <returns>typed result if found, empty-guid if not found.</returns>
    </member>
    <member name="M:ToSic.Sxc.Code.ITypedModel.DateTime(System.String,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.DateTime},System.Nullable{System.Boolean})">
      <summary>
            Will get the value and return in the desired type.
            </summary>
      <param name="name">Property name on the passed in data object</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">The optional fallback value.</param>
      <param name="required">
            Throw error if `name` doesn't exist, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">NetCode.Conventions.PropertiesRequired</a>.
            It is automatically `false` if a `fallback` is set / not `null`.
            </param>
      <returns>typed result if found, default-date if not found.</returns>
    </member>
    <member name="M:ToSic.Sxc.Code.ITypedModel.Int(System.String,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
      <summary>
            Will get the value and return in the desired type.
            </summary>
      <param name="name">Property name on the passed in data object</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">The optional fallback value.</param>
      <param name="required">
            Throw error if `name` doesn't exist, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">NetCode.Conventions.PropertiesRequired</a>.
            It is automatically `false` if a `fallback` is not `null`.
            </param>
      <returns>int result if found, `0` if not found/convertible.</returns>
      <exception cref="T:System.ArgumentException">if the name is not found an no fallback provided and required not false</exception>
    </member>
    <member name="M:ToSic.Sxc.Code.ITypedModel.Float(System.String,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Single},System.Nullable{System.Boolean})">
      <summary>
            Will get the value and return in the desired type.
            </summary>
      <param name="name">Property name on the passed in data object</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">The optional fallback value.</param>
      <param name="required">
            Throw error if `name` doesn't exist, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">NetCode.Conventions.PropertiesRequired</a>.
            It is automatically `false` if a `fallback` is not `null`.
            </param>
      <returns>int result if found, `0` if not found/convertible.</returns>
      <exception cref="T:System.ArgumentException">if the name is not found an no fallback provided and required not false</exception>
    </member>
    <member name="M:ToSic.Sxc.Code.ITypedModel.Double(System.String,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Double},System.Nullable{System.Boolean})">
      <summary>
            Will get the value and return in the desired type.
            </summary>
      <param name="name">Property name on the passed in data object</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">The optional fallback value.</param>
      <param name="required">
            Throw error if `name` doesn't exist, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">NetCode.Conventions.PropertiesRequired</a>.
            It is automatically `false` if a `fallback` is not `null`.
            </param>
      <returns>int result if found, `0` if not found/convertible.</returns>
      <exception cref="T:System.ArgumentException">if the name is not found an no fallback provided and required not false</exception>
    </member>
    <member name="M:ToSic.Sxc.Code.ITypedModel.Decimal(System.String,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Decimal},System.Nullable{System.Boolean})">
      <summary>
            Will get the value and return in the desired type.
            </summary>
      <param name="name">Property name on the passed in data object</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">The optional fallback value.</param>
      <param name="required">
            Throw error if `name` doesn't exist, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">NetCode.Conventions.PropertiesRequired</a>.
            It is automatically `false` if a `fallback` is not `null`.
            </param>
      <returns>int result if found, `0` if not found/convertible.</returns>
      <exception cref="T:System.ArgumentException">if the name is not found an no fallback provided and required not false</exception>
    </member>
    <member name="M:ToSic.Sxc.Code.ITypedModel.File(System.String,ToSic.Lib.Coding.NoParamOrder,ToSic.Sxc.Adam.IFile,System.Nullable{System.Boolean})">
      <summary>
            Will get the value if specified.
            If the value is a list of files, then this will only return the first one.
            </summary>
      <param name="name">Property name on the passed in data object</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">The optional fallback value.</param>
      <param name="required">
            Throw error if `name` doesn't exist, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">NetCode.Conventions.PropertiesRequired</a>.
            It is automatically `false` if a `fallback` is set / not `null`.
            </param>
      <returns>typed result if found, `null` if not found.</returns>
    </member>
    <member name="M:ToSic.Sxc.Code.ITypedModel.Files(System.String,ToSic.Lib.Coding.NoParamOrder,System.Collections.Generic.IEnumerable{ToSic.Sxc.Adam.IFile},System.Nullable{System.Boolean})">
      <summary>
            Will get the value if specified.
            If the value is a single file, will return a list containing that file.
            </summary>
      <param name="name">Property name on the passed in data object</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">The optional fallback value.</param>
      <param name="required">
            Throw error if `name` doesn't exist, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">NetCode.Conventions.PropertiesRequired</a>.
            It is automatically `false` if a `fallback` is set / not `null`.
            </param>
      <returns>typed result if found, empty-list if not found.</returns>
    </member>
    <member name="M:ToSic.Sxc.Code.ITypedModel.Folder(System.String,ToSic.Lib.Coding.NoParamOrder,ToSic.Sxc.Adam.IFolder,System.Nullable{System.Boolean})">
      <summary>
            Will get the value if specified.
            If the value is a list of folders, then this will only return the first one.
            </summary>
      <param name="name">Property name on the passed in data object</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">The optional fallback value.</param>
      <param name="required">
            Throw error if `name` doesn't exist, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">NetCode.Conventions.PropertiesRequired</a>.
            It is automatically `false` if a `fallback` is set / not `null`.
            </param>
      <returns>typed result if found, `null` if not found.</returns>
    </member>
    <member name="M:ToSic.Sxc.Code.ITypedModel.Folders(System.String,ToSic.Lib.Coding.NoParamOrder,System.Collections.Generic.IEnumerable{ToSic.Sxc.Adam.IFolder},System.Nullable{System.Boolean})">
      <summary>
            Will get the value if specified.
            If the value is a single folder, will return a list containing that folder.
            </summary>
      <param name="name">Property name on the passed in data object</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">The optional fallback value.</param>
      <param name="required">
            Throw error if `name` doesn't exist, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">NetCode.Conventions.PropertiesRequired</a>.
            It is automatically `false` if a `fallback` is set / not `null`.
            </param>
      <returns>typed result if found, empty-list if not found.</returns>
    </member>
    <member name="M:ToSic.Sxc.Code.ITypedModel.Item(System.String,ToSic.Lib.Coding.NoParamOrder,ToSic.Sxc.Data.ITypedItem,System.Nullable{System.Boolean})">
      <summary>
            Will get the value if specified.
            If the value is a list of items, then this will only return the first one.
            </summary>
      <param name="name">Property name on the passed in data object</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">The optional fallback value.</param>
      <param name="required">
            Throw error if `name` doesn't exist, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">NetCode.Conventions.PropertiesRequired</a>.
            It is automatically `false` if a `fallback` is set / not `null`.
            </param>
      <returns>typed result if found, `null` if not found.</returns>
    </member>
    <member name="M:ToSic.Sxc.Code.ITypedModel.Items(System.String,ToSic.Lib.Coding.NoParamOrder,System.Collections.Generic.IEnumerable{ToSic.Sxc.Data.ITypedItem},System.Nullable{System.Boolean})">
      <summary>
            Will get the value if specified.
            If the value is a single item, will return a list containing that item.
            </summary>
      <param name="name">Property name on the passed in data object</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">The optional fallback value.</param>
      <param name="required">
            Throw error if `name` doesn't exist, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">NetCode.Conventions.PropertiesRequired</a>.
            It is automatically `false` if a `fallback` is set / not `null`.
            </param>
      <returns>typed result if found, empty-list if not found.</returns>
    </member>
    <member name="M:ToSic.Sxc.Code.ITypedModel.Toolbar(System.String,ToSic.Lib.Coding.NoParamOrder,ToSic.Sxc.Edit.Toolbar.IToolbarBuilder,System.Nullable{System.Boolean})">
      <summary>
            Will get the value being a toolbar as specified.
            </summary>
      <param name="name">Property name on the passed in data object</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">The optional fallback value.</param>
      <param name="required">
            Throw error if `name` doesn't exist, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">NetCode.Conventions.PropertiesRequired</a>.
            It is automatically `false` if a `fallback` is set / not `null`.
            </param>
      <returns>typed result if found, `null` if not found</returns>
    </member>
    <member name="M:ToSic.Sxc.Code.ITypedModel.HtmlTag(System.String,ToSic.Lib.Coding.NoParamOrder,ToSic.Razor.Blade.IHtmlTag,System.Nullable{System.Boolean})">
      <summary>
            Will get the value being an `IHtmlTag` as specified (RazorBlade objects)
            </summary>
      <param name="name">Property name on the passed in data object</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">The optional fallback value.</param>
      <param name="required">
            Throw error if `name` doesn't exist, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">NetCode.Conventions.PropertiesRequired</a>.
            It is automatically `false` if a `fallback` is not `null`.
            </param>
      <returns>typed result if found, `null` if not found</returns>
    </member>
    <member name="M:ToSic.Sxc.Code.ITypedModel.HtmlTags(System.String,ToSic.Lib.Coding.NoParamOrder,System.Collections.Generic.IEnumerable{ToSic.Razor.Blade.IHtmlTag},System.Nullable{System.Boolean})">
      <summary>
            Will get the value being an list (IEnumerable) of `IHtmlTag` as specified (RazorBlade objects)
            </summary>
      <param name="name">Property name on the passed in data object</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">The optional fallback value.</param>
      <param name="required">
            Throw error if `name` doesn't exist, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">NetCode.Conventions.PropertiesRequired</a>.
            It is automatically `false` if a `fallback` is not `null`.
            </param>
      <returns>typed result if found, `null` if not found</returns>
    </member>
    <member name="T:ToSic.Sxc.Code.TypedConverter">
      <summary>
            Helper to convert some unknown object into the possible result.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Code.TypedConverter">ðŸ“– TypedConverter</a></para></summary>
    </member>
    <member name="M:ToSic.Sxc.Code.TypedConverter.#ctor(ToSic.Sxc.Data.Internal.CodeDataFactory)">
      <summary>
            Helper to convert some unknown object into the possible result.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Code.TypedModel.GetInternal``1(System.String,ToSic.Lib.Coding.NoParamOrder,``0,System.Object,System.Nullable{System.Boolean},System.String)">
      <summary></summary>
      <typeparam name="T"></typeparam>
      <param name="name"></param>
      <param name="noParamOrder"></param>
      <param name="fallback"></param>
      <param name="fallbackAsObj">Untyped fallback, for special null-checks</param>
      <param name="required"></param>
      <param name="method"></param>
      <returns></returns>
    </member>
    <member name="T:ToSic.Sxc.Compatibility.Internal.IDynamicCodeBeforeV10">
      <summary>
            Old interface for the SexyContent Web Page
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Compatibility.Internal.IDynamicCodeBeforeV10.AsDynamic(ToSic.Eav.Interfaces.IEntity)">
      <summary>
            this is for compatibility with old systems, to ensure that things cast to IEntity in a razor can still be cast back
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Compatibility.Internal.IDynamicCodeBeforeV10.AsDynamic(System.Collections.Generic.KeyValuePair{System.Int32,ToSic.Eav.Data.IEntity})">
      <summary>
            Returns the value of a KeyValuePair as DynamicEntity
            </summary>
      <param name="entityKeyValuePair"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Compatibility.Internal.IDynamicCodeBeforeV10.AsDynamic(System.Collections.Generic.KeyValuePair{System.Int32,ToSic.Eav.Interfaces.IEntity})">
      <summary>
            this is for compatibility with old systems, to ensure that things cast to IEntity in a razor can still be cast back
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Compatibility.Internal.IDynamicCodeBeforeV10.AsDynamic(System.Collections.Generic.IEnumerable{ToSic.Eav.Interfaces.IEntity})">
      <summary>
            this is for compatibility with old systems, to ensure that things cast to IEntity in a razor can still be cast back
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Compatibility.Internal.IDynamicCodeBeforeV10.CreateSource(System.String,ToSic.Eav.DataSource.IDataSource,ToSic.Eav.LookUp.ILookUpEngine)">
      <summary>
            Create a <see cref="T:ToSic.Eav.DataSource.IDataSource" /> which will process data from the given stream.
            </summary>
      <returns>A typed DataSource object</returns>
    </member>
    <member name="F:ToSic.Sxc.Compatibility.Internal.InputTypes.InputTypeMap">
      <summary>
            This lists old, obsolete or never-used input types and what the new name should be
            It's used because historically and for future-features, some input-types have been defined
            like string-wysiwyg-tinymce, but they are actually the same as string-wysiwyg-default and
            to keep things streamlined, we don't want to clutter the system with additional type definitions
            even though they are the same.
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Configuration.Internal.SxcFeatures">
      <summary>
            Internal - built-in features.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsBlock.Id">
      <summary>
            The ID of this Block
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsBlock.Id">ðŸ“– Id</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsBlock.IsRoot">
      <summary>
            Determines if this is the root block.
            Will be true in most cases, but false on inner-content
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsBlock.IsRoot">ðŸ“– IsRoot</a></para></summary>
    </member>
    <member name="T:ToSic.Sxc.Context.ICmsContext">
      <summary>
             This is the runtime context of your code in the CMS. It can tell you about the site, page, module etc. that you're on.
             Note that it it _Platform Agnostic_ so it's the same on Dnn, Oqtane etc.
            
             ðŸª’ In <a href="https://go.2sxc.org/xref17?xref=Custom.Hybrid.Razor14">Dynamic Razor</a> it's found on `CmsContext`  
             ðŸª’ In <a href="https://go.2sxc.org/xref17?xref=Custom.Hybrid.RazorTyped">Typed Razor</a> it's found on `MyContext`, but many objects are directly available, eg. `MyPage`
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsContext">ðŸ“– ICmsContext</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsContext.Culture">
      <summary>
            Information about languages / culture of the current request
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsContext.Culture">ðŸ“– Culture</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsContext.Module">
      <summary>
            Information about the Module / Container which holds an 2sxc content block in the CMS
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsContext.Module">ðŸ“– Module</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsContext.Page">
      <summary>
            Information about the current Page (called Tab in DNN).
            It's especially useful to get current URL Parameters.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsContext.Page">ðŸ“– Page</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsContext.Platform">
      <summary>
            Information about the platform that's currently running.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsContext.Platform">ðŸ“– Platform</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsContext.Site">
      <summary>
            Information about the Site (called Portal in DNN)
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsContext.Site">ðŸ“– Site</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsContext.User">
      <summary>
            Information about the current user.
            It's especially useful to see if the user has any kind of Admin privileges.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsContext.User">ðŸ“– User</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsContext.View">
      <summary>
            View-information such as the view Name, Identity or Edition.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsContext.View">ðŸ“– View</a></para></summary>
      <remarks>New in v12.02</remarks>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsContext.Block">
      <summary>
             Information about the current block
            
             Not published yet, as it's not clear if it will be the correct block on inner-content?
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsContext.Block">ðŸ“– Block</a></para></summary>
    </member>
    <member name="T:ToSic.Sxc.Context.ICmsCulture">
      <summary>
            Information about the cultures/languages used.
            
            ðŸª’ In <a href="https://go.2sxc.org/xref17?xref=Custom.Hybrid.Razor14">Dynamic Razor</a> it's found on `CmsContext.Culture`  
            ðŸª’ In <a href="https://go.2sxc.org/xref17?xref=Custom.Hybrid.RazorTyped">Typed Razor</a> it's found on `MyContext.Culture`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsCulture">ðŸ“– ICmsCulture</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsCulture.DefaultCode">
      <summary>
            The default language code like "en-us" or "" (empty string).
            If the system is single-language, it will often just be an empty string "".
            
            ðŸª’ Use in Dynamic Razor: `CmsContext.Culture.DefaultCode`  
            ðŸª’ Use in Typed Razor: `MyContext.Culture.DefaultCode`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsCulture.DefaultCode">ðŸ“– DefaultCode</a></para></summary>
      <remarks>
            1. It's always lower-case.
            1. In the case of DNN, this corresponds to PortalSettings.DefaultCulture
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsCulture.CurrentCode">
      <summary>
            The current culture / language code like "de-ch". It's the language-code used by the translation environment. 
            
            ðŸª’ Use in Dynamic Razor: `CmsContext.Culture.CurrentCode`  
            ðŸª’ Use in Typed Razor: `MyContext.Culture.CurrentCode`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsCulture.CurrentCode">ðŸ“– CurrentCode</a></para></summary>
      <remarks>
            1. It's always lower-case.
            1. In the case of DNN, this corresponds to PortalSettings.CurrentAlias.CultureCode
            </remarks>
    </member>
    <member name="T:ToSic.Sxc.Context.ICmsModule">
      <summary>
            Information about the module context the code is running in.
            
            ðŸª’ In <a href="https://go.2sxc.org/xref17?xref=Custom.Hybrid.Razor14">Dynamic Razor</a> it's found on `CmsContext.Module`  
            ðŸª’ In <a href="https://go.2sxc.org/xref17?xref=Custom.Hybrid.RazorTyped">Typed Razor</a> it's found on `MyContext.Module`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsModule">ðŸ“– ICmsModule</a></para></summary>
      <remarks>
            Note that the module context is the module for which the code is currently running.
            In some scenarios (like Web-API scenarios) the code is running _for_ this module but _not on_ this module,
            as it would then be running on a WebApi.
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsModule.Id">
      <summary>
             The module id on the page. 
             
             ðŸª’ Use in Dynamic Razor: `CmsContext.Module.Id`  
             ðŸª’ Use in Typed Razor: `MyContext.Module.Id`
            
             &gt; [!TIP]
             &gt; This Module ID is often used to give DOM elements a unique name.
             &gt; For example: `id="my-app-wrapper-@CmsContext.Module.Id"`.
             &gt; But since v16.04 there is a new property `UniqueKey` which is better suited for this.
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsModule.Id">ðŸ“– Id</a></para></summary>
      <remarks>
             Corresponds to the Dnn ModuleId or the Oqtane Module Id.
             
             In some systems a module can be re-used on multiple pages, and possibly have different settings for re-used modules.
             2sxc doesn't use that, so the module id corresponds to the Dnn ModuleId and not the PageModuleId.  
             </remarks>
      <returns>The ID, unless unknown, in which case it's a negative number</returns>
    </member>
    <member name="T:ToSic.Sxc.Context.ICmsPage">
      <summary>
            Information about the page which is the context for the currently running code.
            
            ðŸª’ In <a href="https://go.2sxc.org/xref17?xref=Custom.Hybrid.Razor14">Dynamic Razor</a> it's found on `CmsContext.Page`  
            ðŸª’ In <a href="https://go.2sxc.org/xref17?xref=Custom.Hybrid.RazorTyped">Typed Razor</a> it's found on `MyPage`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsPage">ðŸ“– ICmsPage</a></para></summary>
      <remarks>
            Note that the module context is the module for which the code is currently running.
            In some scenarios (like Web-API scenarios) the code is running _for_ this page but _not on_ this page,
            as it would then be running on a WebApi.
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsPage.Id">
      <summary>
            The Id of the page.
            
            ðŸª’ Use in Dynamic Razor: `CmsContext.Page.Id`  
            ðŸª’ Use in Typed Razor: `MyPage.Id`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsPage.Id">ðŸ“– Id</a></para></summary>
      <remarks>
            Corresponds to the Dnn `TabId` or the Oqtane `Page.PageId`
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsPage.Parameters">
      <summary>
            The page parameters, cross-platform.
            Use this for easy access to url parameters like ?id=xyz
            with `CmsContext.Page.Parameters["id"]` as a replacement for `Request.QueryString["id"]`
            
            ðŸª’ Use in Dynamic Razor: `CmsContext.Page.Parameters`  
            ðŸª’ Use in Typed Razor: `MyPage.Parameters`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsPage.Parameters">ðŸ“– Parameters</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsPage.Url">
      <summary>
             The resource specific Url, like the one to this page or portal.
            
             ðŸª’ Use in Dynamic Razor: `CmsContext.Page.Url`  
             ðŸª’ Use in Typed Razor: `MyPage.Url`
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsPage.Url">ðŸ“– Url</a></para></summary>
      <remarks>
             Added ca. v12.
             </remarks>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsPage.Metadata">
      <summary>
            Metadata of the current page
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsPage.Metadata">ðŸ“– Metadata</a></para></summary>
      <remarks>
            Added in v13.12
            </remarks>
    </member>
    <member name="T:ToSic.Sxc.Context.ICmsPlatform">
      <summary>
            General platform information
            
            ðŸª’ In <a href="https://go.2sxc.org/xref17?xref=Custom.Hybrid.Razor14">Dynamic Razor</a> it's found on `CmsContext.Platform`  
            ðŸª’ In <a href="https://go.2sxc.org/xref17?xref=Custom.Hybrid.RazorTyped">Typed Razor</a> it's found on `MyContext.Platform`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsPlatform">ðŸ“– ICmsPlatform</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsPlatform.Type">
      <summary>
            The platform type Id from the enumerator - so stored as an int.
            
            ðŸª’ Use in Dynamic Razor: `CmsContext.Platform.Type`  
            ðŸª’ Use in Typed Razor: `MyContext.Platform.Type`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsPlatform.Type">ðŸ“– Type</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsPlatform.Name">
      <summary>
            A nice name ID, like "Dnn" or "Oqtane"
            
            ðŸª’ Use in Dynamic Razor: `CmsContext.Platform.Name`  
            ðŸª’ Use in Typed Razor: `MyContext.Platform.Name`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsPlatform.Name">ðŸ“– Name</a></para></summary>
      <remarks>
            Please be aware that platform names may change with time - like Dnn was once DotNetNuke
            So to safely ensure you are detecting the right platform you should focus on the Type attribute. 
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsPlatform.Version">
      <summary>
            The platform version
            
            ðŸª’ Use in Dynamic Razor: `CmsContext.Platform.Version`  
            ðŸª’ Use in Typed Razor: `MyContext.Platform.Version`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsPlatform.Version">ðŸ“– Version</a></para></summary>
      <remarks>Added in v13</remarks>
    </member>
    <member name="T:ToSic.Sxc.Context.ICmsSite">
      <summary>
            The site context of the code - so basically which website / portal it's running on. 
            
            ðŸª’ In <a href="https://go.2sxc.org/xref17?xref=Custom.Hybrid.Razor14">Dynamic Razor</a> it's found on `CmsContext.Site`  
            ðŸª’ In <a href="https://go.2sxc.org/xref17?xref=Custom.Hybrid.RazorTyped">Typed Razor</a> it's found on `MyContext.Site`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsSite">ðŸ“– ICmsSite</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsSite.Id">
      <summary>
            The Id of the site in systems like DNN and Oqtane.
            
            ðŸª’ Use in Dynamic Razor: `CmsContext.Site.Id`  
            ðŸª’ Use in Typed Razor: `MyContext.Site.Name`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsSite.Id">ðŸ“– Id</a></para></summary>
      <remarks>
            In DNN this is the same as the `PortalId`
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsSite.Url">
      <summary>
            The site url with protocol. Can be variation of any such examples:
            
            - https://website.org
            - https://www.website.org
            - https://website.org/products
            - https://website.org/en-us
            - https://website.org/products/en-us
            
            ðŸª’ Use in Dynamic Razor: `CmsContext.Site.Url`  
            ðŸª’ Use in Typed Razor: `MyContext.Site.Url`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsSite.Url">ðŸ“– Url</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsSite.UrlRoot">
      <summary>
            The url root which identifies the current site / portal as is. It does not contain a protocol, but can contain subfolders.
            This is mainly used to clearly identify a site in a multi-site system or a language-variation in a multi-language setup.
            
            ðŸª’ Use in Dynamic Razor: `CmsContext.Site.UrlRoot`  
            ðŸª’ Use in Typed Razor: `MyContext.Site.UrlRoot`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsSite.UrlRoot">ðŸ“– UrlRoot</a></para></summary>
      <remarks>
            introduced in 2sxc 13
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsSite.Metadata">
      <summary>
            Metadata of the current site
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsSite.Metadata">ðŸ“– Metadata</a></para></summary>
      <remarks>
            Added in v13.12
            </remarks>
    </member>
    <member name="T:ToSic.Sxc.Context.ICmsUser">
      <summary>
            The user context of your code - so it's information about the user your code is using. 
            
            ðŸª’ In <a href="https://go.2sxc.org/xref17?xref=Custom.Hybrid.Razor14">Dynamic Razor</a> it's found on `CmsContext.User`  
            ðŸª’ In <a href="https://go.2sxc.org/xref17?xref=Custom.Hybrid.RazorTyped">Typed Razor</a> it's found on `MyUser`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsUser">ðŸ“– ICmsUser</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsUser.Email">
      <summary>
            The user e-mail.
            If anonymous/not logged in, would be an empty string.
            
            ðŸª’ Use in Dynamic Razor: `CmsContext.User.Email`  
            ðŸª’ Use in Typed Razor: `MyUser.Email`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsUser.Email">ðŸ“– Email</a></para></summary>
      <remarks>Added in v.14.09</remarks>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsUser.Id">
      <summary>
            User Id as int. Works in DNN and Oqtane.
            If anonymous is zero.
            
            ðŸª’ Use in Dynamic Razor: `CmsContext.User.UrlRoot`  
            ðŸª’ Use in Typed Razor: `MyUser.Id`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsUser.Id">ðŸ“– Id</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsUser.IsAnonymous">
      <summary>
            Information if the user is anonymous (not logged in)
            
            ðŸª’ Use in Dynamic Razor: `CmsContext.User.IsAnonymous`  
            ðŸª’ Use in Typed Razor: `MyUser.IsAnonymous`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsUser.IsAnonymous">ðŸ“– IsAnonymous</a></para></summary>
      <remarks>
            This was added fairly late in v14.08
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsUser.IsSiteAdmin">
      <summary>
            Information if the current user is Site Administrator.
            Basically this means a user has very high permissions - incl. the ability
            to create users in a site etc.
            
            ðŸª’ Use in Dynamic Razor: `CmsContext.User.IsSiteAdmin`  
            ðŸª’ Use in Typed Razor: `MyUser.IsSiteAdmin`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsUser.IsSiteAdmin">ðŸ“– IsSiteAdmin</a></para></summary>
      <remarks>
            These are not the highest possible privileges
            - For the site it would be IsSiteDeveloper
            - For the entire system that would be IsSystemAdmin.
            New in 2sxc 12
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsUser.IsContentAdmin">
      <summary>
            Information if the current user is Site Content Administrator.
            Basically this means a user has Admin permissions, but may not have all admin permissions if excluded through special 2sxc-groups.
            
            ðŸª’ Use in Dynamic Razor: `CmsContext.User.IsContentAdmin`  
            ðŸª’ Use in Typed Razor: `MyUser.IsContentAdmin`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsUser.IsContentAdmin">ðŸ“– IsContentAdmin</a></para></summary>
      <remarks>
            These are not the highest possible privileges
            - For the site it would be IsSiteDeveloper
            - For the entire system that would be IsSystemAdmin.
            New in 2sxc 14.09
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsUser.IsSystemAdmin">
      <summary>
            Information if the current user is System Administrator.
            Basically this means a user has maximum permissions - incl. the ability
            to install additional components or do dangerous things like edit razor.
            
            ðŸª’ Use in Dynamic Razor: `CmsContext.User.IsSystemAdmin`  
            ðŸª’ Use in Typed Razor: `MyUser.IsSystemAdmin`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsUser.IsSystemAdmin">ðŸ“– IsSystemAdmin</a></para></summary>
      <remarks>
            New in 2sxc 12
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsUser.IsSiteDeveloper">
      <summary>
            Information if the current user is Developer on the current site.
            Basically this means a user has maximum site permissions - incl. the ability
            to install additional components or do dangerous things like edit razor.
            
            ðŸª’ Use in Dynamic Razor: `CmsContext.User.IsSiteDeveloper`  
            ðŸª’ Use in Typed Razor: `MyUser.IsSiteDeveloper`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsUser.IsSiteDeveloper">ðŸ“– IsSiteDeveloper</a></para></summary>
      <remarks>
            These are not the highest possible privileges
            - For the entire system that would be IsSystemAdmin.
            New in 2sxc 12
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsUser.Metadata">
      <summary>
            Metadata of the current view
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsUser.Metadata">ðŸ“– Metadata</a></para></summary>
      <remarks>
            Added in v13.12
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsUser.Name">
      <summary>
            The user name as should be displayed. 
            If anonymous/not logged in, would be an empty string.
            
            ðŸª’ Use in Dynamic Razor: `CmsContext.User.Name`  
            ðŸª’ Use in Typed Razor: `MyUser.Name`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsUser.Name">ðŸ“– Name</a></para></summary>
      <remarks>Added in v.14.09</remarks>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsUser.Username">
      <summary>
            The user name used on the login.
            If anonymous/not logged in, would be an empty string.
            
            ðŸª’ Use in Dynamic Razor: `CmsContext.User.Username`  
            ðŸª’ Use in Typed Razor: `MyUser.Username`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsUser.Username">ðŸ“– Username</a></para></summary>
      <remarks>Added in v.14.09</remarks>
    </member>
    <member name="T:ToSic.Sxc.Context.ICmsView">
      <summary>
             View context information.
            
             ðŸª’ In <a href="https://go.2sxc.org/xref17?xref=Custom.Hybrid.Razor14">Dynamic Razor</a> it's found on `CmsContext.View`  
             ðŸª’ In <a href="https://go.2sxc.org/xref17?xref=Custom.Hybrid.RazorTyped">Typed Razor</a> it's found on `MyView`
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsView">ðŸ“– ICmsView</a></para></summary>
      <remarks>
             Added in 2sxc 12.02
             </remarks>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsView.Id">
      <summary>
            View configuration ID
            
            ðŸª’ Use in Dynamic Razor: `CmsContext.View.Id`  
            ðŸª’ Use in Typed Razor: `MyView.Id`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsView.Id">ðŸ“– Id</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsView.Name">
      <summary>
            Name of the view as configured - note that because of i18n it could be different depending on the language.
            To clearly identify a view, use the <see cref="P:ToSic.Sxc.Context.ICmsView.Identifier" /> or use `Settings`
            
            ðŸª’ Use in Dynamic Razor: `CmsContext.View.Name`  
            ðŸª’ Use in Typed Razor: `MyView.Name`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsView.Name">ðŸ“– Name</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsView.Identifier">
      <summary>
            An optional identifier which the View configuration can provide.
            Use this when you want to use the same template but make minor changes based on the View selected (like change the number of columns).
            Usually you will use either this OR the `Settings`
            
            ðŸª’ Use in Razor: `CmsContext.View.Identifier`  
            ðŸª’ Use in Typed Razor: `MyView.Identifier`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsView.Identifier">ðŸ“– Identifier</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsView.Edition">
      <summary>
            Edition used - if any. Otherwise empty string. 
            
            ðŸª’ Use in Razor: `CmsContext.View.Edition`  
            ðŸª’ Use in Typed Razor: `MyView.Edition`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsView.Edition">ðŸ“– Edition</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsView.Metadata">
      <summary>
            Metadata of the current view
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsView.Metadata">ðŸ“– Metadata</a></para></summary>
      <remarks>
            Added in v13.12
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsView.Path">
      <summary>
             The path to this view.
             For URLs which should load js/css from a path beneath the view.
            
             This is different from the `App.Path`, because it will also contain the edition (if there is an edition)
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsView.Path">ðŸ“– Path</a></para></summary>
      <remarks>
             Added in v15.04
             </remarks>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsView.Folder">
      <summary>
             This is the preferred way to get the Url or Path to the current view.
            
             This is different from the `App.Folder`, because it will also contain the edition (if there is an edition)
             
             ðŸª’ Use in Razor: `CmsContext.View.Folder` - eg `CmsContext.View.Folder.Url`  
             ðŸª’ Use in Typed Razor: `MyView.Edition` - eg `MyView.Folder.Url`
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsView.Folder">ðŸ“– Folder</a></para></summary>
      <remarks>
             Added in v16.04
             </remarks>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsView.Settings">
      <summary>
             Settings of this view.
             This property only works in the new typed code.
            
             Note that many views don't have their own settings, so this would be empty = `null`.
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsView.Settings">ðŸ“– Settings</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsView.Resources">
      <summary>
             Settings of this view.
             This property only works in the new typed code.
            
             Note that many views don't have their own settings, so this would be empty = `null`.
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsView.Resources">ðŸ“– Resources</a></para></summary>
      <remarks>Resources added to API in v17.04</remarks>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsView`2.Settings">
      <summary>
            All the app settings which are custom for each app.
            These are typed - typically to AppCode.Data.AppSettings
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsView`2.Settings">ðŸ“– Settings</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Context.ICmsView`2.Resources">
      <summary>
            All the app resources (usually used for multi-language labels etc.).
            /// These are typed - typically to AppCode.Data.AppResources
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.ICmsView`2.Resources">ðŸ“– Resources</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Context.Internal.CmsBlock.Id">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Context.Internal.CmsBlock.IsRoot">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Context.Internal.CmsBlock.Metadata">
      <inheritdoc />
    </member>
    <member name="T:ToSic.Sxc.Context.Internal.CmsContext">
      <summary>
            Runtime context information, used in dynamic code. Help the code to detect what environment it's in, what page etc.
            This lets the code be platform-agnostic, so that it works across implementations (Dnn, Oqtane, NopCommerce)
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Context.Internal.CmsContext.#ctor(ToSic.Sxc.Context.IPlatform,ToSic.Eav.Context.IContextOfSite,ToSic.Lib.DI.LazySvc{ToSic.Sxc.Context.IPage},ToSic.Eav.Apps.IAppStates,ToSic.Lib.DI.LazySvc{ToSic.Sxc.Context.ICmsSite})">
      <summary>
            DI Constructor
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Context.Internal.CmsView.Id">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Context.Internal.CmsView.Name">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Context.Internal.CmsView.Identifier">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Context.Internal.CmsView.Edition">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Context.Internal.CmsView.ToSic#Sxc#Context#ICmsView#Settings">
      <summary>
            Note: this is an explicit implementation, so in Dynamic Razor it won't work. This is by design.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Context.Internal.CmsView.ToSic#Sxc#Context#ICmsView#Resources">
      <summary>
            Note: this is an explicit implementation, so in Dynamic Razor it won't work. This is by design.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Context.Internal.CmsView.Path">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Context.Internal.CmsView.FigureOutPath(System.String)">
      <summary>
            Figure out the path to the view based on a root path.
            </summary>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Context.Internal.CmsViewFolder.FigureOutPath(System.String)">
      <summary>
            Figure out the path to the view based on a root path.
            </summary>
      <returns></returns>
    </member>
    <member name="T:ToSic.Sxc.Context.Internal.AppIdResolver">
      <summary>
            This helps API calls to get the app which is currently needed
            It does not perform security checks ATM and maybe never will
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Context.Internal.AppIdResolver.GetAppIdFromPath(System.Int32,System.String,System.Boolean)">
      <summary>
            New implementation to replace previous
            </summary>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Context.Internal.AppIdResolver.GetAppIdFromRoute">
      <summary>
            This will detect the app based on appid/zoneid params in the URL
            It's a temporary solution, because normally we want the control flow to be more obvious
            </summary>
      <returns></returns>
    </member>
    <member name="P:ToSic.Sxc.Context.Internal.ContextOfBlock.Page">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Context.Internal.ContextOfBlock.Module">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Context.Internal.ContextOfBlock.Publishing">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Context.Internal.ContextOfBlock.Clone(ToSic.Lib.Logging.ILog)">
      <inheritdoc />
    </member>
    <member name="T:ToSic.Sxc.Context.Internal.IContextOfBlock">
      <summary>
            TODO: SHOULD actually be called ContextOfModule!
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Context.Internal.IContextOfBlock.Page">
      <summary>
            The page it's running on + parameters for queries, url etc.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Context.Internal.IContextOfBlock.Module">
      <summary>
            The container for our block, basically the module
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Context.Internal.IContextOfBlock.Publishing">
      <summary>
            Publishing information about the current context
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Context.Internal.IContextOfBlock.PageServiceShared">
      <summary>
            WIP
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Context.Internal.ISxcContextResolver">
      <summary>
            This provides other systems with a context
            Note that it's important to always make this **Scoped**, not transient, as there is some re-use after initialization
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Context.Internal.ISxcContextResolver.BlockContextRequired">
      <summary>
            Return the block or throw an error
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Context.Internal.ISxcContextResolver.BlockContextOrNull">
      <summary>
            Return the block if known, or null if not
            </summary>
      <returns>The current block or null</returns>
    </member>
    <member name="M:ToSic.Sxc.Context.Internal.ISxcContextResolver.GetBlockOrSetApp(System.Int32)">
      <summary>
            Return the block if known, or an app context if not
            </summary>
      <param name="appId"></param>
      <returns></returns>
    </member>
    <member name="T:ToSic.Sxc.Context.Internal.Module`1">
      <summary>
            A base implementation of the block information wrapping the CMS specific object along with it.
            </summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:ToSic.Sxc.Context.Internal.Module`1.#ctor(System.String)">
      <summary>
            A base implementation of the block information wrapping the CMS specific object along with it.
            </summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="P:ToSic.Sxc.Context.Internal.Module`1.Id">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Context.Internal.Module`1.IsContent">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Context.Internal.Module`1.BlockIdentifier">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Context.Internal.Page.#ctor(ToSic.Lib.DI.LazySvc{ToSic.Sxc.Web.Internal.DotNet.IHttp})">
      <summary>
            Constructor for DI
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Context.Internal.Parameters">
      <summary>
            This should provide cross-platform, neutral way to have page parameters in the Razor
            </summary>
      <remarks>
            This MUST be public, because in dyn-code you could have Parameters.Set("key", something).Set(...).Set(...).
            If any parameter (eg 'something') is dynamic, the second Set(...) would fail, because it can't find the method on `object`.
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Context.Internal.Parameters.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>
            This should provide cross-platform, neutral way to have page parameters in the Razor
            </summary>
      <remarks>
            This MUST be public, because in dyn-code you could have Parameters.Set("key", something).Set(...).Set(...).
            If any parameter (eg 'something') is dynamic, the second Set(...) would fail, because it can't find the method on `object`.
            </remarks>
    </member>
    <member name="T:ToSic.Sxc.Context.Internal.Platform">
      <summary>
            General platform information
            </summary>
      <remarks>
            This must be provided through Dependency Injection, Singleton, as it cannot change at runtime.
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Context.Internal.Platform.Type">
      <summary>
            The platform type Id from the enumerator - so stored as an int.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Context.Internal.Platform.Name">
      <summary>
            A nice name ID, like "Dnn" or "Oqtane"
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Context.Internal.Raw.CmsUserRaw">
      <summary>
             Internal class to hold all the information about the user,
             until it's converted to an IEntity in the <see cref="T:ToSic.Sxc.DataSources.Users" /> DataSource.
            
             For detailed documentation, check the docs of the underlying objects:
            
             * TODO:
             * TODO:
             Important: this is an internal object.
             We're just including in the docs to better understand where the properties come from.
             We'll probably move it to another namespace some day.
             </summary>
      <remarks>
             Make sure the property names never change, as they are critical for the created Entity.
             They must also match the ICmsUser interface
             </remarks>
    </member>
    <member name="P:ToSic.Sxc.Context.Internal.Raw.CmsUserRaw.Roles">
      <summary>
            Role ID List.
            Important: Internally we use a list to do checks etc.
            But for creating the entity we return a CSV
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Context.Internal.Raw.CmsUserRaw.ToSic#Eav#Context#IUser#IdentityToken">
      <summary>
            Ignore, just included for IUser compatibility
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Context.Internal.Raw.CmsUserRaw.Attributes(ToSic.Eav.Data.Raw.RawConvertOptions)">
      <summary>
            Data but without Id, Guid, Created, Modified
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Context.Internal.SxcContextResolver.UserPermissions">
      <summary>
             Get the best possible context which can give us insights about the user permissions.
            
             TODO: WIP - requires that if an app is to be used, it was accessed before - not yet perfect...
             </summary>
      <returns></returns>
    </member>
    <member name="T:ToSic.Sxc.Context.IParameters">
      <summary>
             Collection of url parameters of the current page
            
             Note: Has a special ToString() implementation, which gives you the parameters for re-use in other scenarios.
             
             ðŸª’ In <a href="https://go.2sxc.org/xref17?xref=Custom.Hybrid.Razor14">Dynamic Razor</a> it's found on `CmsContext.Page.Parameters`  
             ðŸª’ In <a href="https://go.2sxc.org/xref17?xref=Custom.Hybrid.RazorTyped">Typed Razor</a> it's found on `MyPage.Parameters`
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.IParameters">ðŸ“– IParameters</a></para></summary>
      <remarks>
             * uses the <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.Functional">NetCode.Conventions.Functional</a>
             * Added typed accessors such as `Int(...)` etc. in v16.03 implementing <see cref="T:ToSic.Sxc.Data.ITyped" /></remarks>
    </member>
    <member name="M:ToSic.Sxc.Context.IParameters.Get(System.String)">
      <summary>
            Get a parameter.
            
            ðŸª’ Use in Dynamic Razor: `CmsContext.Page.Parameters.Get("SortOrder")`  
            ðŸª’ Use in Typed Razor: `MyPage.Parameters.Get("SortOrder")`
            </summary>
      <param name="name">the key/name in the url</param>
      <returns>a string or null</returns>
      <remarks>
            Added v15.04
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Context.IParameters.Get``1(System.String)">
      <summary>
            Get a parameter and convert to the needed type - or return the default.
            
            ðŸª’ Use in Dynamic Razor: `CmsContext.Page.Parameters.Get&lt;int&gt;("id")`  
            ðŸª’ Use in Typed Razor: `MyPage.Parameters.Get&lt;int&gt;("id")`
            </summary>
      <typeparam name="TValue"></typeparam>
      <param name="name">Key/name of the parameter</param>
      <returns></returns>
      <remarks>
            Added v15.04
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Context.IParameters.Get``1(System.String,ToSic.Lib.Coding.NoParamOrder,``0)">
      <summary>
            Get a parameter and convert to the needed type - or return the fallback.
            
            ðŸª’ Use in Dynamic Razor: `CmsContext.Page.Parameters.Get("id", fallback: 0)`  
            ðŸª’ Use in Typed Razor: `MyPage.Parameters.Get("SortOrder", fallback: 0)`
            </summary>
      <typeparam name="TValue"></typeparam>
      <param name="name">Key/name of the parameter</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">Optional fallback value to use if not found</param>
      <returns></returns>
      <remarks>
            Added v15.04
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Context.IParameters.Add(System.String)">
      <summary>
            Add another URL parameter and return a new <see cref="T:ToSic.Sxc.Context.IParameters" />.
            If the name/key already exists, it will extend it, add a simple 
            Otherwise please use <see cref="M:ToSic.Sxc.Context.IParameters.Set(System.String,System.String)" /></summary>
      <param name="key"></param>
      <returns>A _new_ <see cref="T:ToSic.Sxc.Context.IParameters" />, the original is not modified.</returns>
    </member>
    <member name="M:ToSic.Sxc.Context.IParameters.Add(System.String,System.String)">
      <summary>
            Add another URL parameter and return a new <see cref="T:ToSic.Sxc.Context.IParameters" />.
            If the name/key already exists, it will extend it, so the parameter will have 2 values.
            Otherwise, please use <see cref="M:ToSic.Sxc.Context.IParameters.Set(System.String,System.String)" /></summary>
      <param name="key">the key</param>
      <param name="value">the value</param>
      <returns>A _new_ <see cref="T:ToSic.Sxc.Context.IParameters" />, the original is not modified.</returns>
    </member>
    <member name="M:ToSic.Sxc.Context.IParameters.Add(System.String,System.Object)">
      <summary>
             Add another URL parameter and return a new <see cref="T:ToSic.Sxc.Context.IParameters" />.
             If the name/key already exists, it will extend it, so the parameter will have 2 values.
             Otherwise, please use <see cref="M:ToSic.Sxc.Context.IParameters.Set(System.String,System.String)" />
            
             Note also that this takes an `object` and will do some special conversions.
             For example, bool values are lower case `true`|`false`, numbers are culture invariant and dates
             are treated as is with time removed if it has no time. 
             </summary>
      <param name="key">the key</param>
      <param name="value">object! value</param>
      <returns>A _new_ <see cref="T:ToSic.Sxc.Context.IParameters" />, the original is not modified.</returns>
      <remarks>Added in v15.0</remarks>
    </member>
    <member name="M:ToSic.Sxc.Context.IParameters.Set(System.String,System.String)">
      <summary>
            Add another URL parameter and return a new <see cref="T:ToSic.Sxc.Context.IParameters" />.
            If the name/key already exists, it will just overwrite it.
            </summary>
      <param name="name"></param>
      <param name="value"></param>
      <returns>A _new_ <see cref="T:ToSic.Sxc.Context.IParameters" />, the original is not modified.</returns>
    </member>
    <member name="M:ToSic.Sxc.Context.IParameters.Set(System.String,System.Object)">
      <summary>
             Add another URL parameter and return a new <see cref="T:ToSic.Sxc.Context.IParameters" />.
             If the name/key already exists, it will just overwrite it.
            
             Note also that this takes an `object` and will do some special conversions.
             For example, bool values are lower case `true`|`false`, numbers are culture invariant and dates
             are treated as is with time removed if it has no time. 
             </summary>
      <param name="name">the key</param>
      <param name="value">object! value</param>
      <returns>A _new_ <see cref="T:ToSic.Sxc.Context.IParameters" />, the original is not modified.</returns>
      <remarks>Added in v15.0</remarks>
    </member>
    <member name="M:ToSic.Sxc.Context.IParameters.Set(System.String)">
      <summary>
            Add another URL parameter and return a new <see cref="T:ToSic.Sxc.Context.IParameters" />.
            If the name/key already exists, it will just overwrite it.
            </summary>
      <param name="name"></param>
      <returns>A _new_ <see cref="T:ToSic.Sxc.Context.IParameters" />, the original is not modified.</returns>
    </member>
    <member name="M:ToSic.Sxc.Context.IParameters.Remove(System.String)">
      <summary>
            Remove a parameter and return a new <see cref="T:ToSic.Sxc.Context.IParameters" />.
            </summary>
      <param name="name"></param>
      <returns>A _new_ <see cref="T:ToSic.Sxc.Context.IParameters" />, the original is not modified.</returns>
    </member>
    <member name="M:ToSic.Sxc.Context.IParameters.Remove(System.String,System.Object)">
      <summary>
            Remove a parameter **value** and return a new <see cref="T:ToSic.Sxc.Context.IParameters" />.
            This only removes a specific value, for example if you start with `id=27&amp;id=42` and remove `id=27`, then the result will be `id=42`.
            </summary>
      <param name="name"></param>
      <param name="value"></param>
      <returns>A _new_ <see cref="T:ToSic.Sxc.Context.IParameters" />, the original is not modified.</returns>
      <remarks>Added in v17.01</remarks>
    </member>
    <member name="M:ToSic.Sxc.Context.IParameters.Toggle(System.String,System.Object)">
      <summary>
             Toggle a parameter value and return a new <see cref="T:ToSic.Sxc.Context.IParameters" />.
            
             This means that if the parameter was previously set with the same value, it will be un-set, otherwise it will be added.
             </summary>
      <param name="name"></param>
      <param name="value"></param>
      <returns>A _new_ <see cref="T:ToSic.Sxc.Context.IParameters" />, the original is not modified.</returns>
      <remarks>Added in v17.01</remarks>
    </member>
    <member name="M:ToSic.Sxc.Context.IParameters.Filter(System.String)">
      <summary>
            Filter all parameters to only keep the keys listed in `names`.
            </summary>
      <param name="names">one or more names to keep, comma-separated.</param>
      <returns>A _new_ <see cref="T:ToSic.Sxc.Context.IParameters" />, the original is not modified.</returns>
      <remarks>Added in v17.01</remarks>
    </member>
    <member name="M:ToSic.Sxc.Context.IParameters.ToString">
      <summary>
            ToString() is specially implemented, to give you the parameters again as they were originally given on the page.
            </summary>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Context.IParameters.ContainsKey(System.String)">
      <inheritdoc cref="M:ToSic.Sxc.Data.Internal.IHasKeys.ContainsKey(System.String)" />
    </member>
    <member name="T:ToSic.Sxc.Context.IModule">
      <summary>
            A unit / block within the CMS. Contains all necessary identification to pass around.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.IModule">ðŸ“– IModule</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Context.IModule.IsContent">
      <summary>
            Determines if this is a the primary App (the content-app) as opposed to any additional app
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.IModule.IsContent">ðŸ“– IsContent</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Context.IModule.BlockIdentifier">
      <summary>
            Identifies the content-block which should be shown in this container
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.IModule.BlockIdentifier">ðŸ“– BlockIdentifier</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Context.IPage.Id">
      <summary>
            The Id of the page.
            
            ðŸª’ Use in Razor: `CmsContext.Page.Type`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.IPage.Id">ðŸ“– Id</a></para></summary>
      <remarks>
            Corresponds to the Dnn `TabId` or the Oqtane `Page.PageId`
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Context.IPage.Parameters">
      <summary>
            The page parameters, cross-platform.
            Use this for easy access to url parameters like ?id=xyz
            with `CmsContext.Page.Parameters["id"]` as a replacement for `Request.QueryString["id"]`
            
            ðŸª’ Use in Razor: `CmsContext.Page.Parameters["id"]`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.IPage.Parameters">ðŸ“– Parameters</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Context.IPage.Url">
      <summary>
            The resource specific url, like the one to this page or portal
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.IPage.Url">ðŸ“– Url</a></para></summary>
    </member>
    <member name="T:ToSic.Sxc.Context.PlatformType">
      <summary>
            The types of platforms which 2sxc could be running on
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Context.PlatformType">ðŸ“– PlatformType</a></para></summary>
    </member>
    <member name="F:ToSic.Sxc.Context.PlatformType.Unknown">
      <summary>
            Unknown platform - this should never occur
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Context.PlatformType.None">
      <summary>
            No platform - this should never occur
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Context.PlatformType.Hybrid">
      <summary>
            All platforms / hybrid. This should never be used to publish what a platform is, but to mark things that work on all platforms
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Context.PlatformType.Dnn">
      <summary>
            Dnn aka. DotNetNuke - see https://dnncommunity.org/
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Context.PlatformType.Oqtane">
      <summary>
            Oqtane using .net Core 5 - see https://oqtane.org/
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Context.PlatformType.NopCommerce">
      <summary>
            NopCommerce using .net Core 5 (not implemented yet) - see https://www.nopcommerce.com/
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Context.PlatformType.Custom">
      <summary>
            Custom platform - this should never occur in production code but could during automated testing
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Context.PlatformType.Test">
      <summary>
            Test platform - this should never occur in production code but could during automated testing
            </summary>
    </member>
    <member name="T:ToSic.Sxc.DataSources.ContextData">
      <summary>
            The main data source for Blocks. Internally often uses <see cref="T:ToSic.Sxc.DataSources.CmsBlock" /> to find what it should provide.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.DataSources.ContextData">ðŸ“– ContextData</a></para></summary>
      <remarks>
            It's based on the <see cref="T:ToSic.Eav.DataSources.PassThrough" /> data source, because it's just a coordination-wrapper.
            </remarks>
    </member>
    <member name="T:ToSic.Sxc.DataSources.AdamFiles">
      <summary>
             Deliver a list of App files and folders from the current platform (Dnn or Oqtane).
            
             As of now there are no parameters to set.
            
             To figure out the properties returned and what they match up to, see <see cref="T:ToSic.Sxc.DataSources.Internal.AdamItemDataRaw" /> TODO
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.DataSources.AdamFiles">ðŸ“– AdamFiles</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.AdamFiles.EntityIds">
      <summary>
            Uses the <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.Immutable">immutable convention</a>.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.DataSources.AdamFiles.EntityIds">ðŸ“– EntityIds</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.AdamFiles.EntityGuids">
      <summary>
            Uses the <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.Immutable">immutable convention</a>.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.DataSources.AdamFiles.EntityGuids">ðŸ“– EntityGuids</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.AdamFiles.Fields">
      <summary>
            Uses the <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.Immutable">immutable convention</a>.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.DataSources.AdamFiles.Fields">ðŸ“– Fields</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.AdamFiles.Filter">
      <summary>
            Uses the <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.Immutable">immutable convention</a>.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.DataSources.AdamFiles.Filter">ðŸ“– Filter</a></para></summary>
    </member>
    <member name="T:ToSic.Sxc.DataSources.AppFiles">
      <summary>
             Deliver a list of App files and folders from the current platform (Dnn or Oqtane).
            
             As of now there are no parameters to set.
            
             To figure out the properties returned and what they match up to, see <see cref="T:ToSic.Sxc.DataSources.Internal.PageDataRaw" /> TODO
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.DataSources.AppFiles">ðŸ“– AppFiles</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.AppFiles.OnlyFolders">
      <summary>
            Uses the <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.Immutable">immutable convention</a>.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.DataSources.AppFiles.OnlyFolders">ðŸ“– OnlyFolders</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.AppFiles.OnlyFiles">
      <summary>
            Uses the <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.Immutable">immutable convention</a>.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.DataSources.AppFiles.OnlyFiles">ðŸ“– OnlyFiles</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.AppFiles.Root">
      <summary>
            Uses the <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.Immutable">immutable convention</a>.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.DataSources.AppFiles.Root">ðŸ“– Root</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.AppFiles.Filter">
      <summary>
            Uses the <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.Immutable">immutable convention</a>.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.DataSources.AppFiles.Filter">ðŸ“– Filter</a></para></summary>
    </member>
    <member name="M:ToSic.Sxc.DataSources.AppFiles.GetMultiAccess(System.String)">
      <summary>
            Mini-cache.
            Reason is that we can only generate the streams together, so this ensures that after generating them once,
            other streams requested at the same time won't re-trigger stream generation.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.DataSources.AppFiles.GetInternal">
      <summary>
            Get both the files and folders stream
            </summary>
      <returns></returns>
    </member>
    <member name="T:ToSic.Sxc.DataSources.Pages">
      <summary>
             Deliver a list of pages from the current platform (Dnn or Oqtane).
            
             To figure out the properties returned and what they match up to, see <see cref="T:ToSic.Sxc.DataSources.Internal.PageDataRaw" /><para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.DataSources.Pages">ðŸ“– Pages</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Pages.IncludeHidden">
      <summary>
            Include hidden pages.
            Default is `false`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.DataSources.Pages.IncludeHidden">ðŸ“– IncludeHidden</a></para></summary>
      <remarks>
            * new in 15.04
            * uses the <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.Immutable">immutable convention</a></remarks>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Pages.IncludeDeleted">
      <summary>
            Include deleted pages in the recycle bin.
            Default is `false`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.DataSources.Pages.IncludeDeleted">ðŸ“– IncludeDeleted</a></para></summary>
      <remarks>
            * new in 15.04
            * uses the <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.Immutable">immutable convention</a></remarks>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Pages.IncludeAdmin">
      <summary>
            Include admin pages such as site files.
            Default is `false`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.DataSources.Pages.IncludeAdmin">ðŸ“– IncludeAdmin</a></para></summary>
      <remarks>
            * new in 15.04
            * uses the <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.Immutable">immutable convention</a></remarks>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Pages.IncludeSystem">
      <summary>
            Include system pages such as modules management.
            Default is `false`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.DataSources.Pages.IncludeSystem">ðŸ“– IncludeSystem</a></para></summary>
      <remarks>
            * new in 15.04
            * uses the <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.Immutable">immutable convention</a></remarks>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Pages.IncludeLinks">
      <summary>
            Include link-reference pages (which are usually used in menus, and not themselves a real page).
            Default is `true`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.DataSources.Pages.IncludeLinks">ðŸ“– IncludeLinks</a></para></summary>
      <remarks>
            * new in 15.04
            * uses the <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.Immutable">immutable convention</a></remarks>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Pages.RequireViewPermissions">
      <summary>
            Require that the current user has view permissions on all pages.
            Default is `true`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.DataSources.Pages.RequireViewPermissions">ðŸ“– RequireViewPermissions</a></para></summary>
      <remarks>
            * new in 15.04
            * uses the <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.Immutable">immutable convention</a></remarks>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Pages.RequireEditPermissions">
      <summary>
            Require that the current user has edit permissions on all pages.
            Default is `false`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.DataSources.Pages.RequireEditPermissions">ðŸ“– RequireEditPermissions</a></para></summary>
      <remarks>
            * new in 15.04
            * uses the <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.Immutable">immutable convention</a></remarks>
    </member>
    <member name="T:ToSic.Sxc.DataSources.Roles">
      <summary>
            Will get all (or just some) roles of the current site.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.DataSources.Roles">ðŸ“– Roles</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Roles.RoleIds">
      <summary>
            Optional (single value or comma-separated integers) filter,
            include roles based on roleId
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.DataSources.Roles.RoleIds">ðŸ“– RoleIds</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Roles.ExcludeRoleIds">
      <summary>
            Optional (single value or comma-separated integers) filter,
            exclude roles based on roleId
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.DataSources.Roles.ExcludeRoleIds">ðŸ“– ExcludeRoleIds</a></para></summary>
    </member>
    <member name="M:ToSic.Sxc.DataSources.Roles.#ctor(ToSic.Eav.DataSource.CustomDataSourceAdvanced.MyServices,ToSic.Sxc.DataSources.Internal.RolesDataSourceProvider,ToSic.Eav.Data.Build.IDataFactory)">
      <summary>
            Constructor to tell the system what out-streams we have
            </summary>
    </member>
    <member name="T:ToSic.Sxc.DataSources.Sites">
      <summary>
             Deliver a list of sites from the Oqtane
            
             As of now there are no parameters to set.
            
             To figure out the properties returned and what they match up to, see <see cref="T:ToSic.Sxc.DataSources.Internal.SiteDataRaw" /><para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.DataSources.Sites">ðŸ“– Sites</a></para></summary>
    </member>
    <member name="T:ToSic.Sxc.DataSources.Users">
      <summary>
            Will get all (or just some) users of the current site.
            The resulting Entity will match the <see cref="T:ToSic.Eav.Context.IUser" /> interface.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.DataSources.Users">ðŸ“– Users</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Users.UserIds">
      <summary>
            Optional Users (single value or comma-separated guids or integers) filter,
            include users based on guid or id
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.DataSources.Users.UserIds">ðŸ“– UserIds</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Users.ExcludeUserIds">
      <summary>
            Optional exclude Users (single value or comma-separated guids or integers) filter,
            exclude users based on guid or id
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.DataSources.Users.ExcludeUserIds">ðŸ“– ExcludeUserIds</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Users.RoleIds">
      <summary>
            Optional IncludeRolesFilter (single value or comma-separated integers) filter,
            include users that have any of roles from filter
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.DataSources.Users.RoleIds">ðŸ“– RoleIds</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Users.ExcludeRoleIds">
      <summary>
            Optional ExcludeRolesFilter (single value or comma-separated integers) filter,
            exclude users that have any of roles from filter
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.DataSources.Users.ExcludeRoleIds">ðŸ“– ExcludeRoleIds</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Users.IncludeSystemAdmins">
      <summary>
            Optional SystemAdmins filter.
            
            * `true` - with System Admins
            * `false` - without System Admins
            * `required` - only System Admins (no normal users)
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.DataSources.Users.IncludeSystemAdmins">ðŸ“– IncludeSystemAdmins</a></para></summary>
      <remarks>
            * Changed to be string in v15.03 (before bool) to allow more options such as `required`
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Users.AddRoles">
      <summary>
            Add property `Roles` as a relationship to role entities.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.DataSources.Users.AddRoles">ðŸ“– AddRoles</a></para></summary>
      <remarks>
            * Added v15.03 - minimal breaking change, before the source return a non-standard `RoleIds` string-array.
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.DataSources.Users.#ctor(ToSic.Eav.DataSource.CustomDataSourceAdvanced.MyServices,ToSic.Sxc.DataSources.Internal.UsersDataSourceProvider,ToSic.Eav.Data.Build.IDataFactory,ToSic.Eav.Services.IDataSourceGenerator{ToSic.Sxc.DataSources.Roles})">
      <summary>
            Constructor to tell the system what out-streams we have
            </summary>
    </member>
    <member name="M:ToSic.Sxc.DataSources.Users.GetRolesStream(System.Collections.Generic.List{ToSic.Sxc.Context.Internal.Raw.CmsUserRaw})">
      <summary>
            Retrieve roles and create lookup for relationship-mapper
            </summary>
      <param name="usersRaw"></param>
      <returns></returns>
    </member>
    <member name="T:ToSic.Sxc.DataSources.CmsBlock">
      <summary>
            This data-source delivers the core data for a CMS Block. <br />
            It will look up the configuration in the CMS (like the Module-Settings in DNN) to determine what data is needed for the block. <br />
            Usually it will then find a reference to a ContentBlock, from which it determines what content-items are assigned. <br />
            It could also find that the template specifies a query, in which case it would retrieve that. <br /><em>Was previously called ModuleDataSource</em><para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.DataSources.CmsBlock">ðŸ“– CmsBlock</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.CmsBlock.ModuleId">
      <summary>
            The instance-id of the CmsBlock (2sxc instance, DNN ModId). <br />
            It's named Instance-Id to be more neutral as we're opening it to other platforms
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.DataSources.CmsBlock.ModuleId">ðŸ“– ModuleId</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.CmsBlock.OverrideView">
      <summary>
            This allows external settings to override the view given by the configuration. This is used to temporarily use an alternate view.
            For example, when previewing a different template. 
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.DataSources.CmsBlock.OverrideView">ðŸ“– OverrideView</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.CmsBlock.Block">
      <summary>
            The block for which this DataSource is needed - provides context and configuration
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.DataSources.CmsBlock.Block">ðŸ“– Block</a></para></summary>
    </member>
    <member name="T:ToSic.Sxc.DataSources.IBlockInstance">
      <summary>
            The main data source for a View (Razor, Tokens).
            Depending on the view configuration, it will either provide the data from a Query or from items added/edited on the Block itself.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.DataSources.IBlockInstance">ðŸ“– IBlockInstance</a></para></summary>
      <remarks>
            * Introduced in v16.01 to simplify the API when using <see cref="T:ToSic.Sxc.Data.ITypedItem" />s.
            * Internally often uses <see cref="T:ToSic.Sxc.DataSources.CmsBlock" /> to find what it should provide.
            * It's based on the <see cref="T:ToSic.Eav.DataSources.PassThrough" /> data source, because it's just a wrapper.
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Internal.AdamItemDataRaw.Name">
      <summary>
            The file name
            </summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Internal.AdamItemDataRaw.ReferenceId">
      <summary>
            This contains the code like "file:2742"
            </summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Internal.AdamItemDataRaw.Url">
      <summary>
            Normal url to access the resource
            </summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Internal.AdamItemDataRaw.Type">
      <summary>
            The Adam type, such as "folder", "image" etc.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.DataSources.Internal.AdamItemDataRaw.Attributes(ToSic.Eav.Data.Raw.RawConvertOptions)">
      <summary>
            Data but without Id, Guid, Created, Modified
            </summary>
    </member>
    <member name="T:ToSic.Sxc.DataSources.Internal.AppFileDataRaw">
      <summary>
             Internal class to hold all the information about the App files,
             until it's converted to an IEntity in the <see cref="T:ToSic.Sxc.DataSources.AppFiles" /> DataSource.
            
             Important: this is an internal object.
             We're just including in in the docs to better understand where the properties come from.
             We'll probably move it to another namespace some day.
             </summary>
      <remarks>
             Make sure the property names never change, as they are critical for the created Entity.
             </remarks>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Internal.AppFileDataRaw.Extension">
      <summary>
            The file name extension
            </summary>
    </member>
    <member name="M:ToSic.Sxc.DataSources.Internal.AppFileDataRaw.Attributes(ToSic.Eav.Data.Raw.RawConvertOptions)">
      <summary>
            Data but without Id, Guid, Created, Modified
            </summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Internal.AppFileDataRawBase.FullName">
      <summary>
            Starting in the App-Root
            </summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Internal.AppFileDataRawBase.ParentFolderInternal">
      <summary>
            This is just for internal lookup
            </summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Internal.AppFileDataRawBase.Path">
      <summary>
            Starting in the App-Root
            </summary>
    </member>
    <member name="M:ToSic.Sxc.DataSources.Internal.AppFileDataRawBase.Attributes(ToSic.Eav.Data.Raw.RawConvertOptions)">
      <summary>
            Data but without Id, Guid, Created, Modified
            </summary>
    </member>
    <member name="T:ToSic.Sxc.DataSources.Internal.AppFolderDataRaw">
      <summary>
             Internal class to hold all the information about the App folders,
             until it's converted to an IEntity in the <see cref="T:ToSic.Sxc.DataSources.AppFiles" /> DataSource.
            
             Important: this is an internal object.
             We're just including in in the docs to better understand where the properties come from.
             We'll probably move it to another namespace some day.
             </summary>
      <remarks>
             Make sure the property names never change, as they are critical for the created Entity.
             </remarks>
    </member>
    <member name="T:ToSic.Sxc.DataSources.Internal.PageDataRaw">
      <summary>
             Internal class to hold all the information about the page,
             until it's converted to an IEntity in the <see cref="T:ToSic.Sxc.DataSources.Pages" /> DataSource.
            
             For detailed documentation, check the docs of the underlying objects:
            
             * [Dnn TabInfo](https://docs.dnncommunity.org/api/DotNetNuke.Entities.Tabs.TabInfo.html)
             * [Oqtane Page](https://docs.oqtane.org/api/Oqtane.Models.Page.html)
             
             Important: this is an internal object.
             We're just including in in the docs to better understand where the properties come from.
             We'll probably move it to another namespace some day.
             </summary>
      <remarks>
             Make sure the property names never change, as they are critical for the created Entity.
             </remarks>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Internal.PageDataRaw.Id">
      <summary>
             The page ID.
            
             * In Dnn it's from `TabInfo.TabID`
             * In Oqtane it's `Page.PageId`
             </summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Internal.PageDataRaw.ParentId">
      <summary>
             The parent page ID.
            
             It's usually `0` if it's a top level page.
            
             * In Dnn it's from `TabInfo.ParentId`
             * in Oqtane it's from `Page.ParentId`
             </summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Internal.PageDataRaw.Guid">
      <summary>
             The page GUID.
            
             * In Dnn it's from `TabInfo.UniqueId`
             * In Oqtane it's `Guid.Empty` as Oqtane doesn't have page GUIDs
             </summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Internal.PageDataRaw.Title">
      <summary>
             The page title.
            
             * In Dnn it's from `TabInfo.Title`
             * in Oqtane it's from `Page.Title`
             </summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Internal.PageDataRaw.Name">
      <summary>
             The page name.
            
             * In Dnn it's from `TabInfo.Name`
             * in Oqtane it's from `Page.Name`
             </summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Internal.PageDataRaw.Clickable">
      <summary>
             Determines if this item is clickable in the menu.
            
             * In Dnn it's from `!TabInfo.DisableLink`
             * in Oqtane it's from `Page.IsClickable`
             </summary>
      <remarks>
             Added in v15.01
             </remarks>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Internal.PageDataRaw.Order">
      <summary>
             Order of this item in a menu.
             It is 1 based, so the first item has Order 1.
            
             * In Dnn it's from `TabInfo.TabOrder`
             * in Oqtane it's from `Page.Order`
             </summary>
      <remarks>
             Added in v15.01
             </remarks>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Internal.PageDataRaw.Visible">
      <summary>
             The page visibility - if it should be shown in the menu.
            
             * In Dnn it's from `TabInfo.IsVisible`
             * in Oqtane it's from `Page.IsNavigation`
             </summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Internal.PageDataRaw.HasChildren">
      <summary>
             Info if the page has sub-pages. 
            
             * In Dnn it's from `TabInfo.HasChildren`
             * in Oqtane it's from `Page.HasChildren`
             </summary>
      <remarks>
             Added in v15.01
             </remarks>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Internal.PageDataRaw.Level">
      <summary>
             How deep this page is in the breadcrumb.
             The number is 1 based, so the top level is 1.
            
             * In Dnn it's from `TabInfo.Level` (+1)
             * in Oqtane it's from `Page.Level` (+1)
             </summary>
      <remarks>
             Added in v15.01
             </remarks>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Internal.PageDataRaw.LinkTarget">
      <summary>
            WIP
            * In Dnn it's from `TabInfo.TabSettings["LinkNewWindow"]`and will be either `_blank` or `` (empty string)
            * In Oqtane it's _not implemented_ an will be an empty string
            </summary>
      <remarks>
            Added in v15.02
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Internal.PageDataRaw.Path">
      <summary>
            The path with slashes to this page.
            
            * In Dnn it's from `TabInfo.TabPath`
            * in Oqtane it's from `Page.Path`
            </summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Internal.PageDataRaw.Url">
      <summary>
             The public url to this page (without any trailing slashes)
            
             * In Dnn it's from `TabInf.FullUrl` (last slash removed)
             * in Oqtane it's a combination of protocol, site-alias and path
             </summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Internal.PageDataRaw.Created">
      <summary>
             The page creation date/time.
            
             * In Dnn it's from `TabInfo.CreatedOnDate`
             * in Oqtane it's from `Page.CreatedOn`
             </summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Internal.PageDataRaw.Modified">
      <summary>
             The page modification date/time.
            
             * In Dnn it's from `TabInfo.LastModifiedOnDate`
             * in Oqtane it's from `Page.ModifiedOn`
             </summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Internal.PageDataRaw.IsDeleted">
      <summary>
             The page delete-status.
             Normally you will only see not-deleted pages, so it should usually be false.
            
             * In Dnn it's from `TabInfo.IsDeleted`
             * in Oqtane it's from `Page.IsDeleted`
             </summary>
      <remarks>
             Added in v15.01
             </remarks>
    </member>
    <member name="M:ToSic.Sxc.DataSources.Internal.PageDataRaw.Attributes(ToSic.Eav.Data.Raw.RawConvertOptions)">
      <summary>
            Data but without Id, Guid, Created, Modified
            </summary>
    </member>
    <member name="T:ToSic.Sxc.DataSources.Internal.RoleDataRaw">
      <summary>
             Internal class to hold all the information about the role.
             until it's converted to an IEntity in the <see cref="T:ToSic.Sxc.DataSources.Roles" /> DataSource.
            
             For detailed documentation, check the docs of the underlying objects:
            
             * TODO:
             * TODO:
             Important: this is an internal object.
             We're just including in in the docs to better understand where the properties come from.
             We'll probably move it to another namespace some day.
             </summary>
      <remarks>
             Make sure the property names never change, as they are critical for the created Entity.
             </remarks>
    </member>
    <member name="M:ToSic.Sxc.DataSources.Internal.RoleDataRaw.Attributes(ToSic.Eav.Data.Raw.RawConvertOptions)">
      <summary>
            Data but without Id, Guid, Created, Modified
            </summary>
    </member>
    <member name="T:ToSic.Sxc.DataSources.Internal.SiteDataRaw">
      <summary>
             Internal class to hold all the information about the site,
             until it's converted to an IEntity in the <see cref="T:ToSic.Sxc.DataSources.Sites" /> DataSource.
            
             For detailed documentation, check the docs of the underlying objects:
            
             * [Dnn Site](TODO:https://docs.dnncommunity.org/api/DotNetNuke.Entities.Portals.PortalInfo.html)
             * [Oqtane Site](TODO:https://docs.oqtane.org/api/Oqtane.Models.Sites.html)
             
             Important: this is an internal object.
             We're just including in in the docs to better understand where the properties come from.
             We'll probably move it to another namespace some day.
             </summary>
      <remarks>
             Make sure the property names never change, as they are critical for the created Entity.
             </remarks>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Internal.SiteDataRaw.Id">
      <summary>
             The site ID.
            
             * In Dnn it's from `PortalInfo.PortalID`
             * In Oqtane it's `Site.SiteId`
             </summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Internal.SiteDataRaw.Guid">
      <summary>
             The site GUID.
            
             * In Dnn it's from `PortalInfo.GUID`
             * In Oqtane it's `Guid.Empty` as Oqtane doesn't have site GUIDs
             </summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Internal.SiteDataRaw.Name">
      <summary>
             The site name.
            
             * In Dnn it's from `PageInfo.PortalName`
             * in Oqtane it's from `Site.Name`
             </summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Internal.SiteDataRaw.Url">
      <summary>
             The public url to this site (without any trailing slashes)
            
             * In Dnn it's from `PortalAliasInfo.FullUrl` (last slash removed)
             * in Oqtane it's a combination of protocol, site-alias and path
             </summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Internal.SiteDataRaw.Languages">
      <summary>
            The site languages, comma separated.
            Can be empty ever if a <see cref="P:ToSic.Sxc.DataSources.Internal.SiteDataRaw.DefaultLanguage" /> is set, if the site itself is not multi-language.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Internal.SiteDataRaw.DefaultLanguage">
      <summary>
             The site Culture Code.
            
             * In Dnn it's from `PortalInfo.CultureCode`
             * in Oqtane it's from `Site.CultureCode`
             </summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Internal.SiteDataRaw.Created">
      <summary>
             The site creation date/time.
            
             * In Dnn it's from `PortalInfo.CreatedOnDate`
             * in Oqtane it's from `Site.CreatedOn`
             </summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Internal.SiteDataRaw.Modified">
      <summary>
             The site modification date/time.
            
             * In Dnn it's from `PortalInfo.LastModifiedOnDate`
             * in Oqtane it's from `Site.ModifiedOn`
             </summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Internal.SiteDataRaw.ContentAppId">
      <summary>
            The Content App.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.DataSources.Internal.SiteDataRaw.PrimaryAppId">
      <summary>
            The (technical) primary App, which contains things such as site metadata.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.DataSources.Internal.SiteDataRaw.Attributes(ToSic.Eav.Data.Raw.RawConvertOptions)">
      <summary>
            Data but without Id, Guid, Created, Modified
            </summary>
    </member>
    <member name="T:ToSic.Sxc.DataSources.Internal.AdamDataSourceProvider`2">
      <summary>
             Base class to provide data to the Adam DataSource.
            
             Must be overriden in each platform.
             </summary>
    </member>
    <member name="M:ToSic.Sxc.DataSources.Internal.AdamDataSourceProvider`2.MyServices.#ctor(ToSic.Lib.DI.LazySvc{ToSic.Sxc.Adam.Internal.AdamContext{`0,`1}},ToSic.Sxc.Context.Internal.ISxcContextResolver)">
      <summary>
            Note that we will use Generators for safety, because in rare cases the dependencies could be re-used to create a sub-data-source
            </summary>
    </member>
    <member name="T:ToSic.Sxc.DataSources.Internal.AppFilesDataSourceProvider">
      <summary>
             Base class to provide data to the AppFiles DataSource.
            
             Must be overriden in each platform.
             </summary>
    </member>
    <member name="M:ToSic.Sxc.DataSources.Internal.AppFilesDataSourceProvider.#ctor(ToSic.Sxc.DataSources.Internal.AppFilesDataSourceProvider.MyServices)">
      <summary>
             Base class to provide data to the AppFiles DataSource.
            
             Must be overriden in each platform.
             </summary>
    </member>
    <member name="M:ToSic.Sxc.DataSources.Internal.AppFilesDataSourceProvider.MyServices.#ctor(ToSic.Eav.Apps.IAppStates,ToSic.Eav.Apps.Integration.IAppPathsMicroSvc,ToSic.Lib.DI.Generator{ToSic.Eav.ImportExport.Internal.FileManager},ToSic.Eav.Context.ISite)">
      <summary>
            Note that we will use Generators for safety, because in rare cases the dependencies could be re-used to create a sub-data-source
            </summary>
    </member>
    <member name="M:ToSic.Sxc.DataSources.Internal.AppFilesDataSourceProvider.GetAll">
      <summary>
            FYI: The filters are not actually implemented yet.
            So the core data source doesn't have settings to configure this
            </summary>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.DataSources.Internal.AppFilesDataSourceProvider.FullNameWithoutAppFolder(System.String,ToSic.Eav.Apps.Integration.IAppPaths,System.String)">
      <summary></summary>
      <param name="path"></param>
      <param name="currentApp"></param>
      <param name="root"></param>
      <returns></returns>
    </member>
    <member name="T:ToSic.Sxc.DataSources.Internal.PagesDataSourceProvider">
      <summary>
             Base class to provide data to the Pages DataSource.
            
             Must be overriden in each platform.
             </summary>
    </member>
    <member name="M:ToSic.Sxc.DataSources.Internal.PagesDataSourceProvider.#ctor(System.String)">
      <summary>
             Base class to provide data to the Pages DataSource.
            
             Must be overriden in each platform.
             </summary>
    </member>
    <member name="M:ToSic.Sxc.DataSources.Internal.PagesDataSourceProvider.GetPagesInternal(ToSic.Lib.Coding.NoParamOrder,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            FYI: The filters are not actually implemented yet.
            So the core data source doesn't have settings to configure this
            </summary>
      <returns></returns>
    </member>
    <member name="T:ToSic.Sxc.DataSources.Internal.RolesDataSourceProvider">
      <summary>
             Base class to provide data to the RolesDataSourceProvider.
            
             Must be overriden in each platform.
             </summary>
    </member>
    <member name="M:ToSic.Sxc.DataSources.Internal.RolesDataSourceProvider.#ctor(System.String)">
      <summary>
             Base class to provide data to the RolesDataSourceProvider.
            
             Must be overriden in each platform.
             </summary>
    </member>
    <member name="M:ToSic.Sxc.DataSources.Internal.RolesDataSourceProvider.GetRolesInternal">
      <summary>
            The inner list retrieving roles. 
            </summary>
      <returns></returns>
    </member>
    <member name="T:ToSic.Sxc.DataSources.Internal.SitesDataSourceProvider">
      <summary>
             Base class to provide data to the Sites DataSource.
            
             Must be overriden in each platform.
             </summary>
    </member>
    <member name="M:ToSic.Sxc.DataSources.Internal.SitesDataSourceProvider.#ctor(ToSic.Sxc.DataSources.Internal.SitesDataSourceProvider.MyServices,System.String)">
      <summary>
             Base class to provide data to the Sites DataSource.
            
             Must be overriden in each platform.
             </summary>
    </member>
    <member name="M:ToSic.Sxc.DataSources.Internal.SitesDataSourceProvider.GetSitesInternal">
      <summary>
            So the core data source doesn't have settings to configure this
            </summary>
      <returns></returns>
    </member>
    <member name="T:ToSic.Sxc.DataSources.Internal.UsersDataSourceProvider">
      <summary>
             Base class to provide data to the UsersDataSourceProvider.
            
             Must be overriden in each platform.
             </summary>
    </member>
    <member name="M:ToSic.Sxc.DataSources.Internal.UsersDataSourceProvider.#ctor(System.String)">
      <summary>
             Base class to provide data to the UsersDataSourceProvider.
            
             Must be overriden in each platform.
             </summary>
    </member>
    <member name="M:ToSic.Sxc.DataSources.Internal.UsersDataSourceProvider.GetUsersInternal">
      <summary>
            The inner list retrieving the users.
            </summary>
      <returns></returns>
    </member>
    <member name="T:ToSic.Sxc.DataSources.Internal.Compatibility.DataPublishing">
      <summary>
            This is for data sources to determine that they can be published as JSON stream from the module.
            This was a system we used before queries.
            </summary>
    </member>
    <member name="T:ToSic.Sxc.DataSources.Internal.Compatibility.IBlockDataSource">
      <summary>
            This marks data sources which are meant for Blocks (Modules, Content-Block Instances). <br />
            They have some internal functionality which isn't published as of now.
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Data.DynamicEntity">
      <summary>
            A dynamic entity object - the main object you use when templating things in RazorComponent objects <br />
            Note that it will provide many things not listed here, usually things like `.Image`, `.FirstName` etc. based on your ContentType.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.DynamicEntity">ðŸ“– DynamicEntity</a></para></summary>
    </member>
    <member name="M:ToSic.Sxc.Data.DynamicEntity.#ctor(ToSic.Eav.Data.IEntity,ToSic.Sxc.Data.Internal.CodeDataFactory,System.Boolean)">
      <summary>
            Constructor with EntityModel and DimensionIds
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Data.DynamicEntity.ListHelper">
      <summary>
            Internal helper to make a entity behave as a list, new in 12.03
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Data.DynamicEntity.Debug">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Data.DynamicEntity.EntityId">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Data.DynamicEntity.EntityGuid">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Data.DynamicEntity.EntityTitle">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Data.DynamicEntity.EntityType">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Data.DynamicEntity.Field(System.String)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Data.DynamicEntity.Html(System.String,ToSic.Lib.Coding.NoParamOrder,System.Object,System.Nullable{System.Boolean},System.Object,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Data.DynamicEntity.IsDemoItem">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Data.DynamicEntity.Metadata">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Data.DynamicEntity.ToSic#Eav#Metadata#IHasMetadata#Metadata">
      <summary>
            Explicit implementation, so it's not really available on DynamicEntity, only when cast to IHasMetadata
            This is important, because it uses the same name "Metadata"
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.DynamicEntity.ToSic#Eav#Metadata#IHasMetadata#Metadata">ðŸ“– ToSic#Eav#Metadata#IHasMetadata#Metadata</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Data.DynamicEntity.Presentation">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Data.DynamicEntity.Parents(System.String,System.String)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Data.DynamicEntity.Children(System.String,System.String)">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Data.DynamicEntity.IsPublished">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Data.DynamicEntity.GetDraft">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Data.DynamicEntity.GetPublished">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Data.DynamicEntity.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Data.DynamicEntity.GetHashCode">
      <summary>
            This is used by various equality comparison. 
            Since we define two DynamicEntities to be equal when they host the same entity, this uses the Entity.HashCode
            </summary>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Data.DynamicEntity.Equals(ToSic.Sxc.Data.IDynamicEntity)">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Data.DynamicEntity.Count">
      <summary>
            Shows how many Entities are available if you use foreach. Will usually return an `int`.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.DynamicEntity.Count">ðŸ“– Count</a></para></summary>
      <remarks>
            If the Entity contains a field `Count`, that will be returned instead.
            </remarks>
      <returns>Usually an `int` but if the Entity contains such a property, then it has the type of that property. </returns>
    </member>
    <member name="P:ToSic.Sxc.Data.DynamicEntity.Toolbar">
      <inheritdoc />
    </member>
    <member name="T:ToSic.Sxc.Data.IDynamicEntity">
      <summary>
            This is a wrapper for IEntity objects. It provides nicer access to underlying properties
            and automatically handles things like multi-language etc.
            The underlying IEntity <see cref="T:ToSic.Eav.Data.IEntity" /> is in the Entity property. 
            <blockquote>
            Normally you will use it without caring about these internals. <br />
            Please check @HowTo.DynamicCode.DynamicEntity
            </blockquote><para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.IDynamicEntity">ðŸ“– IDynamicEntity</a></para></summary>
    </member>
    <member name="M:ToSic.Sxc.Data.IDynamicEntity.Field(System.String)">
      <summary>
            Get a Field-object of a property of this entity, to use with services like the <see cref="T:ToSic.Sxc.Services.IImageService" /> which also need more information like the metadata.
            </summary>
      <param name="name"></param>
      <returns></returns>
      <remarks>
            History: Added in v13.10
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Data.IDynamicEntity.Metadata">
      <summary>
            The type name of the current entity. This provides the nice name like "Person" and not the technical internal StaticName
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.IDynamicEntity.Metadata">ðŸ“– Metadata</a></para></summary>
      <remarks>
            * Added in v13
            * Changed type name to `IMetadata` from `IDynamicMetadata` in 16.02; same type, different type name
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Data.IDynamicEntity.GetDraft">
      <summary>
            Get the draft item of this item if this is a content-item which is published, and has a draft.
            </summary>
      <returns>Returns a dynamic entity if there is a draft, or null if there is no draft.</returns>
    </member>
    <member name="M:ToSic.Sxc.Data.IDynamicEntity.GetPublished">
      <summary>
            Get the published item of this item if this is a content-item which is draft, and has a published.
            </summary>
      <returns>Returns a dynamic entity if there is a draft, or null if there is no draft.</returns>
    </member>
    <member name="P:ToSic.Sxc.Data.IDynamicEntity.IsPublished">
      <summary>
            Tells us if this data item is published or still draft. Default is true.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.IDynamicEntity.IsPublished">ðŸ“– IsPublished</a></para></summary>
    </member>
    <member name="M:ToSic.Sxc.Data.IDynamicEntity.Parents(System.String,System.String)">
      <summary>
            A dynamic list of entities which point to this item. Important for LINQ style querying or just
            working with various lists. Note that for getting child items of this item you
            can just use the properties, like content.Authors. <br />
            Please check the tutorials on 2sxc.org/dnn-tutorials/ for more info. 
            </summary>
      <param name="type">Optional type filter - would only return items of this type. </param>
      <param name="field">Optional field filter - would only return items that point to the current item in a specific field name.</param>
      <returns>A list of all items pointing here (filtered), converted to DynamicEntity for convenience.</returns>
      <remarks>New in 9.42 - note also that the parameter-order is reversed to the Children()</remarks>
    </member>
    <member name="M:ToSic.Sxc.Data.IDynamicEntity.Children(System.String,System.String)">
      <summary>
            A dynamic list of sub-items. Important for LINQ style querying or just
            working with various lists. Note that for getting child items of this item you
            can just use the properties, like content.Authors. <br />
            But using Children("Authors", typeName) gives you the ability to restrict to a type.  <br />
            Please check the tutorials on 2sxc.org/dnn-tutorials/ for more info. 
            </summary>
      <param name="type">Optional type filter - would only return items of this type. </param>
      <param name="field">Optional field filter - would only return items that point to the current item in a specific field name.</param>
      <returns>A list of all items pointing here (filtered), converted to DynamicEntity for convenience.</returns>
      <remarks>New in 10.21.00 - note also that the parameter-order is reversed to the Parents()</remarks>
    </member>
    <member name="P:ToSic.Sxc.Data.IDynamicEntity.Presentation">
      <summary>
            Contains presentation settings for an item - if they exist.
            This is a functionality of the CMS, where an instance of an item can be configured to show in a specific way.
            Normally it's used when something like an address has various show-settings (like how the map should visualize this address).
            The presentation-info is therefor not-null IF <br />
            - the content <em>belongs</em> to this module instance <br />
            - the view-configuration of this module is configured to have presentation items <br />
            - there is either a default presentation configured in the view, or the user has manually edited the presentation settings
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.IDynamicEntity.Presentation">ðŸ“– Presentation</a></para></summary>
      <returns>
            An <see cref="T:ToSic.Sxc.Data.IDynamicEntity" /> with the presentation item (or the demo-presentation), otherwise null.
            </returns>
    </member>
    <member name="P:ToSic.Sxc.Data.IDynamicEntity.AnyProperty">
      <inheritdoc cref="P:ToSic.Sxc.Data.Internal.Docs.IDynamicAnythingDocs.AnyProperty" />
    </member>
    <member name="P:ToSic.Sxc.Data.IDynamicEntity.IsDemoItem">
      <summary>
            Many templates show demo data.
            If the template code must know if it's the demo item or
            real data, use `.IsDemoItem`.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.IDynamicEntity.IsDemoItem">ðŸ“– IsDemoItem</a></para></summary>
      <returns>
            True if this is the item configured in the view-settings, false if not.
            </returns>
      <remarks>New in 10.07 on IDynamicEntity, new in 16.02 on ITypedEntity</remarks>
    </member>
    <member name="M:ToSic.Sxc.Data.IDynamicEntity.Html(System.String,ToSic.Lib.Coding.NoParamOrder,System.Object,System.Nullable{System.Boolean},System.Object,System.Boolean)">
      <summary>
            Show a field in the expected / best possible way.
            As of now it's meant for WYSIWYG fields with Very-Rich Text.
            See <a href="https://go.2sxc.org/xref17?xref=NetCode.DynamicData.DynamicEntityHtml">NetCode.DynamicData.DynamicEntityHtml</a></summary>
      <param name="name">the field name</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="container">
            A wrapper tag for the result.
            It's either a RazorBlade tag such as `Kit.HtmlTag.Div()`, a string such as `span` or an empty string `` to indicate no container.
            If not set it will default to to a div-tag.
            See <a href="https://go.2sxc.org/xref17?xref=NetCode.DynamicData.DynamicEntityHtml">docs</a></param>
      <param name="toolbar">Override default toolbar behavior on this field. See <a href="https://go.2sxc.org/xref17?xref=NetCode.DynamicData.DynamicEntityHtml">docs</a></param>
      <param name="imageSettings">Settings for resizing. Default is `Wysiwyg` but it can also be `Content` or a settings object.</param>
      <param name="debug">Activate debug visualization to better see alignments and such.</param>
      <returns></returns>
      <remarks>
            * Added in 2sxc 16.01
            * Only works on Razor files inheriting from Hybrid14 or newer
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Data.IDynamicEntity.EntityId">
      <summary>
            The ID of the underlying entity.
            Use it for edit-functionality or just to have a unique number for this item.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.IDynamicEntity.EntityId">ðŸ“– EntityId</a></para></summary>
      <remarks>If the entity doesn't exist, it will return 0</remarks>
    </member>
    <member name="P:ToSic.Sxc.Data.IDynamicEntity.EntityGuid">
      <summary>
            The guid of the underlying entity.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.IDynamicEntity.EntityGuid">ðŸ“– EntityGuid</a></para></summary>
      <remarks>If the entity doesn't exist, it will return an empty guid</remarks>
    </member>
    <member name="P:ToSic.Sxc.Data.IDynamicEntity.EntityTitle">
      <summary>
            The title of this item. This is always available no matter what the underlying field for the title is. 
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.IDynamicEntity.EntityTitle">ðŸ“– EntityTitle</a></para></summary>
      <returns>
            The title of the underlying entity.
            In rare cases where no title-field is known, it can be null.
            It can also be null if there is no underlying entity. 
            </returns>
      <remarks>This returns a string which is usually what's expected. In previous versions (before v15) 2sxc it returned an object.</remarks>
    </member>
    <member name="P:ToSic.Sxc.Data.IDynamicEntity.EntityType">
      <summary>
            The type name of the current entity. This provides the nice name like "Person" and not the technical internal StaticName
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.IDynamicEntity.EntityType">ðŸ“– EntityType</a></para></summary>
    </member>
    <member name="M:ToSic.Sxc.Data.IDynamicEntity.Get(System.String)">
      <inheritdoc cref="M:ToSic.Sxc.Data.Internal.Docs.DynamicEntityDocs.Get(System.String)" />
    </member>
    <member name="M:ToSic.Sxc.Data.IDynamicEntity.Get(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.Boolean,System.Nullable{System.Boolean})">
      <inheritdoc cref="!:DynamicEntityDocs.Get(string, string, string, bool, bool?)" />
    </member>
    <member name="M:ToSic.Sxc.Data.IDynamicEntity.Get``1(System.String)">
      <inheritdoc cref="M:ToSic.Sxc.Data.Internal.Docs.DynamicEntityDocs.Get``1(System.String)" />
    </member>
    <member name="M:ToSic.Sxc.Data.IDynamicEntity.Get``1(System.String,ToSic.Lib.Coding.NoParamOrder,``0)">
      <inheritdoc cref="!:DynamicEntityDocs.Get&lt;TValue&gt;(string, string, TValue)" />
    </member>
    <member name="T:ToSic.Sxc.Data.DynamicJacket">
      <summary>
            Case insensitive dynamic read-object for JSON. <br />
            Used in various cases where you start with JSON and want to
            provide the contents to custom code without having to mess with
            JS/C# code style differences. <br />
            You will usually do things like `AsDynamic(jsonString).FirstName` etc.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.DynamicJacket">ðŸ“– DynamicJacket</a></para></summary>
    </member>
    <member name="M:ToSic.Sxc.Data.DynamicJacket.#ctor(ToSic.Sxc.Data.Internal.Wrapper.CodeJsonWrapper,ToSic.Sxc.Data.PreWrapJsonObject)">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Data.DynamicJacket.Count">
      <summary>
            Count array items or object properties
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.DynamicJacket.Count">ðŸ“– Count</a></para></summary>
    </member>
    <member name="M:ToSic.Sxc.Data.DynamicJacket.GetEnumerator">
      <inheritdoc />
      <summary>
            Enable enumeration. Will return the keys, not the values. <br />
            Use the [key] accessor to get the values as <see cref="T:ToSic.Sxc.Data.DynamicJacket" /> or <see cref="T:ToSic.Sxc.Data.DynamicJacketList" /></summary>
      <returns>the string names of the keys</returns>
    </member>
    <member name="P:ToSic.Sxc.Data.DynamicJacket.Item(System.String)">
      <summary>
            Access the properties of this object.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.DynamicJacket.Item(System.String)">ðŸ“– String)</a></para></summary>
      <remarks>
            Note that <strong>this</strong> accessor is case insensitive
            </remarks>
      <param name="key">the key, case-insensitive</param>
      <returns>A value (string, int etc.), <see cref="T:ToSic.Sxc.Data.DynamicJacket" /> or <see cref="T:ToSic.Sxc.Data.DynamicJacketList" /></returns>
    </member>
    <member name="M:ToSic.Sxc.Data.DynamicJacket.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>
            Performs a case-insensitive value look-up
            </summary>
      <param name="binder">.net binder object</param>
      <param name="result">usually a <see cref="T:ToSic.Sxc.Data.DynamicJacket" />, <see cref="T:ToSic.Sxc.Data.DynamicJacketList" /> or null</param>
      <returns>always returns true, to avoid errors</returns>
    </member>
    <member name="P:ToSic.Sxc.Data.DynamicJacket.Item(System.Int32)">
      <inheritdoc />
    </member>
    <member name="T:ToSic.Sxc.Data.DynamicJacketBase">
      <summary>
            Base class for DynamicJackets. You won't use this, just included in the docs. <br />
            To check if something is an array or an object, use "IsArray"
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.DynamicJacketBase">ðŸ“– DynamicJacketBase</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Data.DynamicJacketBase.IsList">
      <summary>
            Check if it's an array.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.DynamicJacketBase.IsList">ðŸ“– IsList</a></para></summary>
      <returns>True if an array/list, false if an object.</returns>
    </member>
    <member name="M:ToSic.Sxc.Data.DynamicJacketBase.GetEnumerator">
      <summary>
            Enable enumeration. When going through objects (properties) it will return the keys, not the values. <br />
            Use the [key] accessor to get the values as <see cref="T:ToSic.Sxc.Data.DynamicJacketList" /> or <see cref="N:ToSic.Sxc.Data" /></summary>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Data.DynamicJacketBase.System#Collections#IEnumerable#GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Data.DynamicJacketBase.Get(System.String)">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Data.DynamicJacketBase.Count">
      <summary>
            Count array items or object properties
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.DynamicJacketBase.Count">ðŸ“– Count</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Data.DynamicJacketBase.Item(System.Int32)">
      <summary>
            Not yet implemented accessor - must be implemented by the inheriting class.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.DynamicJacketBase.Item(System.Int32)">ðŸ“– Int32)</a></para></summary>
      <param name="index"></param>
      <returns>a <see cref="T:System.NotImplementedException" /></returns>
    </member>
    <member name="M:ToSic.Sxc.Data.DynamicJacketBase.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>
            Fake property binder - just ensure that simple properties don't cause errors. <br />
            Must be overriden in inheriting objects
            like <see cref="T:ToSic.Sxc.Data.DynamicJacketList" />, <see cref="T:ToSic.Sxc.Data.DynamicJacket" /></summary>
      <param name="binder">.net binder object</param>
      <param name="result">always null, unless overriden</param>
      <returns>always returns true, to avoid errors</returns>
    </member>
    <member name="T:ToSic.Sxc.Data.DynamicJacketBase`1">
      <summary>
            Base class for DynamicJackets. You won't use this, just included in the docs. <br />
            To check if something is an array or an object, use "IsArray"
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.DynamicJacketBase`1">ðŸ“– DynamicJacketBase`1</a></para></summary>
      <typeparam name="T">The underlying type, either a JObject or a JToken</typeparam>
    </member>
    <member name="M:ToSic.Sxc.Data.DynamicJacketBase`1.#ctor(ToSic.Sxc.Data.Internal.Wrapper.CodeJsonWrapper,`0)">
      <summary>
            Primary constructor expecting a internal data object
            </summary>
      <param name="wrapper">Wrapper helper</param>
      <param name="originalData">the original data we're wrapping</param>
    </member>
    <member name="M:ToSic.Sxc.Data.DynamicJacketBase`1.System#Collections#IEnumerable#GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Data.DynamicJacketBase`1.ToString">
      <summary>
            If the object is just output, it should show the underlying json string
            </summary>
      <returns>the inner json string</returns>
    </member>
    <member name="T:ToSic.Sxc.Data.DynamicJacketList">
      <summary>
            This is a DynamicJacket for JSON arrays. You can enumerate through it. 
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.DynamicJacketList">ðŸ“– DynamicJacketList</a></para></summary>
    </member>
    <member name="M:ToSic.Sxc.Data.DynamicJacketList.#ctor(ToSic.Sxc.Data.Internal.Wrapper.CodeJsonWrapper,ToSic.Sxc.Data.PreWrapJsonArray)">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Data.DynamicJacketList.IsList">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Data.DynamicJacketList.Count">
      <summary>
            Count array items or object properties
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.DynamicJacketList.Count">ðŸ“– Count</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Data.DynamicJacketList.Item(System.Int32)">
      <summary>
            Access the items in this object - but only if the underlying object is an array. 
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.DynamicJacketList.Item(System.Int32)">ðŸ“– Int32)</a></para></summary>
      <param name="index">array index</param>
      <returns>the item or an error if not found</returns>
    </member>
    <member name="T:ToSic.Sxc.Data.IField">
      <summary>
             This describes a field-property of an item/entity. 
             It's used for APIs which can need to know more about the field holding an item, like:
            
             - The field name and parent reference
             - The values in raw and converted
             - Any metadata of the field
             
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.IField">ðŸ“– IField</a></para></summary>
      <remarks>
             * Created in v13.10
             * In v16.02 renamed from `IDynamicField` to `IField` as it's not dynamic any more
                 Kind of a breaking change, but shouldn't affect any code out there as the type name is not used
             * In 16.02 changed types of `Value` and `Raw` to `object` - previously `dynamic`
             </remarks>
    </member>
    <member name="P:ToSic.Sxc.Data.IField.Name">
      <summary>
            The field name
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.IField.Name">ðŸ“– Name</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Data.IField.Parent">
      <summary>
            The parent object of this field
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.IField.Parent">ðŸ“– Parent</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Data.IField.Raw">
      <summary>
            The raw value of the field, without any modifications.
            If the value is `file:22` then Raw will also return `file:22`.
            To get the value as a link, use <see cref="P:ToSic.Sxc.Data.IField.Value" /><para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.IField.Raw">ðŸ“– Raw</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Data.IField.Value">
      <summary>
            The value of the field with modifications.
            For example, `file:22` would be converted to the real link.
            To get the raw value, use <see cref="P:ToSic.Sxc.Data.IField.Raw" /><para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.IField.Value">ðŸ“– Value</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Data.IField.Metadata">
      <summary>
             Metadata of the thing in the field - if it has such metadata.
            
             The object will never be null, but it can of course not have any data if there is no metadata. 
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.IField.Metadata">ðŸ“– Metadata</a></para></summary>
    </member>
    <member name="T:ToSic.Sxc.Data.Internal.Convert.ConvertToEavLightWithCmsInfo">
      <summary>
            Convert various types of entities (standalone, dynamic, in streams, etc.) to Dictionaries <br />
            Mainly used for serialization scenarios, like in WebApis.
            </summary>
      <remarks>
            Standard constructor, important for opening this class in dependency-injection
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Convert.ConvertToEavLightWithCmsInfo.#ctor(ToSic.Eav.DataFormats.EavLight.ConvertToEavLight.MyServices)">
      <summary>
            Convert various types of entities (standalone, dynamic, in streams, etc.) to Dictionaries <br />
            Mainly used for serialization scenarios, like in WebApis.
            </summary>
      <remarks>
            Standard constructor, important for opening this class in dependency-injection
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Data.Internal.Convert.ConvertToEavLightWithCmsInfo.WithEdit">
      <summary>
            Determines if we should use edit-information
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Convert.ConvertToEavLightWithCmsInfo.AddEditInfo(ToSic.Eav.Data.IEntity,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Add additional information in case we're in edit mode
            </summary>
      <param name="entity"></param>
      <param name="dictionary"></param>
    </member>
    <member name="T:ToSic.Sxc.Data.Internal.Convert.DynamicJsonConverter">
      <summary>
             This is a serializer-helper which System.Text.Json will pick up automatically when converting a DynamicJacket or DynamicReadObject to JSON
             </summary>
      <remarks>
            https://learn.microsoft.com/en-us/dotnet/standard/serialization/system-text-json/converters-how-to?pivots=dotnet-6-0
             </remarks>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Convert.IHasJsonSource.JsonSource">
      <summary>
            The inner json source to use.
            Will only have an effect if the Attribute [JsonConverter(typeof(DynamicJsonConverter))] is applied.
            </summary>
      <remarks>
            This must be a method - not a property - for safety.
            This ensures it doesn't result in being serialized itself. 
            </remarks>
      <returns></returns>
    </member>
    <member name="P:ToSic.Sxc.Data.Internal.Decorators.EntityInBlockDecorator.Presentation">
      <summary>
            Presentation entity of this content-item.
            Important to keep content and presentation linked together
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Data.Internal.Decorators.EntityInBlockDecorator.IsDemoItem">
      <summary>
            Info if the item is a plain demo/fake item, or if it was added on purpose.
            new 2019-09-18 trying to mark demo-items for better detection in output #1792
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Data.Internal.Decorators.EntityInListDecorator">
      <summary>
            Important: for now it should be abstract, because we're not sure in which cases
            something will check if the derived decorator is there, and then get wrong conclusions
            So for now, only the EntityInBlockDecorator should be used anywhere explicitly
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Decorators.EntityInListDecorator.#ctor(System.String,System.Int32,ToSic.Eav.Data.IEntity)">
      <summary>
            Important: for now it should be abstract, because we're not sure in which cases
            something will check if the derived decorator is there, and then get wrong conclusions
            So for now, only the EntityInBlockDecorator should be used anywhere explicitly
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Data.Internal.Decorators.EntityInListDecorator.SortOrder">
      <summary>
            The position in the list
            </summary>
      <remarks>
            This has been in use since ca. 2sxc 2.0
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Data.Internal.Decorators.EntityInListDecorator.Field">
      <summary>
            The field which has the list containing this item.
            </summary>
      <remarks>
            Added in 2sxc 11.01
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Data.Internal.Decorators.EntityInListDecorator.ParentGuid">
      <summary>
             The parent item which has the list containing this item.
             </summary>
      <remarks>
             Important: as of now this is NOT the content-block guid, and shouldn't be because there is code checking for this to be empty
             on content-blocks.
            
             Added in 2sxc 11.01
             </remarks>
    </member>
    <member name="T:ToSic.Sxc.Data.Internal.Docs.DynamicEntityDocs">
      <summary>
            This is minor cross-concerns aspect of Dynamic-Entity-like objects
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Docs.DynamicEntityDocs.Get(System.String)">
      <summary>
            Get a value of the entity. Usually you will prefer the quick access like
            @content.FirstName - which will give you the same things as content.Get("FirstName").
            There are two cases to use this:
            - when you dynamically assemble the field name in your code, like when using App.Resources or similar use cases.
            - to access a field which has a conflicting name with this object, like Get("Parents")
            </summary>
      <param name="name"></param>
      <returns>An object which can be either a string, number, boolean or List&lt;IDynamicEntity&gt;, depending on the field type. Will return null if the field was not found. </returns>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Docs.DynamicEntityDocs.Get(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.Boolean,System.Nullable{System.Boolean})">
      <summary>
            Get a property using the string name. Only needed in special situations, as most cases can use the object.name directly
            </summary>
      <param name="name">the property name like `Image` - or path like `Author.Name` (new v15)</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="language">Optional language code - like "de-ch" to prioritize that language</param>
      <param name="convertLinks">Optionally turn off if links like file:72 are looked up to a real link. Default is true.</param>
      <param name="debug">Set true to see more details in <a href="https://go.2sxc.org/xref17?xref=NetCode.Debug.Insights.Index">Insights</a> how the value was retrieved.</param>
      <returns>a dynamically typed result, can be string, bool, etc.</returns>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Docs.DynamicEntityDocs.Get``1(System.String)">
      <summary>
            Get a value using the name - and cast it to the expected strong type.
            For example to get an int even though it's stored as decimal.
            </summary>
      <typeparam name="TValue">The expected type, like `string`, `int`, etc.</typeparam>
      <param name="name">the property name like `Image` - or path like `Author.Name` (new v15)</param>
      <returns>The typed value, or the `default` like `null` or `0` if casting isn't possible.</returns>
      <remarks>Added in v15</remarks>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Docs.DynamicEntityDocs.Get``1(System.String,ToSic.Lib.Coding.NoParamOrder,``0)">
      <summary>
            Get a value using the name - and cast it to the expected strong type.
            For example to get an int even though it's stored as decimal.
            
            Since the parameter `fallback` determines the type `TValue` you can just write this like
            `Content.Get("Title", fallback: "no title")
            </summary>
      <typeparam name="TValue">
            The expected type, like `string`, `int`, etc.
            Note that you don't need to specify it, if you specify the `fallback` property.
            </typeparam>
      <param name="name">the property name like `Image` - or path like `Author.Name` (new v15)</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">the fallback value to provide if not found</param>
      <returns>The typed value, or the `default` like `null` or `0` if casting isn't possible.</returns>
      <remarks>Added in v15</remarks>
    </member>
    <member name="P:ToSic.Sxc.Data.Internal.Docs.IDynamicAnythingDocs.AnyProperty">
      <summary>
            A Dynamic Entity always contains an item of your data - a book, person, blog-post or a piece of content.
            Since the object is dynamic, you can just use `.IsFemale` or whatever other property your item has.
            It is treated as a `dynamic` so you can just output it, or cast it to the expected type.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Docs.ITypedRelationshipsDocs.Child(System.String,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean})">
      <summary>
            A single item from a field.
            If the field doesn't exist or is empty, will return null.
            </summary>
      <param name="name">Name of the field</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="required">throw error if `name` doesn't exist, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">NetCode.Conventions.PropertiesRequired</a></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Docs.ITypedRelationshipsDocs.Children(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.Nullable{System.Boolean})">
      <summary>
            A **typed** list of sub-items. Important for LINQ style querying or just
            working with various lists. Note that for getting child items of this item you
            can just use the properties, like content.Authors. <br />
            But using Children("Authors", typeName) gives you the ability to restrict to a type.  <br />
            Please check the tutorials on 2sxc.org/dnn-tutorials/ for more info. 
            </summary>
      <param name="field">Optional field filter - would only return items that point to the current item in a specific field name.</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="type">Optional type filter - would only return items of this type. </param>
      <param name="required">throw error if `name` doesn't exist, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">NetCode.Conventions.PropertiesRequired</a></param>
      <returns>A list of all items pointing here (filtered), converted to DynamicEntity for convenience.</returns>
      <remarks>Note that the parameter-order is reversed to the Parents()</remarks>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Docs.ITypedRelationshipsDocs.Parent(ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean},System.String,System.String)">
      <summary>
            Get either the _current_ parent or the first parent which would be found on `.Parents(...)`.
            </summary>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="current">if set to `true`, will get the Item which created the current item (the parent) which called `.Child(...)` or `.Children(...)`</param>
      <param name="type">Optional type filter - would only return items of this type. </param>
      <param name="field">Optional field filter - would only return items that point to the current item in a specific field name.</param>
      <returns>_either_ the current parent _or_ the first parent returned by the same `.Parents(...)` call.</returns>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Docs.ITypedRelationshipsDocs.Parents(System.String,ToSic.Lib.Coding.NoParamOrder,System.String)">
      <summary>
            A **typed** list of entities which point to this item. Important for LINQ style querying or just
            working with various lists. Note that for getting child items of this item you
            can just use the properties, like content.Authors. <br />
            Please check the tutorials on 2sxc.org/dnn-tutorials/ for more info. 
            </summary>
      <param name="type">Optional type filter - would only return items of this type. </param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="field">Optional field filter - would only return items that point to the current item in a specific field name.</param>
      <returns>A list of all items pointing here (filtered), converted to DynamicEntity for convenience.</returns>
      <remarks>Note that the parameter-order is reversed to the Children()</remarks>
    </member>
    <member name="T:ToSic.Sxc.Data.Internal.Dynamic.DynamicEntityListHelper">
      <summary>
            This is a helper in charge of the list-behavior of a DynamicEntity
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Data.Internal.Dynamic.WrapDictionaryDynamic`2">
      <summary></summary>
      <remarks>
            Will always return true even if the property doesn't exist, in which case it resolves to null.
            </remarks>
    </member>
    <member name="T:ToSic.Sxc.Data.Internal.Dynamic.WrapObjectDynamic">
      <summary></summary>
      <remarks>
            Will always return a value even if the property doesn't exist, in which case it resolves to null.
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Dynamic.WrapObjectDynamic.FindPropertyInternal(ToSic.Eav.Data.PropertyLookup.PropReqSpecs,ToSic.Eav.Data.PropertyLookup.PropertyLookupPath)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.CodeDataFactory.GetAdamManager">
      <summary>
            Special helper - if the DynamicCode is generated by the service or used in a WebApi there is no block, but we can figure out the context.
            </summary>
      <returns></returns>
      <exception cref="T:System.Exception"></exception>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.CodeDataFactory.AsCustom``1(ToSic.Eav.Data.ICanBeEntity,ToSic.Lib.Coding.NoParamOrder,System.Boolean)">
      <summary>
            EXPERIMENTAL
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.CodeDataFactory.AsCustom(System.Type,ToSic.Eav.Data.ICanBeEntity,ToSic.Lib.Coding.NoParamOrder,System.Boolean)">
      <summary>
             WIP / experimental, would be for types which are not as T, but as a type-object.
             Not in use, so not fully tested.
            
             Inspired by https://stackoverflow.com/questions/3702916/is-there-a-typeof-inverse-operation
             </summary>
      <param name="t"></param>
      <param name="source"></param>
      <param name="protector"></param>
      <param name="mock"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.CodeDataFactory.AsCustomList``1(System.Collections.Generic.IEnumerable{ToSic.Eav.Data.ICanBeEntity},ToSic.Lib.Coding.NoParamOrder,System.Boolean)">
      <summary>
            EXPERIMENTAL
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.CodeDataFactory.CodeAsDyn(ToSic.Eav.Data.IEntity)">
      <summary>
            Implement AsDynamic for DynamicCode - not to be used in internal APIs.
            Always assumes Strict is false
            </summary>
      <param name="entity"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.CodeDataFactory.AsDynamicFromEntities(System.Collections.Generic.IEnumerable{ToSic.Eav.Data.IEntity},System.Boolean)">
      <summary>
            Convert a list of Entities into a DynamicEntity.
            Only used in DynamicCodeRoot.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.CodeDataFactory.CodeAsDynList(System.Object,System.Boolean)">
      <summary>
            Convert any object into a dynamic list.
            Only used in Dynamic Code for the public API.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.CodeDataFactory.AsDynamicFromObject(System.Object,System.Boolean)">
      <summary>
            Convert any object into a dynamic object.
            Only used in Dynamic Code for the public API.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.CodeDataFactoryExtensions.GetServiceKitOrThrow(ToSic.Sxc.Data.Internal.CodeDataFactory,System.String)">
      <summary>
            Will check if the CodeDataFactory exists and try to get the ServiceKit - or throw an error. 
            </summary>
      <exception cref="T:System.NotSupportedException"></exception>
    </member>
    <member name="P:ToSic.Sxc.Data.Internal.CodeDataServices.ValueConverterOrNull">
      <summary>
            The ValueConverter is used to parse links in the format like "file:72"
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Data.Internal.CodeDataServices.RenderServiceGenerator">
      <summary>
            This is used in special cases where static Render is called.
            It's not elegant, but necessary to maintain old code.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Data.Internal.CodeDataServices.Scrub">
      <summary>
            This is provided so that ITypedItems can use Scrub in the String APIs
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Data.Internal.SubDataFactory">
      <summary>
            This helps create sub-items for a specific context, obeying the rules of the context
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.SubDataFactory.#ctor(ToSic.Sxc.Data.Internal.CodeDataFactory,System.Boolean,ToSic.Lib.Logging.ICanDebug)">
      <summary>
            This helps create sub-items for a specific context, obeying the rules of the context
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.SubDataFactory.SubDynEntityOrNull(ToSic.Eav.Data.IEntity)">
      <summary>
            Generate a dynamic entity based on an IEntity.
            Used in various cases where a property would return an IEntity, and the Razor should be able to continue in dynamic syntax
            </summary>
      <param name="contents"></param>
      <returns></returns>
    </member>
    <member name="P:ToSic.Sxc.Data.Internal.Field.Name">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Data.Internal.Field.Raw">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Data.Internal.Field.Value">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Data.Internal.Field.Url">
      <inheritdoc />
    </member>
    <member name="T:ToSic.Sxc.Data.Internal.HasLink">
      <summary>
            Special helper object pass around a url when it started as a string
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Data.Internal.ICanBeItem">
      <summary>
             This is just a helper interface.
             Reason is that we have different types of objects representing real entity-data such as:
             
             * <see cref="T:ToSic.Sxc.Data.IDynamicEntity" />
             * <see cref="T:ToSic.Sxc.Data.ITypedItem" />
            
             To make sure that APIs which use this have a consistent structure, these objects all implement this interface.
             </summary>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.ICanBeItem.TryGetBlockContext">
      <summary>
            Important: Always implement explicitly, so it doesn't appear in the API
            </summary>
      <returns></returns>
    </member>
    <member name="T:ToSic.Sxc.Data.Internal.IHasKeys">
      <summary>
            Interface for things that can check keys and/or existence of values.
            The name isn't quite ideal, but it's not too important as it's not public. 
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.IHasKeys.ContainsKey(System.String)">
      <summary>
            Check if this typed object has a property of this specified name.
            It's case-insensitive.
            </summary>
      <param name="name">the name like `Image`; some objects also support path to sub-property like `Author.Name`</param>
      <returns></returns>
      <remarks>Adding in 16.03 (WIP)</remarks>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.IHasKeys.Keys(ToSic.Lib.Coding.NoParamOrder,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Get all the keys available in this Model (all the parameters passed in).
            This is used to sometimes run early checks if all the expected parameters have been provided.
            </summary>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="only">
            Only return the keys specified here, if found.
            Typical use: `only: new [] { "Key1", "Key2" }`.
            Useful to check if _all_ or _any_ specific keys exist.
            </param>
      <returns></returns>
      <remarks>Added in 16.03</remarks>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.IHasKeys.IsEmpty(System.String,ToSic.Lib.Coding.NoParamOrder)">
      <summary>
             Check if this typed object has a property of this specified name, and has real data.
             The opposite version of this is `IsNotEmpty(...)`
            
             &gt; [!IMPORTANT]
             &gt; This method is optimized for use in Razor-like scenarios.
             &gt; It's behavior is super-useful but maybe not always expected.
             &gt;
             &gt; * If the value is a string, and is empty or only contains whitespace (even `&amp;nbsp;`) it is regarded as empty.
             &gt; * If the returned value is an empty _list_ (eg. a field containing relationships, without any items in it) it is regarded as empty.
            
             If you need a different kind of check, just `.Get(...)` the value and perform the checks in your code.
             </summary>
      <param name="name">the property name like `Image`; some objects also support path to sub-property like `Author.Name`</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <returns>`true` if the property exists and has a real value. If it would return an empty list, it will also return `false`</returns>
      <remarks>Adding in 16.03 (WIP)</remarks>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.IHasKeys.IsNotEmpty(System.String,ToSic.Lib.Coding.NoParamOrder)">
      <summary>
             Check if this typed object has a property of this specified name, and has real data.
             The opposite version of this is `IsEmpty(...)`
             
             &gt; [!IMPORTANT]
             &gt; This method is optimized for use in Razor-like scenarios.
             &gt; It's behavior is super-useful but maybe not always expected.
             &gt;
             &gt; * If the value is a string, and is empty or only contains whitespace (even `&amp;nbsp;`) it is regarded as empty.
             &gt; * If the returned value is an empty _list_ (eg. a field containing relationships, without any items in it) it is regarded as empty.
            
             If you need a different kind of check, just `.Get(...)` the value and perform the checks in your code.
             </summary>
      <param name="name">the property name like `Image`; some objects also support path to sub-property like `Author.Name`</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <returns>`true` if the property exists and has a real value. If it would return an empty list, it will also return `false`</returns>
      <remarks>Adding in 16.03 (WIP)</remarks>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Metadata.Metadata.ToSic#Sxc#Data#ITypedItem#Folder(System.String,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean})">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Data.Internal.Metadata.Metadata.ToSic#Sxc#Data#ITypedItem#Presentation">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Data.Internal.Metadata.Metadata.ToSic#Sxc#Data#ITypedItem#Metadata">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Metadata.Metadata.ToSic#Sxc#Data#ITypedItem#Parents(ToSic.Lib.Coding.NoParamOrder,System.String,System.String)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Metadata.Metadata.ToSic#Sxc#Data#ITypedItem#Children(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.Nullable{System.Boolean})">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Metadata.Metadata.ToSic#Sxc#Data#ITypedItem#Child(System.String,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean})">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Metadata.Metadata.ToSic#Sxc#Data#ITypedItem#Child``1(System.String,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean})">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Metadata.Metadata.ToSic#Sxc#Data#ITypedItem#Children``1(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.Nullable{System.Boolean})">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Metadata.Metadata.ToSic#Sxc#Data#ITypedItem#Parent``1(ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean},System.String,System.String)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Metadata.Metadata.ToSic#Sxc#Data#ITypedItem#Parents``1(ToSic.Lib.Coding.NoParamOrder,System.String,System.String)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Metadata.Metadata.ToSic#Sxc#Data#ITypedItem#Picture(System.String,ToSic.Lib.Coding.NoParamOrder,System.Object,System.Object,System.Object,System.String,System.String,System.String,System.Object,System.String,System.Object,System.Object,System.Object)">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Data.Internal.Stack.DynamicStack.Debug">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Stack.DynamicStack.GetContents">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Stack.DynamicStack.GetSource(System.String)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Stack.DynamicStack.GetStack(System.String[])">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Typed.TypedItemOfEntity.GetHashCode">
      <summary>
            This is used by various equality comparison. 
            Since we define two object to be equal when they host the same contents, this determines the hash based on the contents
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Typed.TypedItemOfEntity.Equals(System.Object)">
      <summary>
            Ensure that the equality check is done correctly.
            If two objects wrap the same item, they will be considered equal.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Typed.TypedItemOfEntity.ToSic#Sxc#Data#ITypedItem#Folder(System.String,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean})">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Data.Internal.Typed.TypedItemOfEntity.ToSic#Sxc#Data#ITypedItem#Presentation">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Data.Internal.Typed.TypedItemOfEntity.ToSic#Sxc#Data#ITypedItem#Metadata">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Typed.TypedItemOfEntity.ToSic#Sxc#Data#ITypedItem#Parents(ToSic.Lib.Coding.NoParamOrder,System.String,System.String)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Typed.TypedItemOfEntity.ToSic#Sxc#Data#ITypedItem#Children(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.Nullable{System.Boolean})">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Typed.TypedItemOfEntity.ToSic#Sxc#Data#ITypedItem#Child(System.String,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean})">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Typed.TypedItemOfEntity.ToSic#Sxc#Data#ITypedItem#Picture(System.String,ToSic.Lib.Coding.NoParamOrder,System.Object,System.Object,System.Object,System.String,System.String,System.String,System.Object,System.String,System.Object,System.Object,System.Object)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Typed.TypedItemOfEntity.ToSic#Sxc#Data#ITypedItem#Child``1(System.String,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean})">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Typed.TypedItemOfEntity.ToSic#Sxc#Data#ITypedItem#Children``1(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.Nullable{System.Boolean})">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Typed.TypedItemOfEntity.ToSic#Sxc#Data#ITypedItem#Parent``1(ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean},System.String,System.String)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Typed.TypedItemOfEntity.ToSic#Sxc#Data#ITypedItem#Parents``1(ToSic.Lib.Coding.NoParamOrder,System.String,System.String)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Typed.WrapObjectTyped.GetHashCode">
      <summary>
            This is used by various equality comparison. 
            Since we define two object to be equal when they host the same contents, this determines the hash based on the contents
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Typed.WrapObjectTypedItem.Parents(ToSic.Lib.Coding.NoParamOrder,System.String,System.String)">
      <summary>
            The parents are "fake" so they behave just like children... but under the node "Parents".
            If "field" is specified, then it will assume another child-level under the node parents
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Typed.WrapObjectTypedItem.ToSic#Sxc#Data#ITyped#Url(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.Nullable{System.Boolean})">
      <summary>
            Override the URL, to also support checks for "file:72"
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Typed.WrapObjectTypedItem.GetHashCode">
      <summary>
            This is used by various equality comparison. 
            Since we define two object to be equal when they host the same contents, this determines the hash based on the contents
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Wrapper.CodeDataWrapper.ChildNonJsonWrapIfPossible(System.Object,System.Boolean,ToSic.Sxc.Data.Internal.Wrapper.WrapperSettings)">
      <summary></summary>
      <param name="data"></param>
      <param name="wrapNonAnon">if true and the contents isn't already a dynamic object, it will also wrap real objects; otherwise only anonymous</param>
      <param name="settings"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Wrapper.CodeJsonWrapper.IfJsonGetValueOrJacket(System.Object)">
      <summary>
            Takes a JSON Node and if it's just a value, return that.
            If it's a complex object, place it in a jacket again for dynamic code to be able to navigate it. 
            So if it's a simple value, it's returned as a value, otherwise it's wrapped into a DynamicJacket again.
            </summary>
      <param name="original"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Wrapper.JsonProcessingHelpers.NeutralizeValueToObjectOrArray(System.Text.Json.Nodes.JsonNode)">
      <summary>
            Make sure a JsonNode which is a JValue containing an Array or Object is correctly packages
            </summary>
      <param name="node"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Wrapper.JsonProcessingHelpers.AnalyzeJson(System.String)">
      <summary>
            Find out if a string is a complex object (obj/array) and if it's an array.
            </summary>
      <param name="json"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Wrapper.PreWrapBase.FindPropertyInternal(ToSic.Eav.Data.PropertyLookup.PropReqSpecs,ToSic.Eav.Data.PropertyLookup.PropertyLookupPath)">
      <inheritdoc />
    </member>
    <member name="T:ToSic.Sxc.Data.Internal.Wrapper.PreWrapObject">
      <summary></summary>
      <remarks>
            Will always return a value even if the property doesn't exist, in which case it resolves to null.
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Data.Internal.Wrapper.PreWrapObject.PropDic">
      <summary>
            Case insensitive property dictionary
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Data.Internal.Wrapper.PreWrapObject.#ctor(System.Object,ToSic.Sxc.Data.Internal.Wrapper.WrapperSettings,ToSic.Sxc.Data.Internal.Wrapper.CodeDataWrapper)">
      <summary></summary>
      <param name="data"></param>
      <param name="settings">
            Determines if properties which are objects should again be wrapped.
            When using this for DynamicModel it should be false, otherwise usually true.
            </param>
      <param name="wrapper"></param>
    </member>
    <member name="P:ToSic.Sxc.Data.Internal.Wrapper.WrapperSettings.WrapChildren">
      <summary>
            Determine if children of this object should be re wrapped into special objects,
            IF they are themselves richer objects (classes, anonymous); but not values.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Data.Internal.Wrapper.WrapperSettings.WrapRealObjects">
      <summary>
            Determine if real objects (with an existing class, eg. non Anonymous) should also be wrapped.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Data.Internal.Wrapper.WrapperSettings.WrapToDynamic">
      <summary>
            Determines if wrapping should result in a Dynamic or typed object.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Data.Internal.Wrapper.WrapperSettings.PropsRequired">
      <summary>
            Determine if Get will be strict
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Data.ISxcDynamicObject">
      <summary>
            Marks 2sxc dynamic objects.
            Mainly to ensure that they are not re-converted if they already are such dynamic objects
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.ISxcDynamicObject">ðŸ“– ISxcDynamicObject</a></para></summary>
    </member>
    <member name="T:ToSic.Sxc.Data.IMetadata">
      <summary>
            Metadata on Dynamic Objects - like <see cref="T:ToSic.Sxc.Data.IDynamicEntity" /> or <see cref="T:ToSic.Sxc.Adam.IAsset" /> (files/folders).
            
            Behaves like a normal DynamicEntity, but has additional commands to detect if specific Metadata exists.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.IMetadata">ðŸ“– IMetadata</a></para></summary>
      <remarks>
            * Added in v13
            * Made compatible to <see cref="T:ToSic.Sxc.Data.ITypedItem" /> in 16.02 to allow typed commands such as `.String(...)`
            * Renamed in v16.02 from `IDynamicMetadata` to `IMetadata` since it's not necessarily `dynamic` any more (but still supports `dynamic` where needed)
                _Note that this is a breaking change, but we believe the type is never directly mentioned in any code_
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Data.IMetadata.HasType(System.String)">
      <summary>
            Ask if there is metadata of the type specified.
            This is important in scenarios where an item could have a lot of metadata, but we only want one specific type to look at.
            </summary>
      <param name="type"></param>
      <returns>`true` if metadata of that type exists</returns>
    </member>
    <member name="M:ToSic.Sxc.Data.IMetadata.OfType(System.String)">
      <summary>
            Get all the metadata Entities of a specific type.
            </summary>
      <param name="type"></param>
      <returns></returns>
    </member>
    <member name="P:ToSic.Sxc.Data.IMetadata.EntityId">
      <summary>
            Old property for the ID of the first type.
            It was necessary to re-instate this because it's used in old Apps such as BlueImp Gallery.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.IMetadata.EntityId">ðŸ“– EntityId</a></para></summary>
    </member>
    <member name="T:ToSic.Sxc.Data.IPublishing">
      <summary>
            Publishing Information for <see cref="T:ToSic.Sxc.Data.ITypedItem" />s.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.IPublishing">ðŸ“– IPublishing</a></para></summary>
      <remarks>New v17</remarks>
    </member>
    <member name="P:ToSic.Sxc.Data.IPublishing.IsSupported">
      <summary>
             Informs you if the current Item support publishing.
             Basically all real Items based on IEntity support publishing, but in some cases you will have
             <see cref="T:ToSic.Sxc.Data.ITypedItem" />s which are not based on an entity, and those will not support publishing.
            
             By default, those objects will say `IsPublished` == `true` and `IsUnpublished` == `false`.
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.IPublishing.IsSupported">ðŸ“– IsSupported</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Data.IPublishing.HasPublished">
      <summary>
            True if this item has a published version.
            Note that this is also true if the current item is the published version.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.IPublishing.HasPublished">ðŸ“– HasPublished</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Data.IPublishing.HasUnpublished">
      <summary>
            True if this item has an unpublished version.
            Note that this is also true if the current item is the unpublished version.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.IPublishing.HasUnpublished">ðŸ“– HasUnpublished</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Data.IPublishing.HasBoth">
      <summary>
            True if this item **branches** meaning it has a published version _and_ an unpublished draft version.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.IPublishing.HasBoth">ðŸ“– HasBoth</a></para></summary>
    </member>
    <member name="M:ToSic.Sxc.Data.IPublishing.GetPublished">
      <summary>
            Get the published version of this item.
            If the initial item was already published, it will return that item.
            </summary>
      <returns>the published item or `null`</returns>
    </member>
    <member name="M:ToSic.Sxc.Data.IPublishing.GetUnpublished">
      <summary>
            Get the unpublished version of this item.
            If the initial item was already unpublished, it will return that item.
            </summary>
      <returns>the unpublished item or `null`</returns>
    </member>
    <member name="M:ToSic.Sxc.Data.IPublishing.GetOpposite">
      <summary>
            Get the opposite version of this item.
            So if your initial item was published, it will try to get the unpublished, and vice versa.
            </summary>
      <returns>the other version of this item or `null`</returns>
    </member>
    <member name="P:ToSic.Sxc.Data.Publishing.UnpublishedEntity">
      <summary>
            Get draft entity - either current, or from appState.
            Do this as a separate step, as we sometimes need the info without converting it to a typed item
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.Publishing.UnpublishedEntity">ðŸ“– UnpublishedEntity</a></para></summary>
    </member>
    <member name="T:ToSic.Sxc.Data.ISecureData`1">
      <summary>
            This object contains decrypted data (if it was encrypted originally) and tells you if the data was encrypted, signed etc.
            It's still very basic, and will grow in functionality to assist in handling secure / encrypted / signed data.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.ISecureData`1">ðŸ“– ISecureData`1</a></para></summary>
      <remarks>
            Introduced in 2sxc 12.05
            </remarks>
      <typeparam name="T">Type of this secure data - as of now it's always a `string`</typeparam>
    </member>
    <member name="P:ToSic.Sxc.Data.ISecureData`1.Value">
      <summary>
            The value returned by the secure data - usually a string. 
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.ISecureData`1.Value">ðŸ“– Value</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Data.ISecureData`1.IsSecured">
      <summary>
            Determines if the data is secure data, so it's either encrypted or signed
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.ISecureData`1.IsSecured">ðŸ“– IsSecured</a></para></summary>
      <remarks>made public in v17.01</remarks>
    </member>
    <member name="M:ToSic.Sxc.Data.ISecureData`1.IsSecuredBy(System.String)">
      <summary>
             Determines what authority secured this secure data.
             This is to figure out what certificate or source verified the decryption / signing
            
             As of 2sxc 12.05, it can only be "preset", other keys are currently not handled yet
             </summary>
      <param name="authorityName"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Data.ISecureData`1.ToString">
      <summary>
            This object explicitly has a ToString, so you can use the result in string concatenation like `"key:" + secureResult`
            </summary>
      <returns></returns>
    </member>
    <member name="F:ToSic.Sxc.Data.SecureDataAuthorities.None">
      <summary>
            No authority / not a secret or wasn't able to decipher
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Data.SecureDataAuthorities.Root">
      <summary>
            Root authority, ATM not in use yet
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Data.SecureDataAuthorities.System">
      <summary>
            System authority (similar to root), ATM not in use yet
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Data.SecureDataAuthorities.Platform">
      <summary>
            Platform authority, meaning the secret was decrypted or authorized by the platform like Dnn or Oqtane
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Data.SecureDataAuthorities.Preset">
      <summary>
            Authority is a preset of 2sxc / EAV
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Data.SecureDataAuthorities.Global">
      <summary>
            The installation / global authorized this, so it's a key given by the installation
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Data.IDynamicStack">
      <summary>
            This is a dynamic object which contains multiple dynamic objects (Sources).
            It will try to find a value inside each source in the order the Sources are managed. 
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.IDynamicStack">ðŸ“– IDynamicStack</a></para></summary>
      <remarks>New in 12.02</remarks>
    </member>
    <member name="M:ToSic.Sxc.Data.IDynamicStack.GetSource(System.String)">
      <summary>
            Get a source object which is used in the stack. Returned as a dynamic object. 
            </summary>
      <param name="name"></param>
      <returns>A dynamic object like a <see cref="T:ToSic.Sxc.Data.IDynamicEntity" /> or similar. If not found, it will return a source which just-works, but doesn't have data. </returns>
      <remarks>
            Added in 2sxc 12.03
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Data.IDynamicStack.Get(System.String)">
      <inheritdoc cref="M:ToSic.Sxc.Data.Internal.Docs.DynamicEntityDocs.Get(System.String)" />
    </member>
    <member name="M:ToSic.Sxc.Data.IDynamicStack.Get(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.Boolean,System.Nullable{System.Boolean})">
      <inheritdoc cref="M:ToSic.Sxc.Data.Internal.Docs.DynamicEntityDocs.Get(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.Boolean,System.Nullable{System.Boolean})" />
    </member>
    <member name="M:ToSic.Sxc.Data.IDynamicStack.Get``1(System.String)">
      <inheritdoc cref="M:ToSic.Sxc.Data.Internal.Docs.DynamicEntityDocs.Get``1(System.String)" />
    </member>
    <member name="M:ToSic.Sxc.Data.IDynamicStack.Get``1(System.String,ToSic.Lib.Coding.NoParamOrder,``0)">
      <inheritdoc cref="M:ToSic.Sxc.Data.Internal.Docs.DynamicEntityDocs.Get``1(System.String,ToSic.Lib.Coding.NoParamOrder,``0)" />
    </member>
    <member name="P:ToSic.Sxc.Data.IDynamicStack.AnyProperty">
      <inheritdoc cref="P:ToSic.Sxc.Data.Internal.Docs.IDynamicAnythingDocs.AnyProperty" />
    </member>
    <member name="M:ToSic.Sxc.Data.ITypedStack.Child(System.String,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean})">
      <inheritdoc cref="!:ITypITypedRelationshipsDocsld" />
    </member>
    <member name="M:ToSic.Sxc.Data.ITypedStack.Children(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.Nullable{System.Boolean})">
      <inheritdoc cref="M:ToSic.Sxc.Data.Internal.Docs.ITypedRelationshipsDocs.Children(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.Nullable{System.Boolean})" />
    </member>
    <member name="T:ToSic.Sxc.Data.ITyped">
      <summary>
             This describes objects which usually wrap other objects to provide strictly typed access to properties.
             have typed Methods to read properties like `.String(propName)`.
            
             It's usually the result of a `AsTyped(something)` or `AsItem(...)` command.
            
             It's meant to help Razor etc. access unknown or dynamic objects in a typed way.
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.ITyped">ðŸ“– ITyped</a></para></summary>
      <remarks>
             New in 16.02.
             </remarks>
    </member>
    <member name="M:ToSic.Sxc.Data.ITyped.Bool(System.String,ToSic.Lib.Coding.NoParamOrder,System.Boolean,System.Nullable{System.Boolean})">
      <summary>
            Get a property and return the value as a `bool`.
            If conversion fails, will return default `false` or what is specified in the `fallback`.
            </summary>
      <param name="name">property name</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">_optional_ fallback if conversion fails</param>
      <param name="required">throw error if the `name` doesn't exist, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">NetCode.Conventions.PropertiesRequired</a></param>
      <returns>Value as `bool`</returns>
    </member>
    <member name="M:ToSic.Sxc.Data.ITyped.DateTime(System.String,ToSic.Lib.Coding.NoParamOrder,System.DateTime,System.Nullable{System.Boolean})">
      <summary>
            Get a property and return the value as a `DateTime`.
            If conversion fails, will return default `0001-01-01` or what is specified in the `fallback`.
            </summary>
      <param name="name">property name</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">_optional_ fallback if conversion fails</param>
      <param name="required">throw error if the `name` doesn't exist, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">NetCode.Conventions.PropertiesRequired</a></param>
      <returns>Value as `DateTime`</returns>
    </member>
    <member name="M:ToSic.Sxc.Data.ITyped.String(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.Nullable{System.Boolean},System.Object)">
      <summary>
            Get a property and return the value as a `string`.
            If conversion fails, will return default `null` or what is specified in the `fallback`.
            </summary>
      <param name="name">property name</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">_optional_ fallback if conversion fails</param>
      <param name="required">throw error if the `name` doesn't exist, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">NetCode.Conventions.PropertiesRequired</a></param>
      <param name="scrubHtml">
            If `true`, will remove all HTML tags from the string.
            If `p` will remove all `p` tags, if `div,span` will remove these tags.
            This is the same as using `Kit.Scrub.All(...)` or `.Only(...). For more detailed scrubbing, use the `Kit.Scrub`
            </param>
      <returns>Value as `string`</returns>
    </member>
    <member name="M:ToSic.Sxc.Data.ITyped.Int(System.String,ToSic.Lib.Coding.NoParamOrder,System.Int32,System.Nullable{System.Boolean})">
      <summary>
            Get a property and return the value as a `int`.
            If conversion fails, will return default `0` or what is specified in the `fallback`.
            </summary>
      <param name="name">property name</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">_optional_ fallback if conversion fails</param>
      <param name="required">throw error if the `name` doesn't exist, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">NetCode.Conventions.PropertiesRequired</a></param>
      <returns>Value as `int`</returns>
    </member>
    <member name="M:ToSic.Sxc.Data.ITyped.Long(System.String,ToSic.Lib.Coding.NoParamOrder,System.Int64,System.Nullable{System.Boolean})">
      <summary>
            Get a property and return the value as a `long`.
            If conversion fails, will return default `0` or what is specified in the `fallback`.
            </summary>
      <param name="name">property name</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">_optional_ fallback if conversion fails</param>
      <param name="required">throw error if the `name` doesn't exist, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">NetCode.Conventions.PropertiesRequired</a></param>
      <returns>Value as `long`</returns>
    </member>
    <member name="M:ToSic.Sxc.Data.ITyped.Float(System.String,ToSic.Lib.Coding.NoParamOrder,System.Single,System.Nullable{System.Boolean})">
      <summary>
            Get a property and return the value as a `float`.
            If conversion fails, will return default `0` or what is specified in the `fallback`.
            </summary>
      <param name="name">property name</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">_optional_ fallback if conversion fails</param>
      <param name="required">throw error if the `name` doesn't exist, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">NetCode.Conventions.PropertiesRequired</a></param>
      <returns>Value as `float`</returns>
    </member>
    <member name="M:ToSic.Sxc.Data.ITyped.Decimal(System.String,ToSic.Lib.Coding.NoParamOrder,System.Decimal,System.Nullable{System.Boolean})">
      <summary>
            Get a property and return the value as a `decimal`.
            If conversion fails, will return default `0` or what is specified in the `fallback`.
            </summary>
      <param name="name">property name</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">_optional_ fallback if conversion fails</param>
      <param name="required">throw error if the `name` doesn't exist, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">NetCode.Conventions.PropertiesRequired</a></param>
      <returns>Value as `decimal`</returns>
    </member>
    <member name="M:ToSic.Sxc.Data.ITyped.Double(System.String,ToSic.Lib.Coding.NoParamOrder,System.Double,System.Nullable{System.Boolean})">
      <summary>
            Get a property and return the value as a `double`.
            If conversion fails, will return default `0` or what is specified in the `fallback`.
            </summary>
      <param name="name">property name</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">_optional_ fallback if conversion fails</param>
      <param name="required">throw error if the `name` doesn't exist, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">NetCode.Conventions.PropertiesRequired</a></param>
      <returns>Value as `double`</returns>
    </member>
    <member name="M:ToSic.Sxc.Data.ITyped.Url(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.Nullable{System.Boolean})">
      <summary>
            Get a url from a field.
            It will do sanitation / url-corrections for special characters etc.
            
            On TypedItems it will also auto-convert values such as `file:72` or `page:14`.
            </summary>
      <param name="name">The field name.</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">_optional_ fallback if conversion fails</param>
      <param name="required">throw error if the `name` doesn't exist, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">NetCode.Conventions.PropertiesRequired</a></param>
      <returns>A url converted if possible. If the field contains anything else such as `hello` then it will not be modified.</returns>
    </member>
    <member name="M:ToSic.Sxc.Data.ITyped.Attribute(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.Nullable{System.Boolean})">
      <summary>
            Return a value as a raw HTML string for using inside an attribute.
            Usage eg. `title='@item.Attribute("Title")'`
            It will do a few things such as:
            
            1. Ensure dates are in the ISO format
            1. Ensure numbers are in a neutral format such as `14.27` and never `14,27`
            1. Html encode any characters which would cause trouble such as quotes
            </summary>
      <param name="name">Name of the property</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">Value to use if the property specified by `name` doesn't exist</param>
      <param name="required">throw error if `name` doesn't exist, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">NetCode.Conventions.PropertiesRequired</a></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Data.ITyped.ContainsKey(System.String)">
      <inheritdoc cref="M:ToSic.Sxc.Data.Internal.IHasKeys.ContainsKey(System.String)" />
    </member>
    <member name="M:ToSic.Sxc.Data.ITyped.IsEmpty(System.String,ToSic.Lib.Coding.NoParamOrder)">
      <inheritdoc cref="M:ToSic.Sxc.Data.Internal.IHasKeys.IsEmpty(System.String,ToSic.Lib.Coding.NoParamOrder)" />
    </member>
    <member name="M:ToSic.Sxc.Data.ITyped.IsNotEmpty(System.String,ToSic.Lib.Coding.NoParamOrder)">
      <inheritdoc cref="M:ToSic.Sxc.Data.Internal.IHasKeys.IsNotEmpty(System.String,ToSic.Lib.Coding.NoParamOrder)" />
    </member>
    <member name="M:ToSic.Sxc.Data.ITyped.Keys(ToSic.Lib.Coding.NoParamOrder,System.Collections.Generic.IEnumerable{System.String})">
      <inheritdoc cref="M:ToSic.Sxc.Data.Internal.IHasKeys.Keys(ToSic.Lib.Coding.NoParamOrder,System.Collections.Generic.IEnumerable{System.String})" />
    </member>
    <member name="M:ToSic.Sxc.Data.ITyped.Get(System.String,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean})">
      <summary>
            Get a property.
            </summary>
      <param name="name">the property name like `Image` - or path to sub-property like `Author.Name` (new v15)</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="required">throw error if `name` doesn't exist, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">NetCode.Conventions.PropertiesRequired</a></param>
      <returns>The result if found or null; or error if the object is in strict mode</returns>
    </member>
    <member name="M:ToSic.Sxc.Data.ITyped.Get``1(System.String,ToSic.Lib.Coding.NoParamOrder,``0,System.Nullable{System.Boolean})">
      <summary>
            Get a value using the name - and cast it to the expected strong type.
            For example to get an int even though it's stored as decimal.
            
            Since the parameter `fallback` determines the type `TValue` you can just write this like
            `something.Get("Title", fallback: "no title")
            </summary>
      <typeparam name="TValue">
            The expected type, like `string`, `int`, etc.
            Note that you don't need to specify it, if you specify the `fallback` property.
            </typeparam>
      <param name="name">the property name like `Image` - or path to sub-property like `Author.Name` (new v15)</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">the fallback value to provide if not found</param>
      <param name="required">throw error if `name` doesn't exist, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">NetCode.Conventions.PropertiesRequired</a></param>
      <returns>The typed value, or the `default` like `null` or `0` if casting isn't possible.</returns>
      <remarks>Added in v15</remarks>
    </member>
    <member name="T:ToSic.Sxc.Data.ITypedItem">
      <summary>
            A typed object to access data.
            Previously Razor code always used `dynamic` <see cref="T:ToSic.Sxc.Data.IDynamicEntity" /> objects.
            This had some disadvantages when working with LINQ or advanced toolbars.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.ITypedItem">ðŸ“– ITypedItem</a></para></summary>
      <remarks>
            Introduced in 2sxc 16.01
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Data.ITypedItem.Dyn">
      <summary>
             A dynamic accessor for properties, to quickly get values when you don't care about type safety.
             This is _often_ (but not always) a <see cref="T:ToSic.Sxc.Data.IDynamicEntity" />.
            
             Example: `Dyn.FirstName` might just work - and return the first name or `null` if not found.
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.ITypedItem.Dyn">ðŸ“– Dyn</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Data.ITypedItem.Presentation">
      <summary>
            The presentation item or `null` if it doesn't exist.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.ITypedItem.Presentation">ðŸ“– Presentation</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Data.ITypedItem.Metadata">
      <summary>
            Metadata of the current item, with special features.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.ITypedItem.Metadata">ðŸ“– Metadata</a></para></summary>
      <remarks>
            Added in 16.02
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Data.ITypedItem.Field(System.String,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean})">
      <summary>
            Get a special info-object describing a specific field in this item.
            This is a rich object used by other operations which need a lot of context about the item and the field.
            </summary>
      <param name="name">Name of the property</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="required">throw error if `name` doesn't exist, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">NetCode.Conventions.PropertiesRequired</a></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Data.ITypedItem.Folder(System.String,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean})">
      <summary>
            Get the ADAM (Automatic Digital Asset Manager) for this field.
            This is a folder which contains all the files and possibly folders which are uploaded on exactly this field.
            </summary>
      <param name="name">property name</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="required">throw error if `name` doesn't exist, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">NetCode.Conventions.PropertiesRequired</a></param>
      <returns>The Folder object</returns>
      <remarks>Added in 16.02</remarks>
    </member>
    <member name="M:ToSic.Sxc.Data.ITypedItem.File(System.String,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean})">
      <summary>
            Get the file of the current field.
            There are a few scenarios:
            
            1. If it's a file/hyperlink field pointing to a file such as `file:27` it will retrieve the file itself.
            1. If it's a file/hyperlink field pointing to a url such as `http://xyz` it will return `null`.
            1. If it's a library field, it will just take the first file, as there is no value referencing a specific field
            1. If it's any other field, will return `null`
            </summary>
      <param name="name">property name</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="required">throw error if `name` doesn't exist, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">NetCode.Conventions.PropertiesRequired</a></param>
      <remarks>Added in 16.02</remarks>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Data.ITypedItem.Child(System.String,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean})">
      <inheritdoc cref="!:ITypITypedRelationshipsDocsld" />
    </member>
    <member name="M:ToSic.Sxc.Data.ITypedItem.Children(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.Nullable{System.Boolean})">
      <inheritdoc cref="M:ToSic.Sxc.Data.Internal.Docs.ITypedRelationshipsDocs.Children(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.Nullable{System.Boolean})" />
    </member>
    <member name="M:ToSic.Sxc.Data.ITypedItem.Parent(ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean},System.String,System.String)">
      <inheritdoc cref="M:ToSic.Sxc.Data.Internal.Docs.ITypedRelationshipsDocs.Parent(ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean},System.String,System.String)" />
    </member>
    <member name="M:ToSic.Sxc.Data.ITypedItem.Parents(ToSic.Lib.Coding.NoParamOrder,System.String,System.String)">
      <inheritdoc cref="M:ToSic.Sxc.Data.Internal.Docs.ITypedRelationshipsDocs.Parents(System.String,ToSic.Lib.Coding.NoParamOrder,System.String)" />
    </member>
    <member name="M:ToSic.Sxc.Data.ITypedItem.Child``1(System.String,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean})">
      <summary>
            EXPERIMENTAL
            </summary>
      <returns></returns>
    </member>
    <member name="P:ToSic.Sxc.Data.ITypedItem.IsPublished">
      <summary>
            True if this item version is published.
            This means that the item can exist as published, or published-with-draft, showing the published version.
            
            _Note that by default, end-users only see the published version and don't see any draft version._
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.ITypedItem.IsPublished">ðŸ“– IsPublished</a></para></summary>
      <remarks>New in v17, see also <see cref="P:ToSic.Sxc.Data.ITypedItem.Publishing" /></remarks>
    </member>
    <member name="P:ToSic.Sxc.Data.ITypedItem.IsDemoItem">
      <summary>
            Many templates show demo data.
            If the template code must know if it's the demo item or
            real data, use `.IsDemoItem`.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.ITypedItem.IsDemoItem">ðŸ“– IsDemoItem</a></para></summary>
      <returns>
            True if this is the item configured in the view-settings, false if not.
            </returns>
    </member>
    <member name="M:ToSic.Sxc.Data.ITypedItem.Html(System.String,ToSic.Lib.Coding.NoParamOrder,System.Object,System.Nullable{System.Boolean},System.Object,System.Nullable{System.Boolean},System.Boolean,System.Func{ToSic.Sxc.Services.Tweaks.ITweakInput{System.String},ToSic.Sxc.Services.Tweaks.ITweakInput{System.String}})">
      <summary>
            Show a field in the expected / best possible way.
            As of now it's meant for WYSIWYG fields with Very-Rich Text.
            See <a href="https://go.2sxc.org/xref17?xref=NetCode.DynamicData.DynamicEntityHtml">NetCode.DynamicData.DynamicEntityHtml</a></summary>
      <param name="name">the field name</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="container">
            A wrapper tag for the result.
            It's either a RazorBlade tag such as `Kit.HtmlTag.Div()`, a string such as `span` or an empty string `` to indicate no container.
            If not set it will default to to a div-tag.
            See <a href="https://go.2sxc.org/xref17?xref=NetCode.DynamicData.DynamicEntityHtml">docs</a></param>
      <param name="toolbar">Override default toolbar behavior on this field. See <a href="https://go.2sxc.org/xref17?xref=NetCode.DynamicData.DynamicEntityHtml">docs</a></param>
      <param name="imageSettings">Settings for resizing. Default is `Wysiwyg` but it can also be `Content` or a settings object.</param>
      <param name="required">throw error if `name` doesn't exist, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">NetCode.Conventions.PropertiesRequired</a></param>
      <param name="debug">Activate debug visualization to better see alignments and such.</param>
      <param name="tweak">tweak behavior - ATM modify the input before it's processed new in v17</param>
      <returns></returns>
      <remarks>
            * Added in 2sxc 16.01
            * Added `tweak` in v17
            * Only works on Razor files inheriting from Hybrid14 or newer
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Data.ITypedItem.Picture(System.String,ToSic.Lib.Coding.NoParamOrder,System.Object,System.Object,System.Object,System.String,System.String,System.String,System.Object,System.String,System.Object,System.Object,System.Object)">
      <summary>
             Get a Responsive Picture object which you can then either just show, or use to construct a more customized output as you need it.
             
             The resulting object can just be added to the html, like `@pic` or you can work with sub-properties as specified in the <see cref="T:ToSic.Sxc.Images.IResponsivePicture" />.
             
             **Important:** This call only allows you to set the most common parameters `factor` and `width`.
             For other parameters like `height`, `aspectRatio`, `quality` etc. create typed Settings <see cref="M:ToSic.Sxc.Services.IImageService.Settings(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Object,System.Object,System.Object,System.Object,System.String,System.String,System.String,System.Object,System.String,System.Object)" /> and pass them in.
            
             &gt; [!NOTE]
             &gt; This is the similar as using the <see cref="M:ToSic.Sxc.Services.IImageService.Picture(System.Object,System.Object,ToSic.Lib.Coding.NoParamOrder,System.Object,System.Object,System.String,System.String,System.String,System.Object,System.String,System.Object,System.Object,System.Object)" /> just a bit simpler.
             &gt;
             &gt; An important difference is that it returns `null` if the field does not exist or is empty, allowing you to just show nothing or use `...Picture(...) ?? someFallback;`
             </summary>
      <param name="name">Name of a field</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="settings">
             - The name of a settings configuration, like "Content", "Screen", "Square", etc.
             - A standardized Image-Settings object like Settings.Child("Images.Content") - see https://go.2sxc.org/settings
             - A dynamic object containing settings properties (this can also be a merged custom + standard settings)
             - A strictly typed <see cref="T:ToSic.Sxc.Images.IResizeSettings" /> object containing all settings created using <see cref="M:ToSic.Sxc.Services.IImageService.Settings(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Object,System.Object,System.Object,System.Object,System.String,System.String,System.String,System.Object,System.String,System.Object)">ResizeSettings</see></param>
      <param name="factor">An optional multiplier, usually used to create urls which resize to a part of the default content-size. Eg. 0.5. </param>
      <param name="width">An optional, fixed width of the image</param>
      <param name="imgAlt">
             Optional `alt` attribute on the created `img` tag for SEO etc.
             If supplied, it takes precedence to the alt-description in the image metadata which the editor added themselves.
             If you want to provide a fallback value (in case the metadata has no alt), use `imgAltFallback`
             </param>
      <param name="imgAltFallback">
             Optional `alt` attribute which is only used if the `imgAlt` or the alt-text in the metadata are empty.
             </param>
      <param name="imgClass">Optional `class` attribute on the created `img` tag</param>
      <param name="toolbar">Provide a custom toolbar or `false` to not show a toolbar</param>
      <param name="imgAttributes">Optional additional attributes - as anonymous object eg `new { style = "padding: 10px" }` or Dictionary (new 16.07)</param>
      <param name="pictureClass">Optional `class` attribute on the created `picture` tag</param>
      <param name="pictureAttributes">Optional additional attributes - as anonymous object eg `new { style = "padding: 10px" }` or Dictionary (new 16.07)</param>
      <param name="recipe">
             Optional recipe = instructions how to create the various variants of this link.
             Can be any one of these:
             
             - string containing variants
             - Rule object
             
             TODO: DOCS not quite ready
             </param>
      <returns>
             * A <see cref="T:ToSic.Sxc.Images.IResponsivePicture" /> object which can be rendered directly. See <a href="https://go.2sxc.org/xref17?xref=NetCode.Images.Index">NetCode.Images.Index</a>
             * If the field does not exist, it will return `null`
             * If the field exists, but is empty, it will return `null`
             </returns>
      <remarks>
             * Added to ITypedItem in v16.03
             * `imgAttributes`, `picClass` and `picAttributes` added in 16.07
             </remarks>
    </member>
    <member name="M:ToSic.Sxc.Data.ITypedItem.Img(System.String,ToSic.Lib.Coding.NoParamOrder,System.Object,System.Object,System.Object,System.String,System.String,System.String,System.Object,System.Object,System.Object)">
      <summary>
             Get a Responsive Picture object which you can then either just show, or use to construct a more customized output as you need it.
             
             The resulting object can just be added to the html, like `@pic` or you can work with sub-properties as specified in the <see cref="T:ToSic.Sxc.Images.IResponsivePicture" />.
             
             **Important:** This call only allows you to set the most common parameters `factor` and `width`.
             For other parameters like `height`, `aspectRatio`, `quality` etc. create typed Settings <see cref="M:ToSic.Sxc.Services.IImageService.Settings(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Object,System.Object,System.Object,System.Object,System.String,System.String,System.String,System.Object,System.String,System.Object)" /> and pass them in.
            
             &gt; [!NOTE]
             &gt; This is the similar as using the <see cref="M:ToSic.Sxc.Services.IImageService.Picture(System.Object,System.Object,ToSic.Lib.Coding.NoParamOrder,System.Object,System.Object,System.String,System.String,System.String,System.Object,System.String,System.Object,System.Object,System.Object)" /> just a bit simpler.
             &gt;
             &gt; An important difference is that it returns `null` if the field does not exist or is empty, allowing you to just show nothing or use `...Picture(...) ?? someFallback;`
             </summary>
      <param name="name">Name of a field</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="settings">
             - The name of a settings configuration, like "Content", "Screen", "Square", etc.
             - A standardized Image-Settings object like Settings.Child("Images.Content") - see https://go.2sxc.org/settings
             - A dynamic object containing settings properties (this can also be a merged custom + standard settings)
             - A strictly typed <see cref="T:ToSic.Sxc.Images.IResizeSettings" /> object containing all settings created using <see cref="M:ToSic.Sxc.Services.IImageService.Settings(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Object,System.Object,System.Object,System.Object,System.String,System.String,System.String,System.Object,System.String,System.Object)">ResizeSettings</see></param>
      <param name="factor">An optional multiplier, usually used to create urls which resize to a part of the default content-size. Eg. 0.5. </param>
      <param name="width">An optional, fixed width of the image</param>
      <param name="imgAlt">
             Optional `alt` attribute on the created `img` tag for SEO etc.
             If supplied, it takes precedence to the alt-description in the image metadata which the editor added themselves.
             If you want to provide a fallback value (in case the metadata has no alt), use `imgAltFallback`
             </param>
      <param name="imgAltFallback">
             Optional `alt` attribute which is only used if the `imgAlt` or the alt-text in the metadata are empty.
             </param>
      <param name="imgClass">Optional `class` attribute on the created `img` tag</param>
      <param name="toolbar">Provide a custom toolbar or `false` to not show a toolbar</param>
      <param name="imgAttributes">Optional additional attributes - as anonymous object eg `new { style = "padding: 10px" }` or Dictionary (new 16.07)</param>
      <param name="recipe">
             Optional recipe = instructions how to create the various variants of this link.
             Can be any one of these:
             
             - string containing variants
             - Rule object
             
             TODO: DOCS not quite ready
             </param>
      <returns>
             * A <see cref="T:ToSic.Sxc.Images.IResponsivePicture" /> object which can be rendered directly. See <a href="https://go.2sxc.org/xref17?xref=NetCode.Images.Index">NetCode.Images.Index</a>
             * If the field does not exist, it will return `null`
             * If the field exists, but is empty, it will return `null`
             </returns>
      <remarks>
             * Added to ITypedItem in v17.04 (previously only Picture was available)
             </remarks>
    </member>
    <member name="M:ToSic.Sxc.Data.ITypedItem.Gps(System.String,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean})">
      <summary>
            Get the GPS coordinates of a GPS field.
            </summary>
      <param name="name"></param>
      <param name="protector"></param>
      <param name="required"></param>
      <returns></returns>
      <remarks>New in v17.03</remarks>
    </member>
    <member name="P:ToSic.Sxc.Data.ITypedItem.Id">
      <summary>
            The ID of the underlying entity.
            Use it for edit-functionality or just to have a unique number for this item.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.ITypedItem.Id">ðŸ“– Id</a></para></summary>
      <remarks>If the entity doesn't exist, it will return 0</remarks>
    </member>
    <member name="P:ToSic.Sxc.Data.ITypedItem.Guid">
      <summary>
            The guid of the underlying entity.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.ITypedItem.Guid">ðŸ“– Guid</a></para></summary>
      <remarks>If the entity doesn't exist, it will return an empty guid</remarks>
    </member>
    <member name="P:ToSic.Sxc.Data.ITypedItem.Title">
      <summary>
            The title of this item. This is always available no matter what the underlying field for the title is. 
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.ITypedItem.Title">ðŸ“– Title</a></para></summary>
      <returns>
            The title of the underlying entity.
            In rare cases where no title-field is known, it can be null.
            It can also be null if there is no underlying entity. 
            </returns>
      <remarks>This returns a string which is usually what's expected. In previous versions (before v15) 2sxc it returned an object.</remarks>
    </member>
    <member name="P:ToSic.Sxc.Data.ITypedItem.Type">
      <summary>
            The Content-Type of the current entity.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.ITypedItem.Type">ðŸ“– Type</a></para></summary>
    </member>
    <member name="T:ToSic.Sxc.Data.ITypedItemWrapper16">
      <summary>
            WIP v17.02+ - not sure if we will ever publish this...
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.ITypedItemWrapper16">ðŸ“– ITypedItemWrapper16</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Data.ITypedItemWrapper16.ForContentType">
      <summary>
             Internal functionality, so the object can declare what content Type it's for.
            
             By default, it will use the content-type name, but providing this property would allow
             other classes (with different names) to provide the proper name.
            
             ATM it's only used in App.Data.GetOne{T} and App.Data.GetAll{T}
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Data.ITypedItemWrapper16.ForContentType">ðŸ“– ForContentType</a></para></summary>
    </member>
    <member name="M:ToSic.Sxc.Data.ITypedItemWrapper16.Setup(ToSic.Sxc.Data.ITypedItem)">
      <summary>
            Add the data to use for the wrapper.
            It can't be done in the constructor, because the object needs to have an empty (or future: maybe DI-compatible)
            constructor. 
            </summary>
      <param name="baseItem"></param>
    </member>
    <member name="T:ToSic.Sxc.Demo.ToolbarServiceExtensions">
      <summary>
             Demo extensions to help in tutorials with the ToolbarService.
            
             Not meant for production, could change at any time. 
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Demo.ToolbarServiceExtensions">ðŸ“– ToolbarServiceExtensions</a></para></summary>
    </member>
    <member name="M:ToSic.Sxc.Demo.ToolbarServiceExtensions.ActivateDemoMode(ToSic.Sxc.Services.IToolbarService,ToSic.Lib.Coding.NoParamOrder,System.String)">
      <summary>
            Created for 14.08, used in the tutorial starting 2022-08-23
            </summary>
      <param name="toolbarService"></param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="ui"></param>
    </member>
    <member name="M:ToSic.Sxc.Edit.EditService.EditService.Attribute(System.String,System.String)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Edit.EditService.EditService.Attribute(System.String,System.Object)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Edit.EditService.EditService.ContextAttributes(ToSic.Eav.Data.ICanBeEntity,ToSic.Lib.Coding.NoParamOrder,System.String,System.String,System.Nullable{System.Guid},System.String,System.Int32)">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Edit.EditService.EditService.Enabled">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Edit.EditService.EditService.Enable(ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Edit.EditService.EditService.Toolbar(System.Object,ToSic.Lib.Coding.NoParamOrder,System.String,System.String,System.Object,System.Object,System.Object,System.Object)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Edit.EditService.EditService.TagToolbar(System.Object,ToSic.Lib.Coding.NoParamOrder,System.String,System.String,System.Object,System.Object,System.Object,System.Object)">
      <inheritdoc />
    </member>
    <member name="T:ToSic.Sxc.Edit.Toolbar.Internal.ToolbarBuilder">
      <summary>
            INTERNAL: Toolbar Builder implementation.
            </summary>
      <remarks>
            We cannot make this internal :(
            Reason is that as soon as we run something like `Kit.Toolbar.Empty(Content)` in a razor file,
            the result is dynamic - so the compiler evaluates the final object at runtime.
            If the ToolbarBuilder is internal, things start to fail.
            eg. AsTag() will fail, saying that RawHtmlString doesn't have that
            So for now :( it must remain public.
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.Internal.ToolbarBuilder.#ctor(ToSic.Sxc.Edit.Toolbar.Internal.ToolbarBuilder.MyServices)">
      <summary>
            Public constructor for DI
            </summary>
      <param name="services"></param>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.Internal.ToolbarBuilder.#ctor(ToSic.Sxc.Edit.Toolbar.Internal.ToolbarBuilder,System.Collections.Generic.IEnumerable{ToSic.Sxc.Edit.Toolbar.ToolbarRuleBase})">
      <summary>
            Clone-constructor
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.Internal.ToolbarBuilder.Button(System.String,System.Object,ToSic.Lib.Coding.NoParamOrder,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton},System.Object,System.Object,System.String,System.String)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.Internal.ToolbarBuilder.Metadata(System.Object,System.String,ToSic.Lib.Coding.NoParamOrder,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton},System.Object,System.Object,System.Object,System.String,System.String)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.Internal.ToolbarBuilder.Copy(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton},System.String,System.Object,System.Object,System.Object,System.String,System.String)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.Internal.ToolbarBuilder.ToSic#Sxc#Edit#Toolbar#IToolbarBuilderInternal#GetContext">
      <summary>
            See if toolbar itself has a context, or there are rules which have a context,
            or any of the rules have one
            </summary>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.Internal.ToolbarBuilder.CreateItemDemoToolbar">
      <summary>
            Create a fresh Toolbar which only shows infos about item being in demo-mode
            </summary>
      <returns></returns>
    </member>
    <member name="T:ToSic.Sxc.Edit.Toolbar.Internal.ToolbarBuilderUtilities">
      <summary>
             Special utilities for the Toolbar Builder,
             which should only be created once per use case to optimize performance.
            
             Note that previously this was part of the ToolbarBuilder,
             but the effect was since the toolbar builder is re-created constantly, the
             helpers were also recreated constantly. 
             </summary>
    </member>
    <member name="P:ToSic.Sxc.Edit.Toolbar.Internal.ToolbarBuilderUtilities.Par2Url">
      <summary>
            Helper to process 'parameters' to url, ensuring lower-case etc. 
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Edit.Toolbar.Internal.ToolbarBuilderUtilities.Filter2Url">
      <summary>
            Helper to process 'filter' to url - should not change the case of the properties and auto-fix some special scenarios
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Edit.Toolbar.Internal.ToolbarBuilderUtilities.Prefill2Url">
      <summary>
            Helper to process 'prefill' - should not change the case of the properties
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.Internal.ToolbarBuilderUtilities.MergeWithTweaks(System.String,System.Collections.Generic.IEnumerable{System.Object})">
      <summary>
             new v15 - add UI tweaks - must come last / after group
            </summary>
      <param name="previous"></param>
      <param name="tweaks"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.Internal.ToolbarBuilderExtensions.AddInternal(ToSic.Sxc.Edit.Toolbar.IToolbarBuilder,System.Object[])">
      <summary>
            Add one or more rules (as strings or ToolbarRule objects) according to the conventions of the <a href="https://go.2sxc.org/xref17?xref=JsCode.Toolbars.Simple">js toolbar</a></summary>
      <returns>a _new_ toolbar builder - see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Index">guide</a></returns>
      <remarks>
            History
            * Added in 2sxc 13
            </remarks>
    </member>
    <member name="T:ToSic.Sxc.Edit.Toolbar.Internal.TweakButton">
      <summary>
            Must be public because of side effect with old/dynamic razor.
            Example which would fail if it's internal:
            - `tweak: b =&gt; b.Tooltip(Resources.LabelRegistrations).Filter("EventDate", d.EntityId))`
            In this case `.Filter` would fail because the tooltip comes from a dynamic object,
            so then the compiler will eval the resulting object and it can't be internal.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.Internal.TweakButton.NoOp(ToSic.Sxc.Edit.Toolbar.ITweakButton)">
      <summary>
            Helper to create an empty TweakButton function as fallback when not provided.
            </summary>
      <param name="btn"></param>
      <returns></returns>
    </member>
    <member name="T:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder">
      <summary>
             The toolbar builder helps you create Toolbar configurations for the UI.
             Note that it has a fluid API, and each method/use returns a fresh object with the updated configuration.
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Edit.Toolbar.IToolbarBuilder">ðŸ“– IToolbarBuilder</a></para></summary>
      <remarks>
             Your code cannot construct this object by itself, as it usually needs additional information.
             To get a `ToolbarBuilder`, use the <see cref="T:ToSic.Sxc.Services.IToolbarService" />.
            
             * uses the <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.Functional">NetCode.Conventions.Functional</a>
             
             History
             * Added in 2sxc 13, just minimal API
             * massively enhanced in v14.04
             * most commands extended with <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.TweakButtons">Tweak API</a> in v15.07
             </remarks>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.Button(System.String,System.Object,ToSic.Lib.Coding.NoParamOrder,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton},System.Object,System.Object,System.String,System.String)">
      <summary>
            Add a custom button / command.
            Can also be used to do advanced remove operations or modify a button on a toolbar which would have it by default. 
            </summary>
      <param name="name">
            1. The _required_ name of the command.
            See <a href="https://go.2sxc.org/xref17?xref=Api.Js.SxcJs.CommandNames">Api.Js.SxcJs.CommandNames</a>.
            
            2. Can also be a full rule-string containing parameters and more
            according to the conventions of the <a href="https://go.2sxc.org/xref17?xref=JsCode.Toolbars.Simple">js toolbar</a></param>
      <param name="target">_optional_ entity-like target, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Target">target guide</a></param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="tweak">Functional <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.TweakButtons">Tweak API</a> to modify UI and parameters (new v15.07)</param>
      <param name="ui">_optional_ configuration how to show, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Ui">ui guide</a></param>
      <param name="parameters">_optional_ parameters for the command, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Parameters">parameters guide</a></param>
      <param name="operation">_optional_ change <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Operation">what should happen</a></param>
      <param name="context"></param>
      <returns>a _new_ toolbar builder - see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Index">guide</a></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.App(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton},System.Object,System.Object,System.String)">
      <summary>
            Create button to **admin the app**.
            Can also be used to remove the same button on a toolbar which would have it by default. 
            </summary>
      <param name="target">_not used ATM_ just here for API consistency</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="tweak">Functional <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.TweakButtons">Tweak API</a> to modify UI and parameters (new v15.07)</param>
      <param name="operation">
            _optional_ change <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Operation">what should happen</a>.
            By default, the button will show based on conditions like permissions.
            </param>
      <param name="ui">_optional_ configuration how to show, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Ui">ui guide</a></param>
      <param name="parameters">_optional_ parameters for the command, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Parameters">parameters guide</a></param>
      <returns>a _new_ toolbar builder - see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Index">guide</a></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.AppImport(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton},System.Object,System.Object,System.String)">
      <summary>
            Create button to open the **import-app** dialog.
            Can also be used to remove the same button on a toolbar which would have it by default.
            </summary>
      <param name="target">_not used ATM_ just here for API consistency</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="tweak">Functional <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.TweakButtons">Tweak API</a> to modify UI and parameters (new v15.07)</param>
      <param name="operation">
            _optional_ change <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Operation">what should happen</a>.
            By default, the button will show based on conditions like permissions.
            </param>
      <param name="ui">_optional_ configuration how to show, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Ui">ui guide</a></param>
      <param name="parameters">_optional_ parameters for the command, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Parameters">parameters guide</a></param>
      <returns>a _new_ toolbar builder - see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Index">guide</a></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.AppResources(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton},System.Object,System.Object,System.String)">
      <summary>
            Create button to **edit the app resources** if there are any.
            Can also be used to remove the same button on a toolbar which would have it by default.
            </summary>
      <param name="target">_not used ATM_ just here for API consistency</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="tweak">Functional <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.TweakButtons">Tweak API</a> to modify UI and parameters (new v15.07)</param>
      <param name="operation">
            _optional_ change <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Operation">what should happen</a>.
            By default, the button will show based on conditions like permissions.
            </param>
      <param name="ui">_optional_ configuration how to show, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Ui">ui guide</a></param>
      <param name="parameters">_optional_ parameters for the command, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Parameters">parameters guide</a></param>
      <returns>a _new_ toolbar builder - see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Index">guide</a></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.AppSettings(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton},System.Object,System.Object,System.String)">
      <summary>
            Create button to **edit the custom app settings** if there are any.
            Can also be used to remove the same button on a toolbar which would have it by default.
            </summary>
      <param name="target">_not used ATM_ just here for API consistency</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="tweak">Functional <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.TweakButtons">Tweak API</a> to modify UI and parameters (new v15.07)</param>
      <param name="operation">
            _optional_ change <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Operation">what should happen</a>.
            By default, the button will show based on conditions like permissions.
            </param>
      <param name="ui">_optional_ configuration how to show, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Ui">ui guide</a></param>
      <param name="parameters">_optional_ parameters for the command, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Parameters">parameters guide</a></param>
      <returns>a _new_ toolbar builder - see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Index">guide</a></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.Apps(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton},System.Object,System.Object,System.String)">
      <summary>
            Create button to open the **apps management** of the current site.
            Can also be used to remove the same button on a toolbar which would have it by default.
            </summary>
      <param name="target">_not used ATM_ just here for API consistency</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="tweak">Functional <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.TweakButtons">Tweak API</a> to modify UI and parameters (new v15.07)</param>
      <param name="operation">
            _optional_ change <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Operation">what should happen</a>.
            By default, the button will show based on conditions like permissions.
            </param>
      <param name="ui">_optional_ configuration how to show, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Ui">ui guide</a></param>
      <param name="parameters">_optional_ parameters for the command, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Parameters">parameters guide</a></param>
      <returns>a _new_ toolbar builder - see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Index">guide</a></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.System(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton},System.Object,System.Object,System.String)">
      <summary>
            Create button to open the **system admin** dialog.
            Can also be used to remove the same button on a toolbar which would have it by default.
            </summary>
      <param name="target">_not used ATM_ just here for API consistency</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="tweak">Functional <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.TweakButtons">Tweak API</a> to modify UI and parameters (new v15.07)</param>
      <param name="operation">
            _optional_ change <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Operation">what should happen</a>.
            By default, the button will show based on conditions like permissions.
            </param>
      <param name="ui">_optional_ configuration how to show, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Ui">ui guide</a></param>
      <param name="parameters">_optional_ parameters for the command, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Parameters">parameters guide</a></param>
      <returns>a _new_ toolbar builder - see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Index">guide</a></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.Insights(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton},System.Object,System.Object,System.String)">
      <summary>
            Create button to open the **insights** for debugging.
            Can also be used to remove the same button on a toolbar which would have it by default.
            </summary>
      <param name="target">_not used ATM_ just here for API consistency</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="tweak">Functional <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.TweakButtons">Tweak API</a> to modify UI and parameters (new v15.07)</param>
      <param name="operation">
            _optional_ change <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Operation">what should happen</a>.
            By default, the button will show based on conditions like permissions.
            </param>
      <param name="ui">_optional_ configuration how to show, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Ui">ui guide</a></param>
      <param name="parameters">_optional_ parameters for the command, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Parameters">parameters guide</a></param>
      <returns>a _new_ toolbar builder - see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Index">guide</a></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.Add(System.Object,ToSic.Lib.Coding.NoParamOrder,System.String,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton},System.Object,System.Object,System.String)">
      <summary>
            Create button to **add a new entity** to a list of entities.
            Can also be used to remove the same button on a toolbar which would have it by default.
            </summary>
      <param name="target">
            _optional_ entity-like target which is in a list of items in on a content-block,
            see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Target">target guide</a></param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="tweak">Functional <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.TweakButtons">Tweak API</a> to modify UI and parameters (new v15.07)</param>
      <param name="contentType"></param>
      <param name="ui">_optional_ configuration how to show, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Ui">ui guide</a></param>
      <param name="parameters">_optional_ parameters for the command, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Parameters">parameters guide</a></param>
      <param name="operation">_optional_ change <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Operation">what should happen</a></param>
      <returns>a _new_ toolbar builder - see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Index">guide</a></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.AddExisting(System.Object,ToSic.Lib.Coding.NoParamOrder,System.String,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton},System.Object,System.Object,System.String)">
      <summary>
            Create button to **add an existing** entity to the list.
            Can also be used to remove the same button on a toolbar which would have it by default.
            </summary>
      <param name="target">
            _optional_ entity-like target which is in a list of items in on a content-block,
            see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Target">target guide</a></param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="tweak">Functional <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.TweakButtons">Tweak API</a> to modify UI and parameters (new v15.07)</param>
      <param name="contentType"></param>
      <param name="ui">_optional_ configuration how to show, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Ui">ui guide</a></param>
      <param name="parameters">_optional_ parameters for the command, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Parameters">parameters guide</a></param>
      <param name="operation">_optional_ change <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Operation">what should happen</a></param>
      <returns>a _new_ toolbar builder - see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Index">guide</a></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.List(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton},System.Object,System.Object,System.String)">
      <summary>
            Create button to **manage the list** of entities shown here.
            Can also be used to remove the same button on a toolbar which would have it by default.
            </summary>
      <param name="target">
            _optional_ entity-like target which is in a list of items in on a content-block,
            see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Target">target guide</a></param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="tweak">Functional <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.TweakButtons">Tweak API</a> to modify UI and parameters (new v15.07)</param>
      <param name="ui">_optional_ configuration how to show, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Ui">ui guide</a></param>
      <param name="parameters">_optional_ parameters for the command, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Parameters">parameters guide</a></param>
      <param name="operation">_optional_ change <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Operation">what should happen</a></param>
      <returns>a _new_ toolbar builder - see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Index">guide</a></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.MoveDown(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton},System.Object,System.Object,System.String)">
      <summary>
            Create button to **move an item down** in a list.
            Can also be used to remove the same button on a toolbar which would have it by default.
            </summary>
      <param name="target">
            _optional_ entity-like target which is in a list of items in on a content-block,
            see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Target">target guide</a></param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="tweak">Functional <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.TweakButtons">Tweak API</a> to modify UI and parameters (new v15.07)</param>
      <param name="ui">_optional_ configuration how to show, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Ui">ui guide</a></param>
      <param name="parameters">_optional_ parameters for the command, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Parameters">parameters guide</a></param>
      <param name="operation">_optional_ change <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Operation">what should happen</a></param>
      <returns>a _new_ toolbar builder - see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Index">guide</a></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.MoveUp(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton},System.Object,System.Object,System.String)">
      <summary>
            Create button to **move an item up** in a list.
            Can also be used to remove the same button on a toolbar which would have it by default.
            </summary>
      <param name="target">
            _optional_ entity-like target which is in a list of items in on a content-block,
            see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Target">target guide</a></param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="tweak">Functional <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.TweakButtons">Tweak API</a> to modify UI and parameters (new v15.07)</param>
      <param name="ui">_optional_ configuration how to show, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Ui">ui guide</a></param>
      <param name="parameters">_optional_ parameters for the command, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Parameters">parameters guide</a></param>
      <param name="operation">_optional_ change <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Operation">what should happen</a></param>
      <returns>a _new_ toolbar builder - see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Index">guide</a></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.Remove(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton},System.Object,System.Object,System.String)">
      <summary>
            Create button to **remove an item** from a list.
            Can also be used to remove the same button on a toolbar which would have it by default.
            This will not delete the item, just remove. 
            </summary>
      <param name="target">
            _optional_ entity-like target which is in a list of items in on a content-block,
            see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Target">target guide</a></param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="tweak">Functional <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.TweakButtons">Tweak API</a> to modify UI and parameters (new v15.07)</param>
      <param name="ui">_optional_ configuration how to show, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Ui">ui guide</a></param>
      <param name="parameters">_optional_ parameters for the command, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Parameters">parameters guide</a></param>
      <param name="operation">_optional_ change <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Operation">what should happen</a></param>
      <returns>a _new_ toolbar builder - see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Index">guide</a></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.Replace(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton},System.Object,System.Object,System.String)">
      <summary>
            Create button to **replace the current item** in the list with another existing item.
            Can also be used to remove the same button on a toolbar which would have it by default.
            </summary>
      <param name="target">
            _optional_ entity-like target which is in a list of items in on a content-block,
            see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Target">target guide</a></param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="tweak">Functional <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.TweakButtons">Tweak API</a> to modify UI and parameters (new v15.07)</param>
      <param name="ui">_optional_ configuration how to show, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Ui">ui guide</a></param>
      <param name="parameters">_optional_ parameters for the command, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Parameters">parameters guide</a></param>
      <param name="operation">_optional_ change <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Operation">what should happen</a></param>
      <returns>a _new_ toolbar builder - see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Index">guide</a></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.Delete(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton},System.Object,System.Object,System.String)">
      <summary>
             Create (or reconfigure) the button to **delete an item**.
             
             This has a special behavior.
             The `default` toolbar already includes a delete-button in the third group.
             So if the toolbar is is a `default` this will just modify it to force-show.
             But it will still be in the third group of buttons.
             
             For the `empty` toolbar it will just add the button in the normal way.
            
             To change this automatic behavior, use a `operation` = `modify` or `add`
             </summary>
      <param name="target">_optional_ entity-like target, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Target">target guide</a></param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="tweak">Functional <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.TweakButtons">Tweak API</a> to modify UI and parameters (new v15.07)</param>
      <param name="ui">_optional_ configuration how to show, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Ui">ui guide</a></param>
      <param name="parameters">_optional_ parameters for the command, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Parameters">parameters guide</a></param>
      <param name="operation">_optional_ change <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Operation">what should happen</a></param>
      <returns>a _new_ toolbar builder - see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Index">guide</a></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.Edit(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton},System.Object,System.Object,System.Object,System.String)">
      <summary>
            Create button to **edit an item**.
            Can also be used to remove the same button on a toolbar which would have it by default. 
            </summary>
      <param name="target">_optional_ entity-like target, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Target">target guide</a></param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="tweak">Functional <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.TweakButtons">Tweak API</a> to modify UI and parameters (new v15.07)</param>
      <param name="ui">_optional_ configuration how to show, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Ui">ui guide</a></param>
      <param name="parameters">_optional_ parameters for the command, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Parameters">parameters guide</a></param>
      <param name="prefill">_optional_ prefill for the edit-UI, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Prefill">prefill guide</a></param>
      <param name="operation">_optional_ change <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Operation">what should happen</a></param>
      <returns>a _new_ toolbar builder - see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Index">guide</a></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.New(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton},System.Object,System.Object,System.Object,System.String)">
      <summary>
            Create button to **create a new item**.
            Can also be used to remove the same button on a toolbar which would have it by default.
            </summary>
      <param name="target">
            X Options
            * an entity-like target, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Target">target guide</a>
            * a string with the content-type name
            </param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="tweak">Functional <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.TweakButtons">Tweak API</a> to modify UI and parameters (new v15.07)</param>
      <param name="ui">_optional_ configuration how to show, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Ui">ui guide</a></param>
      <param name="parameters">_optional_ parameters for the command, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Parameters">parameters guide</a></param>
      <param name="prefill">_optional_ prefill for the edit-UI, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Prefill">prefill guide</a></param>
      <param name="operation">_optional_ change <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Operation">what should happen</a></param>
      <returns>a _new_ toolbar builder - see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Index">guide</a></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.Data(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton},System.Object,System.Object,System.Object,System.String)">
      <summary>
            Create button to **show a data-admin dialog** with all the data-items / entities of a specific content type.
            Can also be used to remove the same button on a toolbar which would have it by default.
            </summary>
      <param name="target">
            3 Options: 
            * an entity-like target, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Target">target guide</a>
            * a `string` containing the type name
            * a modifier keyword such as `remove` or `-` to remove the button
            </param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="tweak">Functional <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.TweakButtons">Tweak API</a> to modify UI and parameters (new v15.07)</param>
      <param name="filter">object or string with the filters for the data view see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.DataFilter">filter</a></param>
      <param name="ui">_optional_ configuration how to show, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Ui">ui guide</a></param>
      <param name="parameters">_optional_ parameters for the command, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Parameters">parameters guide</a></param>
      <param name="operation">_optional_ change <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Operation">what should happen</a></param>
      <returns>a _new_ toolbar builder - see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Index">guide</a></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.Metadata(System.Object,System.String,ToSic.Lib.Coding.NoParamOrder,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton},System.Object,System.Object,System.Object,System.String,System.String)">
      <summary>
            Create button to **add or edit metadata** to the specified object and using the content-type specified here.
            Can also be used to remove the same button on a toolbar which would have it by default.
            </summary>
      <param name="target">
            The target object which should receive metadata.
            Must support <see cref="T:ToSic.Eav.Metadata.IHasMetadata" />.
            Often an entity-like target, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Target">target guide</a>,
            but can also other metadata supporting objects, like an Asset, Page, Site, etc.
            </param>
      <param name="contentTypes">Name of one or more content-types for which to generate the button(s). For many, use comma `,` to separate. If not specified, will try to lookup config (v14)</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="tweak">Functional <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.TweakButtons">Tweak API</a> to modify UI and parameters (new v15.07)</param>
      <param name="ui">_optional_ configuration how to show, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Ui">ui guide</a></param>
      <param name="parameters">_optional_ parameters for the command, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Parameters">parameters guide</a></param>
      <param name="operation">_optional_ change <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Operation">what should happen</a></param>
      <param name="context">EXPERIMENTAL - not final</param>
      <param name="prefill">_optional_ prefill for the edit-UI, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Prefill">prefill guide</a></param>
      <returns>A new toolbar builder which has been extended with this button</returns>
      <remarks>
            History
            * Added in 2sxc 13
            * contentTypes changed from one to many in v14
            * contentTypes can also have `*` or `SomeType,*` in v14
            * contentTypes can also be optional, in which case it behaves as if it was `*` in v14 - if no config is found, it will not add a metadata-button
            * parameter context added in 2sxc 14 - still WIP/experimental
            * changed ui and parameters to support object in v14.04
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.Publish(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton},System.Object,System.Object,System.String)">
      <summary>
            Create button to publish the current item.
            Can also be used to remove the same button on a toolbar which would have it by default.
            By default it will only appear if the current item is draft/unpublished.
            You can change this (but probably shouldn't) by setting an `operation`. 
            </summary>
      <param name="target">_optional_ entity-like target, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Target">target guide</a></param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="tweak">Functional <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.TweakButtons">Tweak API</a> to modify UI and parameters (new v15.07)</param>
      <param name="ui">_optional_ configuration how to show, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Ui">ui guide</a></param>
      <param name="parameters">_optional_ parameters for the command, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Parameters">parameters guide</a></param>
      <param name="operation">_optional_ change <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Operation">what should happen</a></param>
      <returns>a _new_ toolbar builder - see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Index">guide</a></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.Copy(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton},System.String,System.Object,System.Object,System.Object,System.String,System.String)">
      <summary>
            Create button to **copy an item**.
            Can also be used to remove the same button on a toolbar which would have it by default.
            It needs the item which it will copy as a parameter.
            </summary>
      <param name="target">
            * an entity-like target, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Target">target guide</a>
            * can also be a int (number) entityId. If you only supply the entity ID, you must also supply the `contentType`.
            </param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="tweak">Functional <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.TweakButtons">Tweak API</a> to modify UI and parameters (new v15.07)</param>
      <param name="contentType"></param>
      <param name="ui">_optional_ configuration how to show, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Ui">ui guide</a></param>
      <param name="parameters">_optional_ parameters for the command, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Parameters">parameters guide</a></param>
      <param name="operation">_optional_ change <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Operation">what should happen</a></param>
      <param name="context">EXPERIMENTAL - not final</param>
      <param name="prefill">_optional_ prefill for the edit-UI, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Prefill">prefill guide</a></param>
      <returns>A new toolbar builder which has been extended with this button</returns>
      <remarks>
            Added in v14.02
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.Layout(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton},System.Object,System.Object,System.String)">
      <summary>
            Create Button to **change the view/layout** of the data shown on the page.
            Can also be used to remove the same button on a toolbar which would have it by default.
            </summary>
      <param name="target">_not used ATM_ just here for API consistency</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="tweak">Functional <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.TweakButtons">Tweak API</a> to modify UI and parameters (new v15.07)</param>
      <param name="ui">_optional_ configuration how to show, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Ui">ui guide</a></param>
      <param name="parameters">_optional_ parameters for the command, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Parameters">parameters guide</a></param>
      <param name="operation">_optional_ change <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Operation">what should happen</a></param>
      <returns>a _new_ toolbar builder - see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Index">guide</a></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.Code(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton},System.Object,System.Object,System.String)">
      <summary>
            Create Button to **run JS code**.
            Can also be used to remove the same button on a toolbar which would have it by default. 
            </summary>
      <param name="target">Name of the function to call, without parameters. </param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="tweak">Functional <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.TweakButtons">Tweak API</a> to modify UI and parameters (new v15.07)</param>
      <param name="ui">_optional_ configuration how to show, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Ui">ui guide</a></param>
      <param name="parameters">_optional_ parameters for the command, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Parameters">parameters guide</a></param>
      <param name="operation">_optional_ change <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Operation">what should happen</a></param>
      <returns>a _new_ toolbar builder - see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Index">guide</a></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.Fields(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton},System.Object,System.Object,System.String)">
      <summary>
            Create Button to open a dialog to **manage the fields/attributes** of the content type.
            Can also be used to remove the same button on a toolbar which would have it by default.
            </summary>
      <param name="target"></param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="tweak">Functional <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.TweakButtons">Tweak API</a> to modify UI and parameters (new v15.07)</param>
      <param name="ui">_optional_ configuration how to show, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Ui">ui guide</a></param>
      <param name="parameters">_optional_ parameters for the command, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Parameters">parameters guide</a></param>
      <param name="operation">_optional_ change <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Operation">what should happen</a></param>
      <returns>a _new_ toolbar builder - see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Index">guide</a></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.Template(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton},System.Object,System.Object,System.String)">
      <summary>
            Create Button to **open the edit-template** (source-code) dialog.
            Can also be used to remove the same button on a toolbar which would have it by default.
            </summary>
      <param name="target"></param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="tweak">Functional <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.TweakButtons">Tweak API</a> to modify UI and parameters (new v15.07)</param>
      <param name="ui">_optional_ configuration how to show, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Ui">ui guide</a></param>
      <param name="parameters">_optional_ parameters for the command, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Parameters">parameters guide</a></param>
      <param name="operation">_optional_ change <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Operation">what should happen</a></param>
      <returns>a _new_ toolbar builder - see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Index">guide</a></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.Query(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton},System.Object,System.Object,System.String)">
      <summary>
            Create Button to **open the design/edit query** dialog.
            Can also be used to remove the same button on a toolbar which would have it by default.
            </summary>
      <param name="target"></param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="tweak">Functional <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.TweakButtons">Tweak API</a> to modify UI and parameters (new v15.07)</param>
      <param name="ui">_optional_ configuration how to show, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Ui">ui guide</a></param>
      <param name="parameters">_optional_ parameters for the command, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Parameters">parameters guide</a></param>
      <param name="operation">_optional_ change <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Operation">what should happen</a></param>
      <returns>a _new_ toolbar builder - see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Index">guide</a></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.View(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton},System.Object,System.Object,System.String)">
      <summary>
            Create Button to open the **edit view settings** dialog.
            Can also be used to remove the same button on a toolbar which would have it by default.
            </summary>
      <param name="target"></param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="tweak">Functional <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.TweakButtons">Tweak API</a> to modify UI and parameters (new v15.07)</param>
      <param name="ui">_optional_ configuration how to show, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Ui">ui guide</a></param>
      <param name="parameters">_optional_ parameters for the command, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Parameters">parameters guide</a></param>
      <param name="operation">_optional_ change <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Operation">what should happen</a></param>
      <returns>a _new_ toolbar builder - see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Index">guide</a></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.For(System.Object)">
      <summary>
            Set the main target of this toolbar.
            </summary>
      <param name="target">_optional_ entity-like target, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Target">target guide</a></param>
      <returns>a _new_ toolbar builder - see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Index">guide</a></returns>
      <remarks>
            New in v14.04
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.DetectDemo(ToSic.Eav.Data.ICanBeEntity,ToSic.Lib.Coding.NoParamOrder,System.String)">
      <summary>
            Detect if the toolbar should go into demo-mode.
            
            </summary>
      <param name="root"></param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="message">Optional message or a resources key such as `Resources.ToolbarShowingDemo`</param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.Condition(System.Boolean)">
      <summary>
             Condition to apply if the toolbar would show, but maybe shouldn't.
             For example, you can prevent the toolbar from appearing if it's the Demo-Item.
            
             For expensive conditions, use the overload which accepts a function. 
             </summary>
      <param name="condition">true/false</param>
      <returns>a _new_ toolbar builder - see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Index">guide</a></returns>
      <remarks>
             New in v14.04
             </remarks>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.Condition(System.Func{System.Boolean})">
      <summary>
             Condition to apply if the toolbar would show, but maybe shouldn't.
             For example, you can prevent the toolbar from appearing if it's the Demo-Item.
            
             This accepts a function to check the condition.
             It will only run if the toolbar would already show. 
             </summary>
      <param name="condition">function such as `() =&gt; true`</param>
      <returns>a _new_ toolbar builder - see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Index">guide</a></returns>
      <remarks>
             New in v14.04
             </remarks>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.Group(System.String)">
      <summary>
             Adds a button group to the toolbar.
             All following buttons will be in this group automatically.
            
             Can also be used to remove a group of buttons on the `default` toolbar, such as the group `view`.
             See <a href="https://go.2sxc.org/xref17?xref=Basics.Browser.EditUx.Toolbars.ButtonGroups">list of groups on default</a></summary>
      <param name="name">_optional_ - name of new group or `-name` to remove an existing group.</param>
      <returns></returns>
      <remarks>
             New in v14.08
             </remarks>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.Info(ToSic.Lib.Coding.NoParamOrder,System.String,System.String,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton})">
      <summary>
            Create an info, warning, help or link-button to assist the user.
            </summary>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="target">the target window, eg `_blank` - new in v17; defaults to `null` so that ctrl-click etc. work as expected</param>
      <param name="tweak">Optional function call to tweak the button.</param>
      <param name="link">If provided, will make the button open the link in a new window.</param>
      <returns></returns>
      <remarks>
            * Added in v15.07
            * `target` added in v17 - defaults to nothing, so if you explicitly want a new window, you must set it to `_blank`
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.AsTag(System.Object)">
      <summary>
             Get a toolbar builder which would render to HTML as a standalone tag.
            
             **Important:** Toolbars created using this will behave differently from previous standalone toolbars.
             These standalone toolbars will _not_ float automatically as previous ones did.
             You can still get them to float by adjusting the Settings as you need them.
             
             This is because many years ago, standalone toolbars were configured floated automatically.
             As the APIs got better, this wasn't a great default any more, but we couldn't introduce a breaking change.
             Anything created now with this new API will be new, so this will behave more in line with expectations.
             See also [issue](https://github.com/2sic/2sxc/issues/2838)
             </summary>
      <param name="target">_optional_ entity-like target, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Target">target guide</a></param>
      <returns>a _new_ toolbar builder - see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Index">guide</a></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.AsAttributes(System.Object)">
      <summary>
            Get a toolbar builder which would render to HTML as attributes on an existing tag.
            Note that this is the default, so you will usually not need this. 
            </summary>
      <param name="target">_optional_ entity-like target, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Target">target guide</a></param>
      <returns>a _new_ toolbar builder - see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Index">guide</a></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.AsJson(System.Object)">
      <summary>
            Test code
            </summary>
      <returns>a _new_ toolbar builder - see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Index">guide</a></returns>
      <param name="target">_optional_ entity-like target, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Target">target guide</a></param>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.More(ToSic.Lib.Coding.NoParamOrder,System.Object)">
      <summary>
            Add a `more` button. Not really useful to do, but included for completeness
            </summary>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="ui">_optional_ configuration how to show, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Ui">ui guide</a></param>
      <returns>a _new_ toolbar builder - see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Index">guide</a></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.Settings(ToSic.Lib.Coding.NoParamOrder,System.String,System.String,System.String,System.String,System.String,System.Object,System.Object)">
      <summary>
            Add a `settings` rule to configure what the toolbar should look like. See <a href="https://go.2sxc.org/xref17?xref=JsCode.Toolbars.Settings">JsCode.Toolbars.Settings</a></summary>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="show">`hover` (default), `always`</param>
      <param name="hover">`right` (default), `left`</param>
      <param name="follow"></param>
      <param name="classes">css class names to add to the entire toolbar</param>
      <param name="autoAddMore">placement of the _more_ ellipsis button, `auto` (default), `end`, `start`, `never`</param>
      <param name="ui">_optional_ configuration how to show, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Ui">ui guide</a></param>
      <param name="parameters">Parameters for the command - doesn't really have an effect on Settings, but included for consistency</param>
      <returns>a _new_ toolbar builder - see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Index">guide</a></returns>
      <remarks>
            History
            * Added in 2sxc 13
            * options `auto` and `never` on autoAddMore added in 14.08
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.Parameters(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton},System.Object,System.Object,System.Object,System.String)">
      <summary>
            Adds / updates the `params` rule on the toolbar which contains information for all the buttons
            </summary>
      <param name="target">
            Many options
            1. An Entity-like thing which would be used to prepare default params like `entityId`
            1. A string, which would be the same as using the term on the `parameters`
            1. A object - especially an anonymous object like `new { id = 7, show = true }`
            </param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="ui">_optional_ configuration how to show, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Ui">ui guide</a></param>
      <param name="tweak">Functional <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.TweakButtons">Tweak API</a> to modify UI and parameters (new v16.02)</param>
      <param name="parameters">_optional_ parameters for the command, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Parameters">parameters guide</a></param>
      <param name="prefill">_optional_ prefill for the edit-UI, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Prefill">prefill guide</a></param>
      <param name="context"></param>
      <returns>a _new_ toolbar builder - see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Index">guide</a></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.ItemToolbarBase.ToolbarAsAttributes">
      <summary>
            Generate the attributes to add to a toolbar tag 
            </summary>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.ItemToolbarPicker.ToolbarV10OrNull(System.Object)">
      <summary>
            Check if the configuration we got is a V10 Toolbar
            </summary>
      <param name="toolbar"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.ToolbarRule.#ctor(System.String,System.String,System.String,System.Nullable{System.Char},System.String,ToSic.Sxc.Edit.Toolbar.ToolbarContext)">
      <summary></summary>
      <param name="command"></param>
      <param name="ui"></param>
      <param name="parameters"></param>
      <param name="operation"></param>
      <param name="operationCode">This is a string from the original command, which could affect the operator. It's only used to override the operator if there is a relevant match. </param>
      <param name="context"></param>
    </member>
    <member name="F:ToSic.Sxc.Edit.Toolbar.ToolbarRuleForEntity._urlValueFilterNames">
      <summary>
            The filter for what entity properties to keep in the params. By default, keep all.
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Edit.Toolbar.ToolbarRuleOperation">
      <summary>
             This is just a documentation class to show all possible values for a `operation` parameter.
            
             _WARNING_ Do not reference this object, it can change at any time.
             It's only here for documentation. 
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Edit.Toolbar.ToolbarRuleOperation">ðŸ“– ToolbarRuleOperation</a></para></summary>
    </member>
    <member name="F:ToSic.Sxc.Edit.Toolbar.ToolbarRuleOperation.AddOperation">
      <summary>
            Symbol to make sure a button is explicitly added.
            Useful to force when a button would otherwise remain hidden because of a permission or another condition. 
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Edit.Toolbar.ToolbarRuleOperation.AutoOperation">
      <summary>
            Symbol to add a button but still respect it's internal show/hide conditions. 
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Edit.Toolbar.ToolbarRuleOperation.ModifyOperation">
      <summary>
            Symbol to modify a button in a toolbar - for example to force it to show.
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Edit.Toolbar.ToolbarRuleOperation.RemoveOperation">
      <summary>
            Symbol to remove a button in a toolbar.
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Edit.Toolbar.ToolbarRuleOperation.AddVerb">
      <summary>
            Verb to make sure a button is explicitly added.
            Useful to force when a button would otherwise remain hidden because of a permission or another condition. 
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Edit.Toolbar.ToolbarRuleOperation.AutoVerb">
      <summary>
            Verb to add a button but still respect it's internal show/hide conditions. 
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Edit.Toolbar.ToolbarRuleOperation.ModifyVerb">
      <summary>
            Verb to modify a button in a toolbar - for example to force it to show.
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Edit.Toolbar.ToolbarRuleOperation.RemoveVerb">
      <summary>
            Verb to remove a button in a toolbar.
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Edit.Toolbar.ToolbarRuleTargeted">
      <summary>
            A toolbar rule for a specific target
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Edit.Toolbar.ToolbarRuleTargeted">ðŸ“– ToolbarRuleTargeted</a></para></summary>
    </member>
    <member name="T:ToSic.Sxc.Edit.Toolbar.ToolbarButtonDecorator">
      <summary>
            This is a decorator for Content-Types, which allows special configuration of buttons etc. on that type
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Edit.Toolbar.ToolbarButtonDecorator">ðŸ“– ToolbarButtonDecorator</a></para></summary>
      <remarks>
            WIP new in v14; as of now only used on NoteDecorator, should have more soon
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.ToolbarButtonDecorator.#ctor(ToSic.Eav.Data.IEntity)">
      <summary>
            This is a decorator for Content-Types, which allows special configuration of buttons etc. on that type
            </summary>
      <remarks>
            WIP new in v14; as of now only used on NoteDecorator, should have more soon
            </remarks>
    </member>
    <member name="T:ToSic.Sxc.Edit.Toolbar.ITweakButton">
      <summary>
             Experimental new API in v15.07 to improve how to configure the Ui of a button.
            
             &gt; [!TIP]
             &gt; Read more about this in <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.TweakButtons">ToSic.Sxc.Services.ToolbarBuilder.TweakButtons</a><para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Edit.Toolbar.ITweakButton">ðŸ“– ITweakButton</a></para></summary>
      <remarks>
             Added in v15.07
             </remarks>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.ITweakButton.Note(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.String,System.Int32,System.Int32,System.String)">
      <summary>
            Add a floating note to the button.
            </summary>
      <param name="note">The note/message</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="type">Optional type, like `info` (default), `warning`, `help`</param>
      <param name="background">Background color.</param>
      <param name="delay">Delay show by this duration in ms. If mouse leaves before, it won't appear (new v17).</param>
      <param name="linger">Linger by this duration in ms after the mouse leaves - new v17.</param>
      <param name="format">`html` or `text` (default) - new v17</param>
      <returns></returns>
      <remarks>
            * Added in v15.07
            * `delay` and `linger` added in v17
            * `format` added in v17
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.ITweakButton.Show(System.Boolean)">
      <summary>
            Set the show of this button.
            </summary>
      <param name="show">Optional show value, default is `true`</param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.ITweakButton.Color(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.String)">
      <summary>
            Set the color of this button.
            A color can be `red`, `green` or `#FFCC66` as well as transparent colors such as `#FFCC6699`
            </summary>
      <param name="color">The main color parameter. Can contain two values, comma separated.</param>
      <param name="noParamOrder"></param>
      <param name="background">Background color - will only take affect if the `color` was not set.</param>
      <param name="foreground">Foreground color - will only take affect if the `color` was not set.</param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.ITweakButton.Tooltip(System.String)">
      <summary>
            Set the title / Tooltip of the button.
            </summary>
      <param name="value">The title/tooltip to show</param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.ITweakButton.Group(System.String)">
      <summary>
            Set what group the button is in.
            This is rarely used.
            </summary>
      <param name="value">the group name</param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.ITweakButton.Icon(System.String)">
      <summary>
            Set the icon for this button.
            </summary>
      <param name="value">One of a few predefined names, or a SVG string.</param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.ITweakButton.Classes(System.String)">
      <summary>
            Set one or more classes on the button.
            </summary>
      <param name="value">a string containing one or more CSS class names</param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.ITweakButton.Position(System.Int32)">
      <summary>
            Specify the position of the button.
            `0` means in the very front, `1` is right after the first button, etc.
            `-1` means the last button, `-2` is the second last, etc.
            </summary>
      <param name="value"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.ITweakButton.Ui(System.Object)">
      <summary>
            Add a general ui-rule for things which are not in the standard API.
            </summary>
      <param name="value">a string such as `this=that` or an object which will be parsed/serialized such as `new { this = 27 }`</param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.ITweakButton.Ui(System.String,System.Object)">
      <summary>
            Add a general UI rule for things which are not in the standard API.
            </summary>
      <param name="name">The name/key which comes before the `=`</param>
      <param name="value">The value which comes after the `=`</param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.ITweakButton.FormParameters(System.Object)">
      <summary>
            Add form-parameters to the button - which are available in the `data.parameters` in formulas.
            </summary>
      <param name="value">A string such as `name=value` or an anonymous object such as `new { name = 27 }`</param>
      <returns></returns>
      <remarks>Added in 16.02</remarks>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.ITweakButton.FormParameters(System.String,System.Object)">
      <summary>
            Add form-parameters to the button - which are available in the `data.parameters` in formulas.
            </summary>
      <param name="name">The name/key which comes before the `=`</param>
      <param name="value">The value which comes after the `=`</param>
      <returns></returns>
      <remarks>Added in 16.02</remarks>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.ITweakButton.Parameters(System.Object)">
      <summary>
             Add parameters to the button - which are usually used when executing the command.
            
             &gt; [!TIP]
             &gt; These parameters are used in the page itself and not forwarded to the form.
             &gt; Use <see cref="M:ToSic.Sxc.Edit.Toolbar.ITweakButton.FormParameters(System.Object)" /> for that purpose.
             </summary>
      <param name="value">A string such as `name=value` or an anonymous object such as `new { name = 27 }`</param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.ITweakButton.Parameters(System.String,System.Object)">
      <summary>
             Add parameters to the button - which are usually used when executing the command.
            
             &gt; [!TIP]
             &gt; These parameters are used in the page itself and not forwarded to the form.
             &gt; Use <see cref="M:ToSic.Sxc.Edit.Toolbar.ITweakButton.FormParameters(System.Object)" /> for that purpose.
             </summary>
      <param name="name">The name/key which comes before the `=`</param>
      <param name="value">The value which comes after the `=`</param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.ITweakButton.Prefill(System.Object)">
      <summary>
            Add prefill information to the button, usually for creating new Entities.
            </summary>
      <param name="value">A string such as `name=value` or an anonymous object such as `new { name = 27 }`</param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.ITweakButton.Prefill(System.String,System.Object)">
      <summary>
            Add prefill information to the button, usually for creating new Entities.
            </summary>
      <param name="name">The name/key which comes before the `=`</param>
      <param name="value">The value which comes after the `=`</param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.ITweakButton.Filter(System.Object)">
      <summary>
            Add filter information to the button - usually when opening Data dialogs.
            </summary>
      <param name="value">A string such as `name=value` or an anonymous object such as `new { name = 27 }`</param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Edit.Toolbar.ITweakButton.Filter(System.String,System.Object)">
      <summary>
            Add filter information to the button - usually when opening Data dialogs.
            </summary>
      <param name="name">The name/key which comes before the `=`</param>
      <param name="value">The value which comes after the `=`</param>
      <returns></returns>
    </member>
    <member name="P:ToSic.Sxc.Edit.Toolbar.ITweakButtonInternal.UiMerge">
      <summary>
            List of changes to apply to the UI parameter
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Edit.Toolbar.ITweakButtonInternal.UiMerge">ðŸ“– UiMerge</a></para></summary>
    </member>
    <member name="T:ToSic.Sxc.Engines.EngineBase">
      <summary>
            The foundation for engines - must be inherited by other engines
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Engines.EngineBase">ðŸ“– EngineBase</a></para></summary>
    </member>
    <member name="M:ToSic.Sxc.Engines.EngineBase.#ctor(ToSic.Sxc.Engines.EngineBase.MyServices,System.Object[])">
      <summary>
            Empty constructor, so it can be used in dependency injection
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Engines.EngineBase.Render(ToSic.Sxc.Blocks.Internal.RenderSpecs)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Engines.EngineCheckTemplate.CheckExpectedTemplateErrors(ToSic.Sxc.Blocks.Internal.IView,ToSic.Eav.Apps.Services.IAppContentTypeService)">
      <summary>
            Template Exceptions like missing configuration or defined type not found
            </summary>
      <exception cref="T:ToSic.Sxc.Engines.RenderingException"></exception>
    </member>
    <member name="T:ToSic.Sxc.Engines.EngineDefinitionAttribute">
      <summary>
            Attribute to mark all IEngine implementations
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Engines.EngineDefinitionAttribute">ðŸ“– EngineDefinitionAttribute</a></para></summary>
    </member>
    <member name="T:ToSic.Sxc.Engines.IEngine">
      <summary>
            The sub-system in charge of taking
            - a configuration for an instance (aka Module)
            - a template
            and using all that to produce an html-string for the browser. 
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Engines.IEngine">ðŸ“– IEngine</a></para></summary>
    </member>
    <member name="M:ToSic.Sxc.Engines.IEngine.Render(ToSic.Sxc.Blocks.Internal.RenderSpecs)">
      <summary>
            Renders a template, returning a string with the rendered template.
            </summary>
      <returns>The string - usually HTML - which the engine created. </returns>
    </member>
    <member name="T:ToSic.Sxc.Engines.TokenEngine">
      <summary>
            Rendering Engine for Token based templates (html using [Content:Title] kind of placeholders. 
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Engines.TokenEngine">ðŸ“– TokenEngine</a></para></summary>
    </member>
    <member name="M:ToSic.Sxc.Engines.TokenEngine.#ctor(ToSic.Sxc.Engines.EngineBase.MyServices,ToSic.Lib.DI.LazySvc{ToSic.Sxc.Code.Internal.CodeApiServiceFactory},ToSic.Lib.DI.Generator{ToSic.Eav.Apps.Internal.IAppDataConfigProvider})">
      <summary>
            Rendering Engine for Token based templates (html using [Content:Title] kind of placeholders. 
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Engines.TokenEngine._upgrade6To7">
      <summary>
            Token translation table - to auto-convert tokens as they were written
            pre v7 to be treated as they should in the new convention
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Images.ImageService.GetBestSettings(System.Object)">
      <summary>
            Use the given settings or try to use the default content-settings if available
            </summary>
      <param name="settings"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Images.ImageService.ToAdv(System.Object)">
      <summary>
            Convert to Multi-Resize Settings
            </summary>
      <param name="value"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Images.ImageService.Img(System.Object,System.Object,ToSic.Lib.Coding.NoParamOrder,System.Object,System.Object,System.String,System.String,System.String,System.Object,System.Object,System.Object)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Images.ImageService.Picture(System.Object,System.Object,ToSic.Lib.Coding.NoParamOrder,System.Object,System.Object,System.String,System.String,System.String,System.Object,System.String,System.Object,System.Object,System.Object)">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Images.ImageService.Debug">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Images.ImageService.GetFormat(System.String)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Images.ImageService.Settings(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Object,System.Object,System.Object,System.Object,System.String,System.String,System.String,System.Object,System.String,System.Object)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Images.ImageService.Recipe(System.String)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Images.ImageService.Recipe(ToSic.Sxc.Images.Recipe,ToSic.Lib.Coding.NoParamOrder,System.String,System.Int32,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{ToSic.Sxc.Images.Recipe},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String)">
      <inheritdoc />
    </member>
    <member name="T:ToSic.Sxc.Images.Internal.IImageFormat">
      <summary>
            Describes everything to be known about an image format for resizing or generating source-tags.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Images.Internal.IImageFormat.Format">
      <summary>
            The format name, like 'jpg' or 'png'
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Images.Internal.IImageFormat.MimeType">
      <summary>
            The Mime Type - if known
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Images.Internal.IImageFormat.CanResize">
      <summary>
            Information if this type can be resized
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Images.Internal.IImageFormat.ResizeFormats">
      <summary>
            Other formats this can be resized to, order by best to least good.
            
            Usually used for creating source-tags in HTML
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Images.Internal.ImageConstants.FallbackWidthForSrcSet">
      <summary>
            In case a srcset is being generated with a '*' factor and we don't have a number, assume 1200.
            This is an ideal number, as it's quite big but not huge, and will usually be easily divisible by 2,3,4,6 etc.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Images.Internal.ImageConstants.BuildFileTypes">
      <summary>
            Note: we're keeping our own list, because they are not many, and because the APIs in .net core/framework are different to find the mime types
            </summary>
      <returns></returns>
    </member>
    <member name="F:ToSic.Sxc.Images.Internal.ImageDecorator.ShowWarningGlobalFile">
      <summary>
            Parameter to give the UI when it should show a warning for a global file
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Images.Internal.ImageDecorator.SkipFallbackTitle">
      <summary>
            Disable falling back to the default/alternate title
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Images.Internal.ImageDecorator.DescriptionExtended">
      <summary>
            Detailed description of an image
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Images.Internal.ImageDecorator.AddRecommendations(ToSic.Eav.Metadata.IMetadataOf,System.String,ToSic.Sxc.Code.Internal.ICodeApiService)">
      <summary>
            Optionally add image-metadata recommendations
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Images.Internal.ImageFormat.Format">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Images.Internal.ImageFormat.MimeType">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Images.Internal.ImageFormat.CanResize">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Images.Internal.ImgResizeLinker.Image(System.String,System.Object,System.Object,ToSic.Lib.Coding.NoParamOrder,ToSic.Sxc.Data.IField,System.Object,System.Object,System.Object,System.String,System.String,System.String,System.Object,System.String)">
      <summary>
            Make sure this is in sync with the Link.Image
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Images.Internal.ResponsiveBase">
      <remarks>
            Must be public, otherwise it breaks in dynamic use :(
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Images.Internal.ResponsiveBase.ToString">
      <summary>
            ToString must be specified by each implementation
            </summary>
      <returns></returns>
    </member>
    <member name="P:ToSic.Sxc.Images.Internal.ResponsiveBase.Img">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Images.Internal.ResponsiveBase.Toolbar">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Images.Internal.ResponsiveBase.Description">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Images.Internal.ResponsiveBase.DescriptionExtended">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Images.Internal.ResponsiveBase.Alt">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Images.Internal.ResponsiveBase.Class">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Images.Internal.ResponsiveBase.ShowAll">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Images.Internal.ResponsiveBase.SrcSet">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Images.Internal.ResponsiveBase.Width">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Images.Internal.ResponsiveBase.Height">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Images.Internal.ResponsiveBase.Sizes">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Images.Internal.ResponsiveBase.Src">
      <inheritdoc />
    </member>
    <member name="T:ToSic.Sxc.Images.Internal.ResponsiveImage">
      <remarks>
            Must be public, otherwise it breaks in dynamic use :(
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Images.Internal.ResponsiveImage.Img">
      <summary>
            Same as base / initial implementation, but add srcset if available
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Images.Internal.ResponsivePicture">
      <remarks>
            Must be public, otherwise it breaks in dynamic use :(
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Images.AdvancedSettings.Recipe">
      <summary>
            Default Resize rules for everything which isn't specified more closely in the factors
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.AdvancedSettings.Recipe">ðŸ“– Recipe</a></para></summary>
      <remarks>
            System.Text.Json requires that the case-insensitive property name and type match the parameter in the constructor.
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Images.AdvancedSettings.PiggyBack">
      <summary>
            Piggyback cache to remember previous LINQ queries which already filtered certain combinations
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.AdvancedSettings.PiggyBack">ðŸ“– PiggyBack</a></para></summary>
    </member>
    <member name="T:ToSic.Sxc.Images.IResizeSettings">
      <summary>
             Settings how to resize an image for the `src` or `srcset` attributes.
            
             It's read only, to create it, use the <see cref="T:ToSic.Sxc.Services.IImageService" /><para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.IResizeSettings">ðŸ“– IResizeSettings</a></para></summary>
      <remarks>
             History: Released 2sxc 13.10
             </remarks>
    </member>
    <member name="P:ToSic.Sxc.Images.IResizeSettings.Width">
      <summary>
            Width to resize to.
            If 0, width will not be changed
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.IResizeSettings.Width">ðŸ“– Width</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Images.IResizeSettings.Height">
      <summary>
            Height to resize to.
            If 0, height will not be changed
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.IResizeSettings.Height">ðŸ“– Height</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Images.IResizeSettings.Quality">
      <summary>
            Quality factor for image formats which support quality.
            Usually a value between 0 and 100.
            If 0, quality will not be changed.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.IResizeSettings.Quality">ðŸ“– Quality</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Images.IResizeSettings.ResizeMode">
      <summary>
            Resize mode.
            If empty or "(none)" will not be used. 
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.IResizeSettings.ResizeMode">ðŸ“– ResizeMode</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Images.IResizeSettings.ScaleMode">
      <summary>
            Scale Mode.
            If empty or "(none)" will not be used. 
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.IResizeSettings.ScaleMode">ðŸ“– ScaleMode</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Images.IResizeSettings.Format">
      <summary>
            Target format like 'jpg' or 'png'.
            If empty will not be used. 
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.IResizeSettings.Format">ðŸ“– Format</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Images.IResizeSettings.Factor">
      <summary>
            The resize factor by which the original value (width/height) is scaled
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.IResizeSettings.Factor">ðŸ“– Factor</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Images.IResizeSettings.AspectRatio">
      <summary>
            The aspect ratio to determine the height, in case no height was specified. 
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.IResizeSettings.AspectRatio">ðŸ“– AspectRatio</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Images.IResizeSettings.Parameters">
      <summary>
            Additional url parameters in case the final link would need this.
            Rarely used, but can be used for resize parameters which are not standard. 
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.IResizeSettings.Parameters">ðŸ“– Parameters</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Images.IResizeSettingsInternal.Advanced">
      <summary>
            Settings which are used when img/picture tags are generated with multiple resizes
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.IResizeSettingsInternal.Advanced">ðŸ“– Advanced</a></para></summary>
    </member>
    <member name="T:ToSic.Sxc.Images.OneResize">
      <summary>
            The final sizes to be used when resizing
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.OneResize">ðŸ“– OneResize</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Images.OneResize.ShowAll">
      <summary>
            Will be set based on image metadata, to determine that the image should be shown completely (like a logo) and not cropped.
            This means the image could be a different size than expected
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.OneResize.ShowAll">ðŸ“– ShowAll</a></para></summary>
    </member>
    <member name="T:ToSic.Sxc.Images.Recipe">
      <summary>
            A recipe contains instructions how to generate tags etc. which can contain multiple resized images
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.Recipe">ðŸ“– Recipe</a></para></summary>
      <remarks>
            All the properties are read-only. If you need to override anything, copy it and set the modified values, then use the copy. 
            </remarks>
      <remarks>
            History: Released 2sxc 13.10
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Images.Recipe.#ctor(ToSic.Sxc.Images.Recipe,System.String,System.String,System.String,System.String,System.Int32,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{ToSic.Sxc.Images.Recipe})">
      <summary>
             **Important**
            
             If you call this from your code, always use named parameters, as the parameter order can change in future.
             </summary>
      <param name="original">An original recipe to copy if we want to get a modified recipe based on one which already existed.</param>
      <param name="name">An optional name </param>
      <param name="forTag">Restricts the rule to only apply to specific tags - ATM `img` and `source`</param>
      <param name="forFactor">Restricts the rule to only apply to resizes for a specified factor</param>
      <param name="forCss">Restricts the rule to only apply to pages which have the specified CSS Framework</param>
      <param name="width">Initial width to use when resizing</param>
      <param name="setWidth">Set the `width` attribute if the img width is known</param>
      <param name="setHeight">Set the `height` attribute if the img-height is known</param>
      <param name="variants">Special string containing variants to generate</param>
      <param name="attributes">List of attributes to set on the `img` tag</param>
      <param name="recipes">List of additional recipes which will all inherit values from this master after creation</param>
    </member>
    <member name="M:ToSic.Sxc.Images.Recipe.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{ToSic.Sxc.Images.Recipe})">
      <summary>
            Lighter constructor for json, without parameter Recipe.
            
            **Important**
            If you call this from your code, always use named parameters, as the parameter order can change in future.
            </summary>
      <param name="name">An optional name </param>
      <param name="forTag">Restricts the rule to only apply to specific tags - ATM `img` and `source`</param>
      <param name="forFactor">Restricts the rule to only apply to resizes for a specified factor</param>
      <param name="forCss">Restricts the rule to only apply to pages which have the specified CSS Framework</param>
      <param name="width">Initial width to use when resizing</param>
      <param name="setWidth">Set the `width` attribute if the img width is known</param>
      <param name="setHeight">Set the `height` attribute if the img-height is known</param>
      <param name="variants">Special string containing variants to generate</param>
      <param name="attributes">List of attributes to set on the `img` tag</param>
      <param name="recipes">List of additional recipes which will all inherit values from this master after creation</param>
    </member>
    <member name="P:ToSic.Sxc.Images.Recipe.Name">
      <summary>
            Just an identifier - no technical use
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.Recipe.Name">ðŸ“– Name</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Images.Recipe.ForTag">
      <summary>
            TODO: DOC
            - `img`, `source`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.Recipe.ForTag">ðŸ“– ForTag</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Images.Recipe.ForFactor">
      <summary>
            Determines which factors this recipe should be applied to.
            Null means any factor.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.Recipe.ForFactor">ðŸ“– ForFactor</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Images.Recipe.ForCss">
      <summary>
            WIP, not implemented yet
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.Recipe.ForCss">ðŸ“– ForCss</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Images.Recipe.FactorParsed">
      <summary>
            The resize factor for which this rules is meant.
            Used in cases where there are many such rules and the one will be picked that matches this factor.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.Recipe.FactorParsed">ðŸ“– FactorParsed</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Images.Recipe.Width">
      <summary>
            The initial width to assume in this resize, from which other sizes would be calculated.
            
            If set to 0, it will be ignored. 
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.Recipe.Width">ðŸ“– Width</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Images.Recipe.SetWidth">
      <summary>
            Determines if the img tag will receive a width-attribute
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.Recipe.SetWidth">ðŸ“– SetWidth</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Images.Recipe.SetHeight">
      <summary>
            Determines if the img tag will receive a height-attribute
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.Recipe.SetHeight">ðŸ“– SetHeight</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Images.Recipe.Variants">
      <summary>
             Source-Set rules (comma separated) which will determine what will be generated.
            
             Examples:
             - `1x,1.5x,2x` - screen resolutions
             - `200w,400w,600w,800w,1000w` - pixel sizes
             - `0.5*,1*,1.5*,2*` - multipliers of the originally specified pixel size
            
             _Important: According to the HTML standard you can mix pixel-sizes and multipliers, but not resolutions with any of the other types._
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.Recipe.Variants">ðŸ“– Variants</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Images.Recipe.Attributes">
      <summary>
            Attributes to add to the img tag 
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.Recipe.Attributes">ðŸ“– Attributes</a></para></summary>
      <remarks>
            System.Text.Json requires that the case-insensitive property name and type match the parameter in the constructor.
            We are using string/object because a value could also be { "name": true, "other-name": 5 } in the json configuration
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Images.Recipe.Recipes">
      <summary>
            wip TODO: DOC
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.Recipe.Recipes">ðŸ“– Recipes</a></para></summary>
      <remarks>
            System.Text.Json requires that the case-insensitive property name and type match the parameter in the constructor.
            </remarks>
    </member>
    <member name="T:ToSic.Sxc.Images.RecipeQuality">
      <summary>
            This is not ready yet.
            Goal is that different image formats and different sizes can have other quality specs.
            This is so WebP can use different quality params, or very small JGPs need a higher quality than lager JPGs
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.RecipeQuality">ðŸ“– RecipeQuality</a></para></summary>
    </member>
    <member name="M:ToSic.Sxc.Images.RecipeQuality.#ctor(ToSic.Sxc.Images.RecipeQuality,System.Int32,System.String,System.Int32)">
      <summary>
            This is not ready yet.
            Goal is that different image formats and different sizes can have other quality specs.
            This is so WebP can use different quality params, or very small JGPs need a higher quality than lager JPGs
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Images.RecipeVariant.Size">
      <summary>
            The size - usually 1000 or something in case of 'w', and 1.5 or something in case of 'x'
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Images.RecipeVariant.SizeType">
      <summary>
            Type of size - width or pixel density
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Images.RecipeVariant.Width">
      <summary>
            Image width if specified, in pixels
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Images.RecipeVariant.Height">
      <summary>
            Image height if specified in pixels
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Images.ResizeDimensionGenerator.BestWidthOrHeightBasedOnSrcSet(System.Int32,System.Int32,ToSic.Sxc.Images.RecipeVariant,System.Int32)">
      <summary>
            Get the best matching dimension (width/height) based on what's specified
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Images.ResizeParamMerger">
      <summary>
            This merges predefined settings with custom specified parameters to create a stable resize-Parameters object for further use
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.ResizeParamMerger">ðŸ“– ResizeParamMerger</a></para></summary>
    </member>
    <member name="M:ToSic.Sxc.Images.ResizeParamMerger.#ctor(ToSic.Lib.Logging.ILog)">
      <summary>
            This merges predefined settings with custom specified parameters to create a stable resize-Parameters object for further use
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Images.ResizeParams">
      <summary>
            Helper to process optional parameters and figure out if they should be used or not
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.ResizeParams">ðŸ“– ResizeParams</a></para></summary>
    </member>
    <member name="M:ToSic.Sxc.Images.ResizeParams.#ctor(ToSic.Lib.Logging.ILog)">
      <summary>
            Helper to process optional parameters and figure out if they should be used or not
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Images.ResizeSettings.BasedOn">
      <summary>
            Name of the settings used initially
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.ResizeSettings.BasedOn">ðŸ“– BasedOn</a></para></summary>
    </member>
    <member name="M:ToSic.Sxc.Images.ResizeSettings.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32,System.Int32,System.Double,System.Double,System.String,System.String)">
      <summary>
            Constructor to create new
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Images.ResizeSettings.#ctor(ToSic.Sxc.Images.IResizeSettings,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Int32},System.String,System.String,System.String,System.Collections.Specialized.NameValueCollection,ToSic.Sxc.Images.AdvancedSettings)">
      <summary>
            Constructor to copy
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Images.IResponsiveImage">
      <summary>
             A object which contains everything to create HTML for responsive `img` tags with optimal `srcset` offering all the sizes you may need.
            
             You can simply add this object to the source, like `@image` to render the image - which is the same as `@image.ImgTag`
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.IResponsiveImage">ðŸ“– IResponsiveImage</a></para></summary>
      <remarks>
             History: Released 2sxc 13.10
             </remarks>
    </member>
    <member name="P:ToSic.Sxc.Images.IResponsiveImage.Alt">
      <summary>
            An Alt-description on the image which is retrieved from (in order of priority):
            
            1. the Razor code creating this object using the parameter `imgAlt`
            2. or from image metadata - see <see cref="P:ToSic.Sxc.Images.IResponsiveImage.Description" />
            3. or from the Razor code using the parameter `imgAltFallback` _new v15_
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.IResponsiveImage.Alt">ðŸ“– Alt</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Images.IResponsiveImage.Class">
      <summary>
            The Class of the image. Usually created from these sources
            - The initial call creating this image tag
            - Resize-Settings which may add classes
            - Rule which determines if the image should crop or not, which may add a class
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.IResponsiveImage.Class">ðŸ“– Class</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Images.IResponsiveImage.Description">
      <summary>
            Image description from the image Metadata.
            See also <see cref="P:ToSic.Sxc.Images.IResponsiveImage.Alt" />.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.IResponsiveImage.Description">ðŸ“– Description</a></para></summary>
      <returns>
            * `null` if no metadata exists
            * `""` empty string if metadata exists but no description was given
            * a string containing the added description
            </returns>
      <remarks>Added in v15</remarks>
    </member>
    <member name="P:ToSic.Sxc.Images.IResponsiveImage.DescriptionExtended">
      <summary>
            Extended description, typically used in galleries.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.IResponsiveImage.DescriptionExtended">ðŸ“– DescriptionExtended</a></para></summary>
      <remarks>Added in v16.04</remarks>
    </member>
    <member name="P:ToSic.Sxc.Images.IResponsiveImage.Img">
      <summary>
            The `img` tag which would normally be added to the page automatically.
            You can also use the normal RazorBlade API and do things like `.Alt("description")` etc.
            See also the [RazorBlade Img docs](https://razor-blade.net/api/ToSic.Razor.Html5.Img.html)
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.IResponsiveImage.Img">ðŸ“– Img</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Images.IResponsiveImage.Tag">
      <summary>
            The outermost tag - name not yet final
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.IResponsiveImage.Tag">ðŸ“– Tag</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Images.IResponsiveImage.ShowAll">
      <summary>
            Determines if the image should be shown entirely.
            This usually means that the image is a logo or something, so cropping was not an option.
            This also usually means that the aspect ratio / height may be different than expected
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.IResponsiveImage.ShowAll">ðŸ“– ShowAll</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Images.IResponsiveImage.Height">
      <summary>
            The image height, if it should be set at all. Will be null otherwise. 
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.IResponsiveImage.Height">ðŸ“– Height</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Images.IResponsiveImage.Width">
      <summary>
            The image width, if it should be set at all. Will be null otherwise. 
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.IResponsiveImage.Width">ðŸ“– Width</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Images.IResponsiveImage.SrcSet">
      <summary>
             The SrcSet in case you need to use it in your own custom img-tag.
             Note that it will be null if the image has no reason to have a srcset.
            
             It will only be used for normal `img` tags, but not for `img` tags inside `picture` tags.
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.IResponsiveImage.SrcSet">ðŸ“– SrcSet</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Images.IResponsiveImage.Sizes">
      <summary>
            The sizes in case you need it in your custom img-tag.
            It will only be used for normal `img` tags, but not for `img` tags inside `picture` tags.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.IResponsiveImage.Sizes">ðŸ“– Sizes</a></para></summary>
    </member>
    <member name="M:ToSic.Sxc.Images.IResponsiveImage.Toolbar">
      <summary>
            Get the toolbar to show it on another tag (typically a `figure` around the `picture`)
            or set another toolbar instead.
            </summary>
      <remarks>Added in v16.04</remarks>
    </member>
    <member name="P:ToSic.Sxc.Images.IResponsiveImage.Src">
      <summary>
            The main url, used for main `src` property
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.IResponsiveImage.Src">ðŸ“– Src</a></para></summary>
      <remarks>Added in v13.11</remarks>
    </member>
    <member name="T:ToSic.Sxc.Images.IResponsivePicture">
      <summary>
            A object which contains everything to create HTML for responsive `picture` tags with optimal `srcset` offering all the sizes you may need
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.IResponsivePicture">ðŸ“– IResponsivePicture</a></para></summary>
      <remarks>
            History: Released 2sxc 13.10
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Images.IResponsivePicture.Picture">
      <summary>
            The `picture` tag with everything automatically included.
            See also the [RazorBlade Picture docs](https://razor-blade.net/api/ToSic.Razor.Html5.Picture.html)
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.IResponsivePicture.Picture">ðŸ“– Picture</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Images.IResponsivePicture.Sources">
      <summary>
            The `source` tags as they were auto-generated, in case you want to build the picture tag manually.
            Contains many `source` tags - see [RazorBlade Source docs](https://razor-blade.net/api/ToSic.Razor.Html5.Source.html)
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.IResponsivePicture.Sources">ðŸ“– Sources</a></para></summary>
    </member>
    <member name="T:ToSic.Sxc.Images.ResponsiveParams">
      <summary>
            Helper class to handle all kinds of parameters passed to a responsive tag
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.ResponsiveParams">ðŸ“– ResponsiveParams</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Images.ResponsiveParams.Link">
      <summary>
            The only reliable object which knows about the url - can never be null
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.ResponsiveParams.Link">ðŸ“– Link</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Images.ResponsiveParams.Field">
      <summary>
            The field used for this responsive output - can be null!
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Images.ResponsiveParams.Field">ðŸ“– Field</a></para></summary>
    </member>
    <member name="M:ToSic.Sxc.Integration.Installation.IEnvironmentInstaller.UpgradeMessages">
      <summary>
            Get upgrade messages to show to the user if the upgrade/install needs attention
            </summary>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Integration.Installation.IEnvironmentInstaller.ResumeAbortedUpgrade">
      <summary>
            Manually trigger continue-update
            </summary>
      <returns></returns>
    </member>
    <member name="T:ToSic.Sxc.Integration.Installation.RemoteRouterLink">
      <summary>
            WIP - single location for building router links for installer and app/content infos
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Integration.Installation.RemoteRouterLink.#ctor(ToSic.Eav.Security.Fingerprint.SystemFingerprint,ToSic.Eav.Context.IPlatformInfo)">
      <summary>
            WIP - single location for building router links for installer and app/content infos
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Integration.Modules.BasicModuleUpdater">
      <summary>
            Empty constructor for DI
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Integration.Modules.BasicModuleUpdater.#ctor(ToSic.Eav.Internal.Unknown.WarnUseOfUnknown{ToSic.Sxc.Integration.Modules.BasicModuleUpdater})">
      <summary>
            Empty constructor for DI
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Integration.Modules.IPlatformModuleUpdater.SetAppId(ToSic.Sxc.Context.IModule,System.Nullable{System.Int32})">
      <summary>
            Set the App of a Container / Module
            </summary>
      <param name="instance"></param>
      <param name="appId"></param>
    </member>
    <member name="M:ToSic.Sxc.Integration.Modules.IPlatformModuleUpdater.SetPreview(System.Int32,System.Guid)">
      <summary>
            Set the preview view of the Container / Module
            </summary>
      <param name="instanceId"></param>
      <param name="previewView"></param>
    </member>
    <member name="M:ToSic.Sxc.Integration.Modules.IPlatformModuleUpdater.SetContentGroup(System.Int32,System.Boolean,System.Guid)">
      <summary>
            Persist the Content-Group once created. 
            </summary>
      <param name="instanceId"></param>
      <param name="blockExists"></param>
      <param name="guid"></param>
    </member>
    <member name="M:ToSic.Sxc.Integration.Modules.IPlatformModuleUpdater.UpdateTitle(ToSic.Sxc.Blocks.Internal.IBlock,ToSic.Eav.Data.IEntity)">
      <summary>
            Update the title in the platform
            </summary>
      <param name="block"></param>
      <param name="titleItem"></param>
    </member>
    <member name="T:ToSic.Sxc.Integration.Paths.ServerPaths">
      <summary>
            In the default implementation, all things have the same root so content-path and app-path
            are calculated the same way.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Integration.Paths.ServerPaths.FullAppPath(System.String)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Integration.Paths.ServerPaths.FullContentPath(System.String)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Integration.SxcImportExportEnvironmentBase.#ctor(ToSic.Sxc.Integration.SxcImportExportEnvironmentBase.MyServices,System.String)">
      <summary>
            DI Constructor
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Internal.CompatibilityLevels.CompatibilityLevel10">
      <summary>
            This enforces certain features to go away or appear, like
            - Off: DynamiEntity.Render
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Internal.ModuleSettingNames">
      <summary>
             Contains special constants for setting-names stored in the Dnn/Oqtane module settings.
            
             Note that for historical reasons, the keys are different in Dnn and Oqtane.
             </summary>
    </member>
    <member name="F:ToSic.Sxc.Internal.ModuleSettingNames.AppName">
      <summary>
            This setting will store what App is to be shown on a module. 
            The value must contain the Guid/Name (so the word "Default" or the app guid)
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Internal.ModuleSettingNames.ContentGroup">
      <summary>
            This key is for storing the setting, which content-group (bundle/block) is to be shown in the module.
            The value will be a GUID. 
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Internal.ModuleSettingNames.PreviewView">
      <summary>
            This is used to store the Guid of the Preview-View in the module settings.
            The preview is only used till the App has a real content-group attached,
            after which the content-group will provide the correct view. 
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Internal.Plumbing.PageScopeAccessor">
      <summary>
            Special helper to get a ServiceProvider of the page scope, in scenarios where each module has an own scope. 
            </summary>
      <remarks>
            Default constructor will always work, and use the current service provider as the source
            </remarks>
      <param name="serviceProvider"></param>
    </member>
    <member name="M:ToSic.Sxc.Internal.Plumbing.PageScopeAccessor.#ctor(System.IServiceProvider)">
      <summary>
            Special helper to get a ServiceProvider of the page scope, in scenarios where each module has an own scope. 
            </summary>
      <remarks>
            Default constructor will always work, and use the current service provider as the source
            </remarks>
      <param name="serviceProvider"></param>
    </member>
    <member name="P:ToSic.Sxc.Internal.Plumbing.PageScopeAccessor.ServiceProvider">
      <summary>
            The page level ServiceProvider
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Internal.Plumbing.PageScopeAccessor.ProvidedInModule">
      <summary>
            Determines if this page-scope accessor is from the PageDI or from the Module
            More for internal use, in case we have trouble debugging
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Internal.Plumbing.PageScopedService`1">
      <summary>
            Provide page scoped services
            </summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:ToSic.Sxc.Internal.Plumbing.PageScopedService`1.#ctor(ToSic.Sxc.Internal.Plumbing.PageScopeAccessor)">
      <summary>
            Provide page scoped services
            </summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:ToSic.Sxc.Internal.Plumbing.ParseObject.DNearZero(System.Double)">
      <summary>
            Special helper to verify a double is near zero by at least 1%.
            To test if it's near another number, subtract that first and then check if near zero. 
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Internal.Plumbing.ParseObject.IntOrNull(System.Object)">
      <summary>
            Check if an object
            </summary>
      <param name="value"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Internal.Plumbing.StringExtensions.ReplaceIgnoreCase(System.String,System.String,System.String,System.StringComparison)">
      <summary>
            Returns a new string in which all occurrences of a specified string in the current instance are replaced with another specified string.
            This is to be used in .NET Framework or .netstandard 2.0 because .NET 5+ already has this string.Replace() method
            https://stackoverflow.com/a/36317315
            </summary>
      <param name="value">The string performing the replace method.</param>
      <param name="oldValue">The string to be replaced.</param>
      <param name="newValue">The string replace all occurrences of oldValue.</param>
      <param name="comparisonType">Type of the comparison.</param>
      <returns></returns>
    </member>
    <member name="F:ToSic.Sxc.Internal.SpecialFiles.WebConfigFileName">
      <summary>
            Name of the web.config file which is copied to the 2sxc folder.
            Probably only used in DNN
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Internal.SpecialFiles.WebConfigTemplateFile">
      <summary>
            Name of the template web.config file which is copied to each 2sxc-folder
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Internal.SxcUiConstants.JsonEntityEditNodeName">
      <summary>
            Additional json-node for metadata in serialized entities, if user has edit rights
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Internal.SxcUiConstants.DefaultContextTag">
      <summary>
            Wrapper tag which contains the context information.
            Usually just used in edit mode, but in rare cases also at runtime
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Internal.SxcUiConstants.ClassToMarkContentBlock">
      <summary>
            Decorator crass to mark a content-block in the HTML
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Internal.SharedAssemblyInfo">
      <summary>
            Contains information for all assemblies to use
            </summary>
    </member>
    <member name="T:ToSic.Sxc.LookUp.Internal.LookUpEngineResolver">
      <summary>
            Resolves / builds the LookUp Engine.
            This is the default implementation and used in Oqtane.
            Dnn has its own implementation.
            </summary>
      <param name="lookUps"></param>
    </member>
    <member name="M:ToSic.Sxc.LookUp.Internal.LookUpEngineResolver.#ctor(ToSic.Lib.DI.LazySvc{System.Collections.Generic.IEnumerable{ToSic.Eav.LookUp.ILookUp}})">
      <summary>
            Resolves / builds the LookUp Engine.
            This is the default implementation and used in Oqtane.
            Dnn has its own implementation.
            </summary>
      <param name="lookUps"></param>
    </member>
    <member name="M:ToSic.Sxc.LookUp.Internal.LookUpEngineResolverBase.GetLookUpEngine(System.Int32)">
      <summary>
            Get the lookup engine - if possible from cache, otherwise create a new one
            </summary>
      <param name="moduleId"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.LookUp.Internal.LookUpEngineResolverBase.BuildLookupEngine(System.Int32)">
      <summary>
            Build a new lookup engine - to be overriden in Dnn and other implementations
            </summary>
      <param name="moduleId"></param>
      <returns></returns>
    </member>
    <member name="F:ToSic.Sxc.LookUp.Internal.LookUpEngineResolverBase.SourcesByModuleId">
      <summary>
            Cache sources by module ID, so we don't have to re-create them every time.
            They remain the same throughout a request.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.LookUp.Internal.LookUpEngineResolverBase.AddHttpAndDiSources(ToSic.Eav.LookUp.LookUpEngine)">
      <summary>
            Get all http sources which are available in the current context.
            But only if they have not already been added to the list.
            - QueryString
            - Query
            - Form (Dnn only)
            </summary>
      <param name="existingList"></param>
      <returns></returns>
    </member>
    <member name="T:ToSic.Sxc.LookUp.LookUpCmsBlock">
      <inheritdoc />
      <summary>
            special "fake" value provider, which also transports the Sxc-dependency to underlying layers
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.LookUp.LookUpCmsBlock">ðŸ“– LookUpCmsBlock</a></para></summary>
      <inheritdoc />
      <remarks>
            The class constructor, can optionally take a dictionary to reference with, otherwise creates a new one
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.LookUp.LookUpCmsBlock.#ctor(System.String,ToSic.Sxc.Blocks.Internal.IBlock)">
      <inheritdoc />
      <summary>
            special "fake" value provider, which also transports the Sxc-dependency to underlying layers
            </summary>
      <inheritdoc />
      <remarks>
            The class constructor, can optionally take a dictionary to reference with, otherwise creates a new one
            </remarks>
    </member>
    <member name="F:ToSic.Sxc.LookUp.LookUpConstants.InstanceContext">
      <summary>
            This marks a special LookUp provider which is passed around through the system
            As of now, this special source only offers two properties
            * a special property which is not a lookup but contains the Instance object which is sometimes needed passed on
            * a lookup value ShowDrafts which informs if the user may see drafts or not
            </summary>
    </member>
    <member name="T:ToSic.Sxc.LookUp.LookUpForTokenTemplate">
      <summary>
            LookUp for creating token based templates. In addition to retrieving values, it also resolves special tokens like
            - repeater:index
            - repeater:isfirst
            - etc.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.LookUp.LookUpForTokenTemplate">ðŸ“– LookUpForTokenTemplate</a></para></summary>
      <remarks>
            Only use this for Token templates, do not use for normal lookups which end up in data-sources.
            The reason is that this tries to respect culture formatting, which will cause trouble (numbers with comma etc.) when trying to
            use in other systems.
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.LookUp.LookUpForTokenTemplate.#ctor(System.String,ToSic.Sxc.Data.IDynamicEntity,System.Int32,System.Int32)">
      <summary>
            LookUp for creating token based templates. In addition to retrieving values, it also resolves special tokens like
            - repeater:index
            - repeater:isfirst
            - etc.
            </summary>
      <remarks>
            Only use this for Token templates, do not use for normal lookups which end up in data-sources.
            The reason is that this tries to respect culture formatting, which will cause trouble (numbers with comma etc.) when trying to
            use in other systems.
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.LookUp.LookUpForTokenTemplate.GetProperty(System.String,System.String)">
      <summary>
            Get Property out of NameValueCollection
            </summary>
      <param name="strPropertyName"></param>
      <param name="strFormat"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.LookUp.LookUpForTokenTemplate.Get(System.String)">
      <inheritdoc />
    </member>
    <member name="T:ToSic.Sxc.LookUp.LookUpInAppProperty">
      <summary>
            Look up things in app-settings, app-resources etc.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.LookUp.LookUpInAppProperty">ðŸ“– LookUpInAppProperty</a></para></summary>
    </member>
    <member name="M:ToSic.Sxc.LookUp.LookUpInAppProperty.#ctor(System.String,ToSic.Sxc.Apps.IApp)">
      <summary>
            Look up things in app-settings, app-resources etc.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.LookUp.LookUpInAppProperty.Get(System.String,System.String)">
      <inheritdoc />
    </member>
    <member name="T:ToSic.Sxc.LookUp.QueryStringLookUp">
      <summary>
            LookUp provider for query string parameters.
            It handles the normal `key=value` query string parameters and also the special `OriginalParameters` query string parameter.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.LookUp.QueryStringLookUp">ðŸ“– QueryStringLookUp</a></para></summary>
    </member>
    <member name="M:ToSic.Sxc.LookUp.QueryStringLookUp.#ctor(ToSic.Lib.DI.LazySvc{ToSic.Sxc.Web.Internal.DotNet.IHttp})">
      <summary>
            LookUp provider for query string parameters.
            It handles the normal `key=value` query string parameters and also the special `OriginalParameters` query string parameter.
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Polymorphism.Internal.PolymorphConfigReader">
      <summary>
            Mini service to read the polymorph config of the app
            and then resolve the edition based on an <see cref="T:ToSic.Sxc.Polymorphism.IResolver" /></summary>
      <param name="serviceProvider"></param>
    </member>
    <member name="M:ToSic.Sxc.Polymorphism.Internal.PolymorphConfigReader.#ctor(System.IServiceProvider)">
      <summary>
            Mini service to read the polymorph config of the app
            and then resolve the edition based on an <see cref="T:ToSic.Sxc.Polymorphism.IResolver" /></summary>
      <param name="serviceProvider"></param>
    </member>
    <member name="M:ToSic.Sxc.Polymorphism.Internal.PolymorphConfigReader.SplitRule(System.String)">
      <summary>
            Split the rule, which should have a "Resolver?parameters" syntax
            </summary>
      <param name="rule"></param>
    </member>
    <member name="T:ToSic.Sxc.Polymorphism.IResolver">
      <summary>
            A polymorphism resolver - which can determine alternate editions for a view / template
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Polymorphism.IResolver">ðŸ“– IResolver</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Razor.Internal.IRazor.Path">
      <summary>
            The path to this Razor WebControl.
            This is for consistency, because asp.net Framework has a property "VirtualPath" whereas .net core uses "Path"
            From now on it should always be Path for cross-platform code
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Razor.Internal.IRazor14`2.DynamicModel">
      <summary>
            Dynamic object containing parameters. So in Dnn it contains the PageData, in Oqtane it contains the Model
            </summary>
      <remarks>
            New in v12
            </remarks>
    </member>
    <member name="T:ToSic.Sxc.Search.ICustomizeSearch">
      <summary>
             This interface marks custom code which views use to customize how search treats data of that view.
             It's meant for customizing the internal indexer of the platform, _not_ for Google Search.
            
             To use it, create a custom code (.cs) file which implements this interface.
             You can also inherit from a DynamicCode base class (like Code12) if you need more functionality. 
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Search.ICustomizeSearch">ðŸ“– ICustomizeSearch</a></para></summary>
      <remarks>
             History: Released v12.02
             </remarks>
    </member>
    <member name="M:ToSic.Sxc.Search.ICustomizeSearch.CustomizeSearch(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{ToSic.Sxc.Search.ISearchItem}},ToSic.Sxc.Context.IModule,System.DateTime)">
      <summary>
            Will be called by the search indexer to pre-process the results. 
            </summary>
      <param name="searchInfos">Dictionary containing the streams and items in the stream for this search.</param>
      <param name="moduleInfo">Module information with which you can find out what page it's on etc.</param>
      <param name="beginDate">Last time the indexer ran - because the data you will get is only what was modified since.</param>
    </member>
    <member name="T:ToSic.Sxc.Search.ISearchItem">
      <summary>
            Defines an item in the search system - which is prepared by Sxc, and can be customized as needed
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Search.ISearchItem">ðŸ“– ISearchItem</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Search.ISearchItem.Title">
      <summary>
            Title in search results
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Search.ISearchItem.Title">ðŸ“– Title</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Search.ISearchItem.Description">
      <summary>
            Description in search results
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Search.ISearchItem.Description">ðŸ“– Description</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Search.ISearchItem.Body">
      <summary>
            Contents of this item - will be indexed
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Search.ISearchItem.Body">ðŸ“– Body</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Search.ISearchItem.Url">
      <summary>
            Url to go to, when looking at the details of this search result
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Search.ISearchItem.Url">ðŸ“– Url</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Search.ISearchItem.ModifiedTimeUtc">
      <summary>
            Timestamp in GMT / UTC
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Search.ISearchItem.ModifiedTimeUtc">ðŸ“– ModifiedTimeUtc</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Search.ISearchItem.IsActive">
      <summary>
            Determines if this item should appear in search or be ignored
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Search.ISearchItem.IsActive">ðŸ“– IsActive</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Search.ISearchItem.QueryString">
      <summary>
            Query String params to access this item
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Search.ISearchItem.QueryString">ðŸ“– QueryString</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Search.ISearchItem.CultureCode">
      <summary>
            Culture code, for language sensitive searches
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Search.ISearchItem.CultureCode">ðŸ“– CultureCode</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Search.ISearchItem.Entity">
      <summary>
            The underlying data in the search
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Search.ISearchItem.Entity">ðŸ“– Entity</a></para></summary>
    </member>
    <member name="M:ToSic.Sxc.Services.AdamService.File(System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Services.AdamService.File(System.String)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Services.AdamService.File(ToSic.Sxc.Data.IField)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Services.AdamService.Folder(System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Services.AdamService.Folder(ToSic.Sxc.Data.IField)">
      <inheritdoc />
    </member>
    <member name="T:ToSic.Sxc.Services.IAdamService">
      <summary>
            WIP - Adam Service for additional ADAM operations such as retrieving a single file
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.IAdamService">ðŸ“– IAdamService</a></para></summary>
    </member>
    <member name="M:ToSic.Sxc.Services.IAdamService.File(System.Int32)">
      <summary>
            Retrieve a file by int-id (usually the ID managed by the platform)
            </summary>
      <param name="id">File ID</param>
      <returns>The file object or null if not found or something else went wrong.</returns>
    </member>
    <member name="M:ToSic.Sxc.Services.IAdamService.File(System.String)">
      <summary>
            Retrieve a file using the string-key such as "file:72"
            </summary>
      <param name="id">File ID String</param>
      <returns>The file object or null if not found or something else went wrong.</returns>
    </member>
    <member name="M:ToSic.Sxc.Services.IAdamService.File(ToSic.Sxc.Data.IField)">
      <summary>
            Retrieve a file referenced in the field
            </summary>
      <param name="field"></param>
      <returns>The file object or null if not found or something else went wrong.</returns>
    </member>
    <member name="M:ToSic.Sxc.Services.IAdamService.Folder(System.Int32)">
      <summary>
            Provides an Adam Folder for the ID
            </summary>
      <param name="id">Folder ID</param>
      <returns>An Adam object for navigating the assets</returns>
    </member>
    <member name="M:ToSic.Sxc.Services.IAdamService.Folder(ToSic.Sxc.Data.IField)">
      <summary>
            Provides an Adam Folder for this item and field
            </summary>
      <param name="field">The Field information object for which to get the folder</param>
      <returns>An Adam object for navigating the assets</returns>
    </member>
    <member name="F:ToSic.Sxc.Services.CmsService.CmsServiceStringWysiwyg.WysiwygContainerClass">
      <summary>
            The container Class - must usually be assigned, so that CSS inside it works
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Services.CmsService.CmsServiceStringWysiwyg.WysiwygDebugClass">
      <summary>
            Debug class to show debug borders etc. with CSS
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Services.CmsService.CmsServiceStringWysiwyg.HtmlForStringAndWysiwyg(System.String)">
      <summary>
            Note: very expressive name for logs
            </summary>
      <param name="value"></param>
    </member>
    <member name="P:ToSic.Sxc.Services.Internal.IContentSecurityPolicyService.IsEnforced">
      <summary>
             You can determine if CSP should report only. You cannot change it in code.
            
             To enable, do this in the settings (Global or Site)
             </summary>
    </member>
    <member name="P:ToSic.Sxc.Services.Internal.IContentSecurityPolicyService.IsEnabled">
      <summary>
             Tells you if CSP is enabled or not. You cannot change it in code.
            
             To enable, do this in the settings (Global or Site)
             </summary>
    </member>
    <member name="M:ToSic.Sxc.Services.Internal.IContentSecurityPolicyService.Add(System.String,System.String[])">
      <summary>
             Add a CSP rule where you also specify the name.
            
             Example: `cspService.Add("default-src", "'self'")`
            
             </summary>
      <param name="name"></param>
      <param name="values"></param>
    </member>
    <member name="T:ToSic.Sxc.Services.Internal.DynamicCodeService">
      <summary>
            WIP - goal is to have a DI factory which creates DynamicCode objects for use in Skins and other external controls
            Not sure how to get this to work, since normally we always start with a code-file, and here we don't have one!
            </summary>
      <summary>
            WIP - goal is to have a DI factory which creates DynamicCode objects for use in Skins and other external controls
            Not sure how to get this to work, since normally we always start with a code-file, and here we don't have one!
            </summary>
      <summary>
            WIP - goal is to have a DI factory which creates DynamicCode objects for use in Skins and other external controls
            Not sure how to get this to work, since normally we always start with a code-file, and here we don't have one!
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Services.Internal.DynamicCodeService.ScopedServiceProvider">
      <summary>
            This is for all the services used here, or also for services needed in inherited classes which will need the same scoped objects
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Services.Internal.DynamicCodeService.App(ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Int32},System.Nullable{System.Int32},ToSic.Eav.Context.ISite,System.Nullable{System.Boolean})">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Services.Internal.DynamicCodeService.AppOfSite">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Services.Internal.DynamicCodeService.AppOfSite(ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Int32},ToSic.Eav.Context.ISite,System.Nullable{System.Boolean})">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Services.Internal.DynamicCodeService.OfApp(System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Services.Internal.DynamicCodeService.OfApp(System.Int32,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Services.Internal.DynamicCodeService.OfApp(ToSic.Eav.Apps.IAppIdentity)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Services.Internal.DynamicCodeService.OfModule(System.Int32,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Services.Internal.DynamicCodeService.OfSite">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Services.Internal.DynamicCodeService.OfSite(System.Int32)">
      <inheritdoc />
    </member>
    <member name="F:ToSic.Sxc.Services.Internal.MapsCoordinates.Defaults">
      <summary>
            The default coordinates have a trailing 1.
            This way we can detect if it's using the default or the configured values
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Services.Internal.ServiceForDynamicCode">
      <summary>
            Internal special base class for services which link to the dynamic code root
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Services.Internal.ServiceForDynamicCode.#ctor(System.String)">
      <summary>
            Internal special base class for services which link to the dynamic code root
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Services.Internal.ServiceForDynamicCode.ConnectToRoot(ToSic.Sxc.Code.Internal.ICodeApiService)">
      <summary>
            Connect to CodeRoot and it's log
            </summary>
      <param name="codeRoot"></param>
    </member>
    <member name="M:ToSic.Sxc.Services.Internal.ServiceForDynamicCode.ConnectToRoot(ToSic.Sxc.Code.Internal.ICodeApiService,ToSic.Lib.Logging.ILog)">
      <summary>
            Connect to CodeRoot and a custom log
            </summary>
      <param name="codeRoot"></param>
      <param name="parentLog"></param>
    </member>
    <member name="M:ToSic.Sxc.Services.Internal.LinkServiceBase.To(ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Int32},System.String,System.Object,System.String,System.String)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Services.Internal.LinkServiceBase.Base">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Services.Internal.LinkServiceBase.Image(System.String,System.Object,System.Object,ToSic.Lib.Coding.NoParamOrder,ToSic.Sxc.Data.IField,System.Object,System.Object,System.Object,System.String,System.String,System.String,System.Object,System.String,System.Object)">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Services.Internal.LinkServiceBase.Debug">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Services.Internal.LinkServiceBase.CombineApiWithQueryString(System.String,System.String)">
            Combine api with query string.
        </member>
    <member name="M:ToSic.Sxc.Services.Internal.MailServiceBase.ConnectToRoot(ToSic.Sxc.Code.Internal.ICodeApiService)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Services.Internal.MailServiceBase.Send(System.Net.Mail.MailMessage)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Services.Internal.MailServiceBase.Create(ToSic.Lib.Coding.NoParamOrder,System.Object,System.Object,System.Object,System.Object,System.Object,System.String,System.String,System.Nullable{System.Boolean},System.Text.Encoding,System.Object)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Services.Internal.MailServiceBase.Send(ToSic.Lib.Coding.NoParamOrder,System.Object,System.Object,System.Object,System.Object,System.Object,System.String,System.String,System.Nullable{System.Boolean},System.Text.Encoding,System.Object)">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Services.Internal.IModuleService.MoreTags">
      <summary>
            Tags added by code, errors, TurnOn etc. which are added to the end of the module.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Services.Internal.IModuleService.AddToMore(ToSic.Razor.Blade.IHtmlTag,System.String,System.Boolean)">
      <summary>
            Add a tag (eg. a TurnOn) to the end of the module
            </summary>
      <param name="tag"></param>
      <param name="nameId"></param>
      <param name="noDuplicates"></param>
    </member>
    <member name="T:ToSic.Sxc.Services.Internal.ITurnOnService">
      <summary>
            turnOn Service helps initialize / boot JavaScripts when all requirements (usually dependencies) are ready.
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Services.Internal.UserSourceProvider">
      <summary>
             Base class to provide data to the UserService.
            
             Must be overriden in each platform.
             </summary>
    </member>
    <member name="M:ToSic.Sxc.Services.Internal.UserSourceProvider.#ctor(System.String)">
      <summary>
             Base class to provide data to the UserService.
            
             Must be overriden in each platform.
             </summary>
    </member>
    <member name="P:ToSic.Sxc.Services.Internal.UsersService.SiteId">
      <summary>
            Helper method to get SiteId.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Services.Internal.UsersService.UserId(System.String)">
      <summary>
            Helper method to parse UserID from user identity token.
            </summary>
      <param name="identityToken"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Services.ConvertService16.ToSic#Sxc#Services#IConvertService16#As``1(ToSic.Eav.Data.ICanBeEntity,ToSic.Lib.Coding.NoParamOrder,System.Boolean)">
      <summary>
            EXPERIMENTAL
            </summary>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Services.ConvertService16.ToSic#Sxc#Services#IConvertService16#AsList``1(System.Collections.Generic.IEnumerable{ToSic.Eav.Data.ICanBeEntity},ToSic.Lib.Coding.NoParamOrder,System.Boolean)">
      <summary>
            EXPERIMENTAL
            </summary>
      <returns></returns>
    </member>
    <member name="T:ToSic.Sxc.Services.IConvertService">
      <summary>
            Conversion helper for things which are very common in web-code like Razor and WebAPIs.
            It's mainly a safe conversion from anything to a target-type.
            
            Some special things it does:
            * Strings like "4.2" reliably get converted to int 4 which would otherwise return 0
            * Numbers like 42 reliably converts to bool true which would otherwise return false
            * Numbers like 42.5 reliably convert to strings "42.5" instead of "42,5" in certain cultures
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.IConvertService">ðŸ“– IConvertService</a></para></summary>
      <remarks>
            New in v12.05
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.IConvertService.To``1(System.Object)">
      <summary>
            Convert any object safely to the desired type T.
            If conversion fails, it will return `default(T)`, which is 0 for most numbers, `false` for boolean or `null` for strings or objects.
            </summary>
      <typeparam name="T"></typeparam>
      <param name="value"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Services.IConvertService.To``1(System.Object,ToSic.Lib.Coding.NoParamOrder,``0)">
      <summary>
            Convert any object safely to the desired type T.
            If conversion fails, it will return the `fallback` parameter as given.
            Since the fallback is typed, you can usually call this method without specifying T explicitly, so this should work:
            
            ```
            var c1 = Convert.To("5", 100); // will return 5
            var c2 = Convert.To("", 100);  // will return 100
            ```
            </summary>
      <typeparam name="T"></typeparam>
      <param name="value"></param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">The value used if conversion fails.</param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Services.IConvertService.ToBool(System.Object)">
      <summary>
             Convert any object safely to bool.
             This does the same as <see cref="M:ToSic.Sxc.Services.IConvertService.To``1(System.Object)" /> but this is easier to type in Razor.
            
             _Note that it's called ToBool, not ToBoolean, because the core type is also called bool, not boolean. This is different from `System.Convert.ToBoolean(...)`_
             </summary>
    </member>
    <member name="M:ToSic.Sxc.Services.IConvertService.ToBool(System.Object,System.Boolean)">
      <summary>
            Convert any object safely to bool, or if that fails, return the fallback value.
            
            _Note that it's called ToBool, not ToBoolean, because the core type is also called bool, not boolean. This is different from `System.Convert.ToBoolean(...)`_
            </summary>
      <param name="value"></param>
      <param name="fallback"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Services.IConvertService.ToDecimal(System.Object)">
      <summary>
            Convert any object safely to decimal.
            This does the same as <see cref="M:ToSic.Sxc.Services.IConvertService.To``1(System.Object)" /> but this is easier to type in Razor.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Services.IConvertService.ToDecimal(System.Object,System.Decimal)">
      <summary>
            Convert any object safely to decimal, or if that fails, return the fallback value.
            This does the same as <see cref="M:ToSic.Sxc.Services.IConvertService.To``1(System.Object)" /> but this is easier to type in Razor.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Services.IConvertService.ToDouble(System.Object)">
      <summary>
            Convert any object safely to double.
            This does the same as <see cref="M:ToSic.Sxc.Services.IConvertService.To``1(System.Object)" /> but this is easier to type in Razor.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Services.IConvertService.ToDouble(System.Object,System.Double)">
      <summary>
            Convert any object safely to double, or if that fails, return the fallback value.
            This does the same as <see cref="M:ToSic.Sxc.Services.IConvertService.To``1(System.Object)" /> but this is easier to type in Razor.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Services.IConvertService.ToFloat(System.Object)">
      <summary>
             Convert any object safely to float.
             This does the same as <see cref="M:ToSic.Sxc.Services.IConvertService.To``1(System.Object)" /> but this is easier to type in Razor.
            
             _Note that it's called ToFloat, not ToSingle, because the core type is also called float, not single. This is different from `System.Convert.ToSingle(...)`_
             </summary>
    </member>
    <member name="M:ToSic.Sxc.Services.IConvertService.ToFloat(System.Object,System.Single)">
      <summary>
             Convert any object safely to float, or if that fails, return the fallback value.
             This does the same as <see cref="M:ToSic.Sxc.Services.IConvertService.To``1(System.Object)" /> but this is easier to type in Razor.
            
             _Note that it's called ToFloat, not ToSingle, because the core type is also called float, not single. This is different from `System.Convert.ToSingle(...)`_
             </summary>
    </member>
    <member name="M:ToSic.Sxc.Services.IConvertService.ToInt(System.Object)">
      <summary>
            Convert any object safely to standard int.
            This does the same as <see cref="M:ToSic.Sxc.Services.IConvertService.To``1(System.Object)" /> but this is easier to type in Razor.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Services.IConvertService.ToInt(System.Object,System.Int32)">
      <summary>
            Convert any object safely to standard int, or if that fails, return the fallback value.
            This does the same as <see cref="M:ToSic.Sxc.Services.IConvertService.To``1(System.Object)" /> but this is easier to type in Razor.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Services.IConvertService.ToGuid(System.Object)">
      <summary>
            Convert any object safely to a Guid
            This does the same as <see cref="M:ToSic.Sxc.Services.IConvertService.To``1(System.Object)" /> but this is easier to type in Razor.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Services.IConvertService.ToGuid(System.Object,System.Guid)">
      <summary>
            Convert any object safely to standard guid, or if that fails, return the fallback value.
            This does the same as <see cref="M:ToSic.Sxc.Services.IConvertService.To``1(System.Object)" /> but this is easier to type in Razor.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Services.IConvertService.ToString(System.Object)">
      <summary>
            Convert any object safely to string.
            This does the same as <see cref="M:ToSic.Sxc.Services.IConvertService.To``1(System.Object)" /> but this is easier to type in Razor.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Services.IConvertService.ToString(System.Object,System.String,ToSic.Lib.Coding.NoParamOrder,System.Boolean)">
      <summary>
            Convert any object safely to string - or if that fails, return the fallback value.
            
            This does **NOT** do the same as <see cref="!:To&lt;T&gt;(object, string, T)" />.
            In the standard implementation would only give you the fallback, if conversion failed.
            But this ToString will also give you the fallback, if the result is null. 
            </summary>
      <param name="value">The value to convert</param>
      <param name="fallback">Fallback in case conversion fails or result is null</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallbackOnNull">Determine that nulls should also fallback, default is `true`</param>
    </member>
    <member name="M:ToSic.Sxc.Services.IConvertService.ForCode(System.Object)">
      <summary>
             Convert any object safely to string to put into source code like HTML-attributes, inline-JavaScript or similar.
             This is usually used to ensure numbers, booleans and dates are in a format which works.
             Especially useful when giving data to a JavaScript, Json-Fragment or an Html Attribute.
            
             * booleans will be `true` or `false` (not `True` or `False`)
             * numbers will have a . notation and never a comma (like in de-DE cultures)
             * dates will convert to ISO format without time zone
             </summary>
    </member>
    <member name="M:ToSic.Sxc.Services.IConvertService.ForCode(System.Object,System.String)">
      <summary>
            Same as <see cref="M:ToSic.Sxc.Services.IConvertService.ForCode(System.Object)" />, but with fallback, in case the conversion fails.
            </summary>
      <returns></returns>
    </member>
    <member name="P:ToSic.Sxc.Services.IConvertService.Json">
      <summary>
            Sub-Service to convert JSON
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.IConvertService.Json">ðŸ“– Json</a></para></summary>
    </member>
    <member name="T:ToSic.Sxc.Services.IConvertService16">
      <summary>
            Conversion helper for things which are very common in web-code like Razor and WebAPIs.
            It's mainly a safe conversion from anything to a target-type.
            
            Some special things it does:
            * Strings like "4.2" reliably get converted to int 4 which would otherwise return 0
            * Numbers like 42 reliably converts to bool true which would otherwise return false
            * Numbers like 42.5 reliably convert to strings "42.5" instead of "42,5" in certain cultures
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.IConvertService16">ðŸ“– IConvertService16</a></para></summary>
      <remarks>
            * New in v16.03
            * Difference to <see cref="T:ToSic.Sxc.Services.IConvertService" /> is that the param `fallback` must always be named
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.IConvertService16.To``1(System.Object,ToSic.Lib.Coding.NoParamOrder,``0)">
      <summary>
            Convert any object safely to the desired type.
            If conversion fails, it will return the `fallback` parameter as given, or `default(T)`.
            Since the fallback is typed, you can usually call this method without specifying T explicitly, so this should work:
            
            ```
            var c1 = Convert.To("5", fallback: 100); // will return 5
            var c2 = Convert.To("", fallback: 100);  // will return 100
            var c1 = Convert.To(""); // will return 0
            ```
            </summary>
      <typeparam name="T"></typeparam>
      <param name="value">value to convert</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">The value used if conversion fails. If not specified, will use `default(T)`</param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Services.IConvertService16.ToBool(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Boolean)">
      <summary>
            Convert any object safely to bool, or if that fails, return the fallback value.
            
            _Note that it's called ToBool, not ToBoolean, because the core type is also called bool, not boolean. This is different from `System.Convert.ToBoolean(...)`_
            </summary>
      <param name="value">value to convert</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">The value used if conversion fails. Defaults to `false`.</param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Services.IConvertService16.ToDecimal(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Decimal)">
      <summary>
            Convert any object safely to decimal, or if that fails, return the fallback value.
            This does the same as <see cref="M:ToSic.Sxc.Services.IConvertService16.To``1(System.Object,ToSic.Lib.Coding.NoParamOrder,``0)" /> but this is easier to type in Razor.
            </summary>
      <param name="value">value to convert</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">The value used if conversion fails. Defaults to `0`.</param>
    </member>
    <member name="M:ToSic.Sxc.Services.IConvertService16.ToDouble(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Double)">
      <summary>
            Convert any object safely to double, or if that fails, return the fallback value.
            This does the same as <see cref="M:ToSic.Sxc.Services.IConvertService16.To``1(System.Object,ToSic.Lib.Coding.NoParamOrder,``0)" /> but this is easier to type in Razor.
            </summary>
      <param name="value">value to convert</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">The value used if conversion fails. Defaults to `0`.</param>
    </member>
    <member name="M:ToSic.Sxc.Services.IConvertService16.ToFloat(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Single)">
      <summary>
             Convert any object safely to float, or if that fails, return the fallback value.
             This does the same as <see cref="M:ToSic.Sxc.Services.IConvertService16.To``1(System.Object,ToSic.Lib.Coding.NoParamOrder,``0)" /> but this is easier to type in Razor.
            
             _Note that it's called ToFloat, not ToSingle, because the core type is also called float, not single. This is different from `System.Convert.ToSingle(...)`_
             </summary>
      <param name="value">value to convert</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">The value used if conversion fails. Defaults to `0`.</param>
    </member>
    <member name="M:ToSic.Sxc.Services.IConvertService16.ToInt(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Int32)">
      <summary>
            Convert any object safely to standard int, or if that fails, return the fallback value.
            This does the same as <see cref="M:ToSic.Sxc.Services.IConvertService16.To``1(System.Object,ToSic.Lib.Coding.NoParamOrder,``0)" /> but this is easier to type in Razor.
            </summary>
      <param name="value">value to convert</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">The value used if conversion fails. Defaults to `0`.</param>
    </member>
    <member name="M:ToSic.Sxc.Services.IConvertService16.ToGuid(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Guid)">
      <summary>
            Convert any object safely to standard guid, or if that fails, return the fallback value.
            This does the same as <see cref="M:ToSic.Sxc.Services.IConvertService16.To``1(System.Object,ToSic.Lib.Coding.NoParamOrder,``0)" /> but this is easier to type in Razor.
            </summary>
      <param name="value">value to convert</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">The value used if conversion fails. Defaults to `Guid.Empty`.</param>
    </member>
    <member name="M:ToSic.Sxc.Services.IConvertService16.ToString(System.Object,ToSic.Lib.Coding.NoParamOrder,System.String,System.Boolean)">
      <summary>
            Convert any object safely to string - or if that fails, return the fallback value.
            
            This does **NOT** do the same as <see cref="M:ToSic.Sxc.Services.IConvertService16.To``1(System.Object,ToSic.Lib.Coding.NoParamOrder,``0)" />.
            In the standard implementation would only give you the fallback, if conversion failed.
            But this ToString will also give you the fallback, if the result is null. 
            </summary>
      <param name="value">The value to convert</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">Fallback in case conversion fails or result is null. Defaults to `null`.</param>
      <param name="fallbackOnNull">Determine that nulls should also fallback, default is `true`</param>
    </member>
    <member name="M:ToSic.Sxc.Services.IConvertService16.ForCode(System.Object,ToSic.Lib.Coding.NoParamOrder,System.String)">
      <summary>
             Convert any object safely to string to put into source code like HTML-attributes, inline-JavaScript or similar.
             This is usually used to ensure numbers, booleans and dates are in a format which works.
             Especially useful when giving data to a JavaScript, Json-Fragment or an Html Attribute.
            
             * booleans will be `true` or `false` (not `True` or `False`)
             * numbers will have a . notation and never a comma (like in de-DE cultures)
             * dates will convert to ISO format without time zone
             
             Optionally also allows a `fallback` to use instead of the defaults above.
             </summary>
      <returns></returns>
      <param name="value">value to convert</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">The value used if conversion fails. Defaults to `null`.</param>
    </member>
    <member name="P:ToSic.Sxc.Services.IConvertService16.Json">
      <summary>
            Sub-Service to convert JSON
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.IConvertService16.Json">ðŸ“– Json</a></para></summary>
    </member>
    <member name="T:ToSic.Sxc.Services.DataServices.GetQueryMs">
      <summary>
            Get-Query Micro Service
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.DataServices.GetQueryMs">ðŸ“– GetQueryMs</a></para></summary>
    </member>
    <member name="T:ToSic.Sxc.Services.IDynamicCodeService">
      <summary>
             This is a service to give you DynamicCode outside of 2sxc.
            
             Use this to access 2sxc data from a Theme, a `.ascx` WebControl or anywhere else. 
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.IDynamicCodeService">ðŸ“– IDynamicCodeService</a></para></summary>
      <remarks>
             * New in v13.02
             * This is meant to replace the `ToSic.Sxc.Dnn.Factory`. Please use this from now on.
             </remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.IDynamicCodeService.OfModule(System.Int32,System.Int32)">
      <summary>
            Get a <see cref="T:ToSic.Sxc.Code.Internal.IDynamicCode12" /> object for a specific Module on a page
            </summary>
      <param name="pageId"></param>
      <param name="moduleId"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Services.IDynamicCodeService.OfSite">
      <summary>
            Get a <see cref="T:ToSic.Sxc.Code.Internal.IDynamicCode12" /> object for the primary App of the current Site/Portal.
            </summary>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Services.IDynamicCodeService.OfSite(System.Int32)">
      <summary>
            Get a <see cref="T:ToSic.Sxc.Code.Internal.IDynamicCode12" /> object for a specific Site/Portal.
            </summary>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Services.IDynamicCodeService.OfApp(System.Int32)">
      <summary>
             Get a <see cref="T:ToSic.Sxc.Code.Internal.IDynamicCode12" /> object for a specific App.
             This is the simplest way to work with Dynamic Code for this App.
            
             Note that this is without Page/Module context, so there will be no useful `Content` object on the dynamic code.
             </summary>
      <param name="appId">The AppId</param>
      <returns>The dynamic code object for this App</returns>
    </member>
    <member name="M:ToSic.Sxc.Services.IDynamicCodeService.OfApp(System.Int32,System.Int32)">
      <summary>
            Get a <see cref="T:ToSic.Sxc.Code.Internal.IDynamicCode12" /> object for a specific App.
            This is the simplest way to work with Dynamic Code for this App.
            
            Note that this is without Page/Module context, so there will be no useful `Content` object on the dynamic code.
            </summary>
      <param name="zoneId">The ZoneId of the App</param>
      <param name="appId">The AppId</param>
      <returns>The dynamic code object for this App</returns>
    </member>
    <member name="M:ToSic.Sxc.Services.IDynamicCodeService.OfApp(ToSic.Eav.Apps.IAppIdentity)">
      <summary>
            Get a <see cref="T:ToSic.Sxc.Code.Internal.IDynamicCode12" /> object for a specific App.
            This is the simplest way to work with Dynamic Code for this App.
            
            Note that this is without Page/Module context, so there will be no useful `Content` object on the dynamic code.
            </summary>
      <param name="appIdentity">The App Identifier</param>
      <returns>The dynamic code object for this App</returns>
    </member>
    <member name="M:ToSic.Sxc.Services.IDynamicCodeService.App(ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Int32},System.Nullable{System.Int32},ToSic.Eav.Context.ISite,System.Nullable{System.Boolean})">
      <summary>
            Get a rich <see cref="T:ToSic.Sxc.Apps.IApp" /> object for a specific App.
            This is the simplest way to work with data of this App, but won't give you commands like `AsDynamic(...)`
            </summary>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="zoneId">The ZoneId of the App (optional)</param>
      <param name="appId">The AppId - REQUIRED</param>
      <param name="site">Site information for further context (optional) </param>
      <param name="withUnpublished">Determines if the App.Data gives you unpublished data (like in admin-mode) or just published data. If not set, will default to user permissions.</param>
      <returns>An initialized App object which you can use to access App.Data</returns>
    </member>
    <member name="M:ToSic.Sxc.Services.IDynamicCodeService.AppOfSite">
      <summary>
            Get a rich <see cref="T:ToSic.Sxc.Apps.IApp" /> object for the primary (aka Site) App of the _current_ Site/Portal and using permissions of the current user.
            This is the simplest way to work with data of this App, but won't give you commands like `AsDynamic(...)`.
            For more control, use the `AppOfSite` with parameters. 
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Services.IDynamicCodeService.AppOfSite(ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Int32},ToSic.Eav.Context.ISite,System.Nullable{System.Boolean})">
      <summary>
            Get a rich <see cref="T:ToSic.Sxc.Apps.IApp" /> object for the primary (aka Site) App. 
            This is the simplest way to work with data of this App, but won't give you commands like `AsDynamic(...)`
            </summary>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="siteId">The SiteId which is the PortalId in DNN. Optional - without it, the current Site / Portal is used. </param>
      <param name="site">Site information for further context (optional) </param>
      <param name="withUnpublished">Determines if the App.Data gives you unpublished data (like in admin-mode) or just published data. If not set, will default to user permissions.</param>
      <returns>An initialized App object which you can use to access App.Data</returns>
    </member>
    <member name="T:ToSic.Sxc.Services.IEditService">
      <summary>
             Contains status and commands to configure the in-page editing system.
            
             You will never create this yourself, as get this automatically in Razor or WebAPIs on an object called `Edit`.
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.IEditService">ðŸ“– IEditService</a></para></summary>
      <remarks>
             History
             - First version created ca. v2 - originally as `ToSic.Sxc.Web.IInPageEditEditingHelper`
             - Moved to `ToSic.Sxc.Services.IEditService` in v13.05
             </remarks>
    </member>
    <member name="P:ToSic.Sxc.Services.IEditService.Enabled">
      <summary>
            If editing is enabled or not
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.IEditService.Enabled">ðŸ“– Enabled</a></para></summary>
      <returns>True if enabled, false if not.</returns>
    </member>
    <member name="M:ToSic.Sxc.Services.IEditService.Toolbar(System.Object,ToSic.Lib.Coding.NoParamOrder,System.String,System.String,System.Object,System.Object,System.Object,System.Object)">
      <summary>
             Generate a toolbar tag - must be used in normal html, not as an attribute. <br />
             See also <a href="https://go.2sxc.org/xref17?xref=NetCode.Razor.Edit.Toolbar">NetCode.Razor.Edit.Toolbar</a></summary>
      <param name="target">
             The content-item this toolbar is for, can be null. <br />
             Usually a <a href="https://go.2sxc.org/xref17?xref=NetCode.DynamicData.DynamicEntity">NetCode.DynamicData.DynamicEntity</a> or a <a href="https://go.2sxc.org/xref17?xref=NetCode.DynamicData.Entity">NetCode.DynamicData.Entity</a>
            
             If the first parameter is a <see cref="T:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder" /> then all other parameters will be ignored. 
             </param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="actions">
                 List of actions on this toolbar. If null, will use default actions for this item.
                 If provided, must be comma-separated action-names - see <a href="https://go.2sxc.org/xref17?xref=JsCode.Commands.Index">JsCode.Commands.Index</a>.
             </param>
      <param name="contentType">Content-type of this toolbar, used when it has `new` or `add` buttons.
                 This allows you to create a button for a new "Category" and another button for a new "BlogPost" etc.
             </param>
      <param name="prefill">
                 Allows a `new` dialog to receive values as a prefill.
                 For example to already specify a date, title, category, etc. <br />
                 It's a dynamic object, see also the JS documentation on the prefill.
             </param>
      <param name="toolbar">
             Full manual toolbar configuration. Setting this will cause `actions` to be ignored. <br />
             See <a href="https://go.2sxc.org/xref17?xref=Basics.Browser.EditUx.Toolbars.Index">Basics.Browser.EditUx.Toolbars.Index</a>
            
             If the the `toolbar` is a <see cref="T:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder" /> then other parameters except for the `target` will be ignored. 
             </param>
      <param name="settings">
                 Toolbar settings controlling hover etc. <br />
                 See <a href="https://go.2sxc.org/xref17?xref=JsCode.Toolbars.Settings">JsCode.Toolbars.Settings</a></param>
      <param name="condition">
             Condition will make that no toolbar is created, if it's 0, false or "false"
             </param>
      <returns>If the user is an editor, it returns HTML UL tag containing all the toolbar configuration.</returns>
      <remarks>
             **History**
             1. Added in 2sxc 8.04
             1. `condition` added in 2sxc 12.05
             1. option to just use a ToolbarBuilder as first parameter or `toolbar` parameter added in v13 - this will skip all other parameters
             1. Enhanced to return `IRawHtmlString` instead of `IHybridHtmlString` in 16.02
             </remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.IEditService.TagToolbar(System.Object,ToSic.Lib.Coding.NoParamOrder,System.String,System.String,System.Object,System.Object,System.Object,System.Object)">
      <summary>
             Generate a toolbar attribute inside an html-tag <br />
             See also @HowTo.Razor.Edit.Toolbar
             </summary>
      <param name="target">
             The optional content-item this toolbar is for. Can be null. <br />
             Usually a <a href="https://go.2sxc.org/xref17?xref=NetCode.DynamicData.DynamicEntity">NetCode.DynamicData.DynamicEntity</a> or a <a href="https://go.2sxc.org/xref17?xref=NetCode.DynamicData.Entity">NetCode.DynamicData.Entity</a>
            
             If the first parameter is a <see cref="T:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder" /> then all other parameters will be ignored. 
             </param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="actions">
                 List of actions on this toolbar. If null, will use default actions for this item.
                 If provided, must be comma-separated action-names - see <a href="https://go.2sxc.org/xref17?xref=JsCode.Commands.Index">JsCode.Commands.Index</a>.
             </param>
      <param name="contentType">Content-type of this toolbar, used when it has `new` or `add` buttons.
                 This allows you to create a button for a new "Category" and another button for a new "BlogPost" etc.
             </param>
      <param name="prefill">
                 Allows a `new` dialog to receive values as a prefill.
                 For example to already specify a date, title, category, etc. <br />
                 It's a dynamic object, see also the JS documentation on the prefill.
             </param>
      <param name="toolbar">
             Full manual toolbar configuration. Setting this will cause `actions` to be ignored. <br />
             See <a href="https://go.2sxc.org/xref17?xref=Basics.Browser.EditUx.Toolbars.Index">Basics.Browser.EditUx.Toolbars.Index</a>
            
             If the the `toolbar` is a <see cref="T:ToSic.Sxc.Edit.Toolbar.IToolbarBuilder" /> then other parameters except for the `target` will be ignored. 
             </param>
      <param name="settings">
                 Toolbar settings controlling hover etc. <br />
                 See <a href="https://go.2sxc.org/xref17?xref=JsCode.Toolbars.Settings">JsCode.Toolbars.Settings</a></param>
      <param name="condition">
             Condition will make that no toolbar is created, if it's 0, false or "false"
             </param>
      <returns>If the user is an editor, it returns the attribute containing all the toolbar configuration.</returns>
      <remarks>
             **History**
             1. Added in 2sxc 9.40
             1. `condition` added in 2sxc 12.05
             1. option to just use a ToolbarBuilder as first parameter or `toolbar` parameter added in v13 - this will skip all other parameters
             1. Enhanced to return `IRawHtmlString` instead of `IHybridHtmlString` in 16.02
             </remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.IEditService.ContextAttributes(ToSic.Eav.Data.ICanBeEntity,ToSic.Lib.Coding.NoParamOrder,System.String,System.String,System.Nullable{System.Guid},System.String,System.Int32)">
      <summary>
            Get html-attributes to mark the current context
            these will be added to a wrapper tag (usually a div)
            so that in-page editing knows what the context is <br />
            Please read more about <a href="https://go.2sxc.org/xref17?xref=Basics.Cms.InnerContent.Index">Basics.Cms.InnerContent.Index</a></summary>
      <param name="target">The content-item for which the new context should be.
                This item usually has a field which has <a href="https://go.2sxc.org/xref17?xref=Basics.Cms.InnerContent.Index">Basics.Cms.InnerContent.Index</a></param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="field">the field of this content-item, which contains the inner-content-items</param>
      <param name="contentType">type name used for 'new' items in a toolbar - usually for inner-content and list-contexts</param>
      <param name="newGuid">the guid of a new item - use null for auto-generate</param>
      <param name="apps">Restrict the apps which can be added to this placeholder</param>
      <param name="max">Limit the amount of content-blocks that can be added to this placeholder</param>
      <returns>An <see cref="T:ToSic.Razor.Markup.IRawHtmlString" /> object containing an html-attribute to add to the wrapper of the inner content</returns>
      <remarks>
            **History** <br />
            1. Introduced in 2sxc 8.4
            1. Enhanced with apps and max in 10.27
            1. Enhanced to return `IRawHtmlString` instead of `IHybridHtmlString` in 16.02
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.IEditService.Enable(ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
      <summary>
            Ensure that the UI will load the correct assets to enable editing. See <a href="https://go.2sxc.org/xref17?xref=NetCode.Razor.Edit.Enable">NetCode.Razor.Edit.Enable</a></summary>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="js">optional, default false. automatically true if `api` or `forms` is true<br />
                Will add the basic JS APIs ($2sxc) usually for enabling WebApi calls from your JS code. <br />
                _added in v10.20_
            </param>
      <param name="api">optional, default false. automatically true, if `forms` is true<br />
                If JS etc. should be included to enable editing API - ensures JavaScripts are loaded enabling commands to run</param>
      <param name="forms">optional, default false. <br />
                Ensures JavaScripts are loaded enabling forms to open</param>
      <param name="context">optional, default false. <br />
                If context (<a href="https://go.2sxc.org/xref17?xref=Basics.Browser.EditUx.EditContext">Basics.Browser.EditUx.EditContext</a>) should be added, to ensure in-instance data editing</param>
      <param name="autoToolbar">optional, default false. <br />
                Disables the automatic generation of a toolbar (this is important, as there usually won't be a toolbar in public pages, which would then trigger the fallback-toolbar to be generated)</param>
      <param name="styles">optional, default false. <br />
                Ensures styles to be loaded, which would be necessary for the standard toolbars to look right</param>
      <returns>null - but we wanted to make sure it returns something, so you can use it in razor like @Edit.Enable(...)</returns>
      <remarks>
            **History** <br />
            1. Introduced in 2sxc 9.30
            2. Enhanced with parameter jsApi in 10.20
            3. Being deprecated in 12.02, as you should now use the IPageService instead for most of these features
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.IEditService.Attribute(System.String,System.String)">
      <summary>
            Generate an HTML attribute by converting the value to JSON
            - but only in edit mode
            </summary>
      <param name="name">the attribute name, used for ...=</param>
      <param name="value">the attribute value, used for ="..."</param>
      <returns>A string but as HtmlString, so it can be used with @Attribute(...)</returns>
    </member>
    <member name="M:ToSic.Sxc.Services.IEditService.Attribute(System.String,System.Object)">
      <summary>
            Generate an HTML attribute by converting the value to JSON
            - but only in edit mode
            </summary>
      <param name="name">the attribute name, used for ...=</param>
      <param name="value">the attribute value, used for ="..."</param>
      <returns>A string but as HtmlString, so it can be used with @Attribute(...)</returns>
    </member>
    <member name="T:ToSic.Sxc.Services.IFeaturesService">
      <summary>
             Features lets your code find out what system features are currently enabled/disabled in the environment.
             It's important to detect if the admin must activate certain features to let your code do it's work.
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.IFeaturesService">ðŸ“– IFeaturesService</a></para></summary>
      <remarks>
             This replaces the older static Features accessor - please only use this from now on.
            
             History:
             - Added this implementation in 13.01
             </remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.IFeaturesService.IsEnabled(System.String[])">
      <summary>
            Checks if a list of features are enabled, in case you need many features to be activated.
            </summary>
      <param name="nameIds">one or many name IDs - can also be the guids (as string)</param>
      <returns>true if all features are enabled, false if any one of them is not</returns>
      <remarks>
            Added in v13.01
            </remarks>
    </member>
    <member name="T:ToSic.Sxc.Services.IDataService">
      <summary>
            Services to create DataSources in Razor as well as external (skin) use.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.IDataService">ðŸ“– IDataService</a></para></summary>
      <remarks>
            New in v16.00
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.IDataService.New(ToSic.Lib.Coding.NoParamOrder,ToSic.Eav.Apps.IAppIdentity,System.Int32,System.Int32)">
      <summary>
            Spawn a new <see cref="T:ToSic.Sxc.Services.IDataService" /> with specific configuration.
            Uses the <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.SpawnNew">Spawn New convention</a>.
            </summary>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="appIdentity"></param>
      <param name="zoneId"></param>
      <param name="appId"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Services.IDataService.GetAppSource(ToSic.Lib.Coding.NoParamOrder,System.Object,System.Object)">
      <summary>
            Get the App DataSource containing the App Data.
            The `Default` stream of this source has the data the current user is allowed to see.
            So public users won't get draft data.
            </summary>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="parameters">Parameters to use - as anonymous object like `new { Count = 7, Filter = 3 }`</param>
      <param name="options">Options how to build/construct the DataSource. </param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Services.IDataService.GetSource``1(ToSic.Lib.Coding.NoParamOrder,ToSic.Eav.DataSource.IDataSourceLinkable,System.Object,System.Object)">
      <summary>
            Create a DataSource object using it's type.
            This is the new, preferred way to get DataSources in v15.06+.
            </summary>
      <typeparam name="T">The type of DataSource, usually from <a href="https://go.2sxc.org/xref17?xref=ToSic.Eav.DataSources">ToSic.Eav.DataSources</a> or <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.DataSources">ToSic.Sxc.DataSources</a></typeparam>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="attach">Link to one or more other DataSources / streams to attach upon creation.</param>
      <param name="parameters">Parameters to use - as anonymous object like `new { Count = 7, Filter = 3 }`</param>
      <param name="options">Options how to build/construct the DataSource. </param>
      <remarks>new v16.00</remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.IDataService.GetSource(ToSic.Lib.Coding.NoParamOrder,System.String,ToSic.Eav.DataSource.IDataSourceLinkable,System.Object,System.Object,System.Nullable{System.Boolean})">
      <summary>
            Create a DataSource object using it's name.
            This is only meant for dynamically compiled DataSources which are part of the current App - a new feature in v15.10+.
            For any other DataSources, use the overload which specifies the type. 
            </summary>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="name">The name of the DataSource type, which matches the file name and class in the `/DataSources/` folder.</param>
      <param name="attach">Link to one or more other DataSources / streams to attach upon creation.</param>
      <param name="parameters">Parameters to use - as anonymous object like `new { Count = 7, Filter = 3 }`</param>
      <param name="options">Options how to build/construct the DataSource. </param>
      <param name="debug">Determines if exceptions should be shown. Default is only for Developers.</param>
      <remarks>new v16.00</remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.IDataService.GetQuery(System.String,ToSic.Lib.Coding.NoParamOrder,ToSic.Eav.DataSource.IDataSourceLinkable,System.Object)">
      <summary>
            Get a Query from the current App.
            </summary>
      <param name="name">Name of the query</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="attach">Attach in-stream to the query (not yet implemented)</param>
      <param name="parameters">Parameters to use - as anonymous object like `new { Count = 7, Filter = 3 }`</param>
      <returns></returns>
      <remarks>New 16.01</remarks>
    </member>
    <member name="T:ToSic.Sxc.Services.IImageService">
      <summary>
            Service to help create responsive `img` and `picture` tags the best possible way.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.IImageService">ðŸ“– IImageService</a></para></summary>
      <remarks>
            History: Released 2sxc 13.10
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.IImageService.GetFormat(System.String)">
      <summary>
            Get the format information for a specific extension.
            Mostly used internally, you will usually not need this. 
            </summary>
      <param name="path">Path or extension</param>
      <returns></returns>
      <remarks>Only works for the basic, known image types</remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.IImageService.Settings(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Object,System.Object,System.Object,System.Object,System.String,System.String,System.String,System.Object,System.String,System.Object)">
      <summary>
            Construct custom Resize-Settings as needed, either based on existing settings or starting from scratch
            </summary>
      <param name="settings">
            - A standardized Image-Settings object like `Settings.Images.Content` used as a template - see https://go.2sxc.org/settings
            - The `string` name of a template settings , like "Content" or "Screen"
            - a `bool` true/false - if true, the normal "Content" configuration is used as a template, if false, no initial configuration is used
            - Or a dynamic object containing settings properties (this can also be a merged custom + standard settings)
            - Or a specially prepared <see cref="T:ToSic.Sxc.Images.IResizeSettings" /> object containing all settings.
            </param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="factor">A multiplier, usually used to create urls which resize to a part of the default content-size. Eg. 0.5. </param>
      <param name="width">Optional width parameter. Cannot be used if `factor` is set. Usually takes the default from the `settings`.</param>
      <param name="height">Optional height parameter. Can only be 0 if `factor` is set, no not specify a height. Usually takes the default from the `settings`.</param>
      <param name="quality">Optional quality parameter. Usually takes the default from the `settings`.</param>
      <param name="resizeMode">Optional resize-mode, like `crop` or `max`. Usually takes the default from the `settings`.</param>
      <param name="scaleMode">Optional scale-mode to allow up-scaling images like `up` or `both`. Usually takes the default from the `settings`.</param>
      <param name="format">Optional file format like `jpg` or `png`</param>
      <param name="aspectRatio">Aspect Ratio width/height, only relevant if a `factor` is supplied. Usually takes default from the `settings` or is ignored. </param>
      <param name="parameters">
                - the parameters either as `id=47&amp;name=daniel` (Dnn also supports `/id/47/name/daniel`)
                - it can also be an <see cref="T:ToSic.Sxc.Context.IParameters" /></param>
      <param name="recipe">WIP - not ready yet</param>
      <returns>A settings object which has all the parameters as configured</returns>
      <remarks>
            History: Added in 2sxc 13.03
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.IImageService.Picture(System.Object,System.Object,ToSic.Lib.Coding.NoParamOrder,System.Object,System.Object,System.String,System.String,System.String,System.Object,System.String,System.Object,System.Object,System.Object)">
      <summary>
            Get a Responsive Picture object which you can then either just show, or use to construct a more customized output as you need it.
            
            The resulting object can just be added to the html, like `@pic` or you can work with sub-properties as specified in the <see cref="T:ToSic.Sxc.Images.IResponsivePicture" />.
            
            **Important:** This call only allows you to set the most common parameters `factor` and `width`.
            For other parameters like `height`, `aspectRatio`, `quality` etc. create Settings <see cref="M:ToSic.Sxc.Services.IImageService.Settings(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Object,System.Object,System.Object,System.Object,System.String,System.String,System.String,System.Object,System.String,System.Object)" /> and pass them in.
            </summary>
      <param name="link">
            What should be in this, can be:
            
            - a string url, in which case it would be used if `url` is not specified
            - a <see cref="T:ToSic.Sxc.Data.IField" /> in which case it would be used if `field` is not specified
            - a <see cref="T:ToSic.Sxc.Adam.IFile" /> (new 16.03)
            </param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="settings">
            - The name of a settings configuration, like "Content", "Screen", "Square", etc.
            - A standardized Image-Settings object like Settings.Images.Content - see https://go.2sxc.org/settings
            - Or a dynamic object containing settings properties (this can also be a merged custom + standard settings)
            - A <see cref="T:ToSic.Sxc.Images.IResizeSettings" /> object containing all settings created using <see cref="M:ToSic.Sxc.Services.IImageService.Settings(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Object,System.Object,System.Object,System.Object,System.String,System.String,System.String,System.Object,System.String,System.Object)">ResizeSettings</see></param>
      <param name="factor">An optional multiplier, usually used to create urls which resize to a part of the default content-size. Eg. 0.5. </param>
      <param name="width">An optional, fixed width of the image</param>
      <param name="imgAlt">
            Optional `alt` attribute on the created `img` tag for SEO etc.
            If supplied, it takes precedence to the alt-description in the image metadata which the editor added themselves.
            If you want to provide a fallback value (in case the metadata has no alt), use `imgAltFallback`
            </param>
      <param name="imgAltFallback">
            Optional `alt` attribute which is only used if the `imgAlt` or the alt-text in the metadata are empty.
            _new in v15_
            </param>
      <param name="imgClass">Optional `class` attribute on the created `img` tag</param>
      <param name="imgAttributes">Optional additional attributes - as anonymous object eg `new { style = "padding: 10px" }` or Dictionary (new 16.07)</param>
      <param name="pictureClass">Optional `class` attribute on the created `picture` tag</param>
      <param name="pictureAttributes">Optional additional attributes - as anonymous object eg `new { style = "padding: 10px" }` or Dictionary (new 16.07)</param>
      <param name="toolbar">Provide a custom toolbar or `false` to not show a toolbar</param>
      <param name="recipe">
            Optional recipe = instructions how to create the various variants of this link.
            Can be any one of these:
            
            - string containing variants
            - Rule object
            
            TODO: DOCS not quite ready
            </param>
      <returns>A ResponsivePicture object which can be rendered directly. See <a href="https://go.2sxc.org/xref17?xref=NetCode.Images.Index">NetCode.Images.Index</a></returns>
      <remarks>
            * Added in v13.03
            * Extended in v16.03 to also support IFile
            * `toolbar` added in v16.04
            * `imgAttributes`, `picClass` and `picAttributes` added in 16.07
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.IImageService.Img(System.Object,System.Object,ToSic.Lib.Coding.NoParamOrder,System.Object,System.Object,System.String,System.String,System.String,System.Object,System.Object,System.Object)">
      <summary>
            Get a Responsive Image object which you can then either just show, or use to construct a more customized output as you need it.
            
            The resulting object can just be added to the html, like `@img` or you can work with sub-properties as specified in the <see cref="T:ToSic.Sxc.Images.IResponsiveImage" /></summary>
      <param name="link">
                What should be in this, can be:
            
                - a string url, in which case it would be used if `url` is not specified
                - a <see cref="T:ToSic.Sxc.Data.IField" /> in which case it would be used if `field` is not specified
            </param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="settings">
                - The name of a settings configuration, like "Content", "Screen", "Square", etc.
                - A standardized Image-Settings object like Settings.Images.Content - see https://go.2sxc.org/settings
                - Or a dynamic object containing settings properties (this can also be a merged custom + standard settings)
                - A <see cref="T:ToSic.Sxc.Images.IResizeSettings" /> object containing all settings created using <see cref="M:ToSic.Sxc.Services.IImageService.Settings(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Object,System.Object,System.Object,System.Object,System.String,System.String,System.String,System.Object,System.String,System.Object)">ResizeSettings</see></param>
      <param name="factor">An optional multiplier, usually used to create urls which resize to a part of the default content-size. Eg. 0.5. </param>
      <param name="width">An optional, fixed width of the image</param>
      <param name="imgAlt">
            Optional `alt` attribute on the created `img` tag for SEO etc.
            If supplied, it takes precedence to the alt-description in the image metadata which the editor added themselves.
            If you want to provide a fallback value (in case the metadata has no alt), use `imgAltFallback`.
            </param>
      <param name="imgAltFallback">
            Optional `alt` attribute which is only used if the `imgAlt` or the alt-text in the metadata are empty.
            _new in v15_
            </param>
      <param name="imgClass">Optional `class` attribute on the created `img` tag</param>
      <param name="imgAttributes">Optional additional attributes - as anonymous object eg `new { style = "padding: 10px" }` or Dictionary (new 16.07)</param>
      <param name="toolbar">Provide a custom toolbar or `false` to not show a toolbar</param>
      <param name="recipe">
                Optional recipe = instructions how to create the various variants of this link.
                Can be any one of these:
            
                - string containing variants
                - Rule object
            
                TODO: DOCS not quite ready
            </param>
      <returns>A ResponsiveImage object which can be rendered directly. See <a href="https://go.2sxc.org/xref17?xref=NetCode.Images.Index">NetCode.Images.Index</a></returns>
      <remarks>
            * Added in 2sxc 13.03
            * `toolbar` added in v16.04
            </remarks>
    </member>
    <member name="T:ToSic.Sxc.Services.IKeyService">
      <summary>
            WIP 16.04
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.IKeyService">ðŸ“– IKeyService</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Services.IKeyService.UniqueKey">
      <summary>
             A unique, random key for the current module.
             It's recommended for giving DOM elements a unique id for scripts to then access them.
             
             It's generated for every content-block, and more reliable than `Module.Id`
             since that sometimes results in duplicate keys, if the many blocks are used inside each other.
            
             It's generated using a GUID and converted/shortened. 
             In the current version it's 8 characters long, so it has 10^14 combinations, making collisions extremely unlikely.
             (currently 8 characters)
            
             &gt; [!TIP]
             &gt; To get a unique key which is based on additional objects such as Entities,
             &gt; use the <see cref="M:ToSic.Sxc.Services.IKeyService.UniqueKeyWith(System.Object[])" /> method.
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.IKeyService.UniqueKey">ðŸ“– UniqueKey</a></para></summary>
      <remarks>
             If you get a fresh <see cref="T:ToSic.Sxc.Services.IKeyService" /> it will also create a new UniqueKey.
             So your code should usually use the built-in property `UniqueKey` which comes from the shared ServiceKit <see cref="P:ToSic.Sxc.Services.ServiceKit16.Key" />.
             </remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.IKeyService.UniqueKeyWith(System.Object[])">
      <summary>
             Generate a unique key based on the <see cref="P:ToSic.Sxc.Services.IKeyService.UniqueKey" /> and additional objects.
            
             It has a special mechanisms for creating unique keys for specific data types such as entities,
             so calling this multiple times with the same objects will still result in the same key being generated.
            
             Special behaviors:
            
             * Strings will use the HashCode
             * Entities and similar will use a shortened unique string based on the GUID
             * Assets (files, folders) will use the HashCode of their <see cref="P:ToSic.Sxc.Adam.IAsset.Url" />
             * Dates are converted to a safe string and trimmed for all trailing zeros
             * Most key parts will receive a simple prefix making debugging easier
             </summary>
      <param name="partners"></param>
      <returns></returns>
    </member>
    <member name="T:ToSic.Sxc.Services.IJsonService">
      <summary>
             Service to serialize/restore JSON. Get it using GetService &lt; T &gt;
            
             It works for 2sxc/EAV data but can be used for any data which can be serialized/deserialized.
             Since it's a data-operation, we keep it in this namespace, even if most other things in this namespace are 2sxc-data objects.
            
             *Important* This is simple object-string conversion.
             It doesn't change entity objects to be serializable.
             For that you should use the <a href="https://go.2sxc.org/xref17?xref=ToSic.Eav.DataFormats.EavLight.IConvertToEavLight">ToSic.Eav.DataFormats.EavLight.IConvertToEavLight</a> which returns an object that can then be serialized. 
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.IJsonService">ðŸ“– IJsonService</a></para></summary>
      <remarks>
             Introduced in 2sxc 12.05.
             For previous versions of 2sxc, you can just write code to access Newtonsoft directly.
             For more control regarding serialization, also just work with Newtonsoft directly.
            
             Internally it uses Newtonsoft and preserves the case of keys.
             In future the internal engine may change (like for .net core), but we'll ensure that the result remains consistent. 
             </remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.IJsonService.ToJson(System.Object)">
      <summary>
            Convert an object to JSON.
            
            If you need to add the JSON to HTML of a page, make sure you also use `Html.Raw(...)`, otherwise it will be encoded and not usable in JavaScript.
            </summary>
      <param name="item">The object to serialize</param>
    </member>
    <member name="M:ToSic.Sxc.Services.IJsonService.ToJson(System.Object,System.Int32)">
      <summary>
             Convert an object to JSON - using nicer output / indentation.
             
             If you need to add the JSON to HTML of a page, make sure you also use `Html.Raw(...)`, otherwise it will be encoded and not usable in JavaScript.
             </summary>
      <param name="item">The object to serialize</param>
      <param name="indentation">How much to indent the json - we recommend 4. As of now, it will always use 4, no matter what you set (see remarks)</param>
      <remarks>
             Added in 2sxc 12.11
            
             But as of 2sxc 12.11 we're still using an old Newtonsoft, so we cannot really control the indentation depth.
             If you call this, it will always indent using 4 spaces. In a future release we'll probably use a newer Newtonsoft with which we can then use the indentation as needed.
             </remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.IJsonService.To``1(System.String)">
      <summary>
            Convert a JSON to a typed object. 
            </summary>
      <typeparam name="T"></typeparam>
      <param name="json"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Services.IJsonService.ToObject(System.String)">
      <summary>
             Convert a json to an anonymous object.
             This is a very technical thing to do, so only use it if you know why you're doing this.
            
             It's usually better to use <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Code.IDynamicCode.AsDynamic(System.String,System.String)">ToSic.Sxc.Code.IDynamicCode.AsDynamic(System.String,System.String)</a> or  <see cref="M:ToSic.Sxc.Services.IJsonService.To``1(System.String)" /></summary>
      <param name="json"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Services.IJsonService.ToTyped(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.Nullable{System.Boolean})">
      <summary>
             Creates a <see cref="T:ToSic.Sxc.Data.ITyped" /> object from a json string.
            
             &gt; [!IMPORTANT]
             &gt; This only works on json strings which return an object.
             &gt; If you pass in a simple json such as `27` or `"hello"` or an array like `[1, 2, 3]` it will throw an error.
             &gt; For arrays, use <see cref="M:ToSic.Sxc.Services.IJsonService.ToTypedList(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.Nullable{System.Boolean})" />.
             </summary>
      <param name="json">The string containing json</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">
             Alternate string to use, if the original json can't parse.
             Can also be null or the word "error" if you would prefer an error to be thrown.
             </param>
      <param name="propsRequired">make the resulting object <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">strict</a>, default `true`</param>
      <returns>A dynamic object representing the original json.
             If it can't be parsed, it will parse the fallback, which by default is an empty empty dynamic object.
             If you provide null for the fallback, then you will get null back.
             </returns>
      <remarks>
             New in 16.02
             </remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.IJsonService.ToTypedList(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.Nullable{System.Boolean})">
      <summary>
             Creates a list of <see cref="T:ToSic.Sxc.Data.ITyped" /> wrappers around an json string containing an array of objects.
            
             &gt; [!IMPORTANT]
             &gt; This only works on json strings which return an object.
             &gt; If you pass in a simple json such as `27` or `"hello"` or an array like `[1, 2, 3]` it will throw an error.
             &gt; For arrays, use <see cref="M:ToSic.Sxc.Services.IJsonService.ToTypedList(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.Nullable{System.Boolean})" />.
             </summary>
      <param name="json">The string containing json</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="fallback">
             Alternate string to use, if the original json can't parse.
             Can also be null or the word "error" if you would prefer an error to be thrown.
             </param>
      <param name="propsRequired">make the resulting object <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.PropertiesRequired">strict</a>, default `true`</param>
      <returns>A dynamic object representing the original json.
             If it can't be parsed, it will parse the fallback, which by default is an empty empty dynamic object.
             If you provide null for the fallback, then you will get null back.
             </returns>
      <remarks>
             New in 16.04
             </remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.JsonService.To``1(System.String)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Services.JsonService.ToObject(System.String)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Services.JsonService.ToJson(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Services.JsonService.ToJson(System.Object,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Services.JsonService.ToTyped(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.Nullable{System.Boolean})">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Services.JsonService.ToTypedList(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.Nullable{System.Boolean})">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Services.KeyService.UniqueKey">
      <inheritdoc cref="P:ToSic.Sxc.Services.IKeyService.UniqueKey" />
    </member>
    <member name="M:ToSic.Sxc.Services.KeyService.UniqueKeyOf(System.Object)">
      <inheritdoc cref="M:ToSic.Sxc.Services.IKeyService.UniqueKeyOf(System.Object)" />
    </member>
    <member name="M:ToSic.Sxc.Services.KeyService.UniqueKeyWith(System.Object[])">
      <inheritdoc cref="M:ToSic.Sxc.Services.IKeyService.UniqueKeyWith(System.Object[])" />
    </member>
    <member name="P:ToSic.Sxc.Services.UniqueKeysServices.UniqueKey">
      <summary>
             A unique, random key for the current module.
             It's recommended for giving DOM elements a unique id for scripts to then access them.
             
             It's generated for every content-block, and more reliable than `Module.Id`
             since that sometimes results in duplicate keys, if the many blocks are used inside each other.
            
             It's generated using a GUID and converted/shortened. 
             In the current version it's 8 characters long, so it has 10^14 combinations, making collisions extremely unlikely.
             (currently 8 characters)
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.UniqueKeysServices.UniqueKey">ðŸ“– UniqueKey</a></para></summary>
    </member>
    <member name="T:ToSic.Sxc.Services.ILinkService">
      <summary>
             Helpers to create links to
            
             - Pages
             - APIs
             - Images
            
             As well as create base-tag links (important for SPAs)
            
             You will never create this yourself, as get this automatically in Razor or WebAPIs on an object called `Link`.
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ILinkService">ðŸ“– ILinkService</a></para></summary>
      <remarks>
             History
             
             - Created ca. v2 as `ToSic.Sxc.Web.ILinkHelper`
             - Moved to this new `Services.ILinkService` in v13.05. The previous name will continue to work, but newer features will be missing on that interface. 
             </remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.ILinkService.To(ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Int32},System.String,System.Object,System.String,System.String)">
      <summary>
            returns a link to the current page with parameters resolved in a way that DNN wants it
            </summary>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="pageId">optional page ID (TabId) - if not supplied, will use current page</param>
      <param name="api">optional api url "api/name/method?id=something"</param>
      <param name="parameters">
                - the parameters either as `id=47&amp;name=daniel` (Dnn also supports `/id/47/name/daniel`)
                - in 2sxc 12.05+ it can also be an <see cref="T:ToSic.Sxc.Context.IParameters" /></param>
      <param name="type">
                Optional type changes how the link is generated. Possible values are:
            
                - null / not specified / empty = return link as is generated
                - `"full"` return link with protocol and domain. If that was missing before, it will add current protocol/domain if possible, but not on relative `./` or `../` links
                - `"//"` return link with `//domain`. If that was missing before, will add current domain if possible, but not on relative `./` or `../` links
            </param>
      <param name="language">
            - If not set, `null` or empty `""` will use the specified pageId (pageIds can be language specific); api would always be the current language
            - If set to `"current"` will adjust pageId to use the language of the current language. API will be as before, as it was already `current`
            - future _(not implemented yet)_ `"primary"` would link to primary language
            - future _(not implemented yet)_ `"en"` or `"en-us"` would link to that specific language (page and API)
            </param>
      <returns></returns>
      <remarks>
            History
            * v12 added the api parameter for liking APIs of the current app
            * In v12.05 the type of parameters was changed from string to object, to allow <see cref="T:ToSic.Sxc.Context.IParameters" /> as well
            * In v13.02 introduced language with "current"
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.ILinkService.Base">
      <summary>
            A base url for the current page, for use in html-base tags
            </summary>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Services.ILinkService.Image(System.String,System.Object,System.Object,ToSic.Lib.Coding.NoParamOrder,ToSic.Sxc.Data.IField,System.Object,System.Object,System.Object,System.String,System.String,System.String,System.Object,System.String,System.Object)">
      <summary>
            Generate an Image-Resizing link base on presets or custom parameters.  
            It will also ensure that the final url is safe, so it will encode umlauts, spaces etc.
            
            Note that you can basically just use presets, or set every parameter manually.
            
            - All params are optional.
            - Some combinations are not valid - like setting a factor and a width doesn't make sense and will throw an error
            - Most parameters if set to 0 will cause a reset so that this aspect is not in the URL
            </summary>
      <param name="url">The image url. Use an empty string if you want to just get the params for re-use.</param>
      <param name="settings">
            - A standardized Image-Settings object like Settings.Images.Content - see https://go.2sxc.org/settings
            - Or a dynamic object containing settings properties (this can also be a merged custom + standard settings)
            - Or a specially prepared <see cref="T:ToSic.Sxc.Images.IResizeSettings" /> object containing all settings.
              If this is provided, only `factor` will still be respected, all other settings like `width` on this command will be ignored.
            </param>
      <param name="factor">A multiplier, usually used to create urls which resize to a part of the default content-size. Eg. 0.5.</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="field">WIP v13.04 - not final yet</param>
      <param name="width">Optional width parameter. Usually takes the default from the `settings`.</param>
      <param name="height">Optional height parameter. Usually takes the default from the `settings`.</param>
      <param name="quality">Optional quality parameter. Usually takes the default from the `settings`.</param>
      <param name="resizeMode">Optional resize-mode, like `crop` or `max`. Usually takes the default from the `settings`.</param>
      <param name="scaleMode">Optional scale-mode to allow up-scaling images like `up` or `both`. Usually takes the default from the `settings`.</param>
      <param name="format">Optional file format like `jpg` or `png`</param>
      <param name="aspectRatio">Aspect Ratio width/height, only relevant if a `width` is supplied. Can't be used together with height. Usually takes default from the `settings` or is ignored. </param>
      <param name="type">
                Optional type changes how the link is generated. Possible values are:
            
                - null / not specified / empty = return link as is generated
                - `"full"` return link with protocol and domain. If that was missing before, it will add current protocol/domain if possible, but not on relative `./` or `../` links
                - `"//"` return link with `//domain`. If that was missing before, will add current domain if possible, but not on relative `./` or `../` links
            </param>
      <param name="parameters">
                - the parameters either as `id=47&amp;name=daniel` (Dnn also supports `/id/47/name/daniel`)
                - in 2sxc 12.05+ it can also be an <see cref="T:ToSic.Sxc.Context.IParameters" /></param>
      <remarks>
            Usually a factor is applied to create a link which is possibly 50% of the content-width or similar.
            In these cases the height is not applied but the aspectRatio is used, which usually comes from `settings` if any were provided.
            
            History
            - New in 2sxc 12.03
            - type added ca. v12.08
            - Option to use <see cref="T:ToSic.Sxc.Images.IResizeSettings" /> added in v13.03
            - `factor` originally didn't influence width/height if provided here, updated it v13.03 to influence that as well
            - `field` being added in 13.04, not ready yet
            </remarks>
      <returns></returns>
    </member>
    <member name="T:ToSic.Sxc.Services.ISystemLogService">
      <summary>
            System-Log Service to add messages to the global log in any platform Dnn/Oqtane
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ISystemLogService">ðŸ“– ISystemLogService</a></para></summary>
      <remarks>
            As of now this service is still very simple, later we may add methods like `Warn()` or `Error()` but let's wait and see what's needed
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.ISystemLogService.Add(System.String,System.String)">
      <summary>
            Add a general message to the log.
            </summary>
      <param name="title"></param>
      <param name="message"></param>
    </member>
    <member name="T:ToSic.Sxc.Services.IMailService">
      <summary>
             Service to send mail messages cross-platform.
            
             Get this service in Razor or WebApi using <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Code.IDynamicCode.GetService*">ToSic.Sxc.Code.IDynamicCode.GetService*</a><para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.IMailService">ðŸ“– IMailService</a></para></summary>
      <remarks>
             New in 2sxc 12.05
             </remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.IMailService.Create(ToSic.Lib.Coding.NoParamOrder,System.Object,System.Object,System.Object,System.Object,System.Object,System.String,System.String,System.Nullable{System.Boolean},System.Text.Encoding,System.Object)">
      <summary>
            Quickly create a MailMessage object for further modification and then sending using <see cref="M:ToSic.Sxc.Services.IMailService.Send(System.Net.Mail.MailMessage)" />
            If you don't want to modify the resulting object, skip this and use the direct-send method. 
            </summary>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="from">
                sender e-mail address in one of the following formats
                * An e-mail string like "info@somwhere.com"
                * An e-mail with name and address like "iJungleboy &lt;ijungleboy@2sxc.org&gt;"
                * A single System.Net.Mail.MailAddress object
            </param>
      <param name="to">
                Main recipient(s) of the mail in one of the following formats
                * all the formats as available in `from`
                * a CSV of such addresses like "info@a.com, info@b.com"
                * An Array/List/IEnumerable of such strings
                * An Array/List/IEnumerable of System.Net.Mail.MailAddress objects
            </param>
      <param name="cc">CC recipient(s) of the mail, in the same format as `to`</param>
      <param name="bcc">BCC recipient(s) of the mail, in the same format as `to`</param>
      <param name="replyTo">ReplyTo address(es) in the same format as `to`</param>
      <param name="subject">The main subject</param>
      <param name="body">The body / contents of the e-mail - can be text or HTML</param>
      <param name="isHtml">Set the body to be HTML - if not set, will auto-detect</param>
      <param name="encoding">
                Encoding of subject and body - if not set, will default to UTF8.
                If you need different encodings on subject and body, set it on the resulting object. 
            </param>
      <param name="attachments">
                One or more attachments to include. Could be any of the following
                - A System.Net.Mail.Attachment object
                - An <see cref="T:ToSic.Sxc.Adam.IFile" /> or an <see cref="T:ToSic.Eav.Apps.Assets.IFile" /> object
                - An Array/IEnumerable of these 
            </param>
      <returns>The newly created `MailMessage` object</returns>
    </member>
    <member name="M:ToSic.Sxc.Services.IMailService.Send(System.Net.Mail.MailMessage)">
      <summary>
            Send a .net `MailMessage` object using the settings configured in Dnn or Oqtane.
            </summary>
      <param name="message">A prepared .net MailMessage object</param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Services.IMailService.Send(ToSic.Lib.Coding.NoParamOrder,System.Object,System.Object,System.Object,System.Object,System.Object,System.String,System.String,System.Nullable{System.Boolean},System.Text.Encoding,System.Object)">
      <summary>
            Quickly create and send an E-Mail.
            </summary>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="from">
                sender e-mail address in one of the following formats
                * An e-mail string like "info@somwhere.com"
                * An e-mail with name and address like "iJungleboy &lt;ijungleboy@2sxc.org&gt;"
                * A single System.Net.Mail.MailAddress object
            </param>
      <param name="to">
                Main recipient(s) of the mail in one of the following formats
                * all the formats as available in `from`
                * a CSV of such addresses like "info@a.com, info@b.com"
                * An Array/List/IEnumerable of such strings
                * An Array/List/IEnumerable of System.Net.Mail.MailAddress objects
            </param>
      <param name="cc">CC recipient(s) of the mail, in the same format as `to`</param>
      <param name="bcc">BCC recipient(s) of the mail, in the same format as `to`</param>
      <param name="replyTo">ReplyTo address(es) in the same format as `to`</param>
      <param name="subject">The main subject</param>
      <param name="body">The body / contents of the e-mail - can be text or HTML</param>
      <param name="isHtml">Set the body to be HTML - if not set, will auto-detect</param>
      <param name="encoding">
                Encoding of subject and body - if not set, will default to UTF8.
                If you need different encodings on subject and body, set it on the resulting object. 
            </param>
      <param name="attachments">
                One or more attachments to include. Could be any of the following
                - A System.Net.Mail.Attachment object
                - An <see cref="T:ToSic.Sxc.Adam.IFile" /> or an <see cref="T:ToSic.Eav.Apps.Assets.IFile" /> object
                - An Array/IEnumerable of these 
            </param>
      <returns>void</returns>
    </member>
    <member name="T:ToSic.Sxc.Services.IPageService">
      <summary>
             Make changes to the page - usually from Razor.
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.IPageService">ðŸ“– IPageService</a></para></summary>
      <remarks>
            
             History
             * Introduced in v12.02 but on another namespace which still works for compatibility
             * Moved to ToSic.Sxc.Services in v13
             * Added ability to use placeholder `[original]` in v13.11
             * Most commands were updated to return an empty string in v14.02 so that they could be used as inline razor (previously `void`)
             </remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.IPageService.SetBase(System.String)">
      <summary>
            Add a standard base header tag or replace it if one is already provided.
            </summary>
      <param name="url">the optional url for the base tag - if null, will try to default to the real url for the current page</param>
      <returns>Empty string, so it can be used on inline razor such as `@Kit.Page.SetBase(...)`</returns>
    </member>
    <member name="M:ToSic.Sxc.Services.IPageService.SetTitle(System.String,System.String)">
      <summary>
             Set the Page Title. Behavior:
            
             * By default it will _prefix_ the new title - `SetTitle('My New Title - ')` = `My New Title - Blog - 2sxc.org`
             * You can also use the new `[original]` token like `SetTitle('[original] - My New Title')` = `Blog - 2sxc.org - My New Title`
             * You can add a placeholder to the page-title and tell SetTitle what it is. `SetTitle('My New Title', '2sxc.org') = `Blog - My New Title`
             </summary>
      <returns>Empty string, so it can be used on inline razor such as `@Kit.Page.SetTitle(...)`</returns>
    </member>
    <member name="M:ToSic.Sxc.Services.IPageService.SetDescription(System.String,System.String)">
      <summary>
             Set the Page Description.
             It will either try to replace the placeholder (second parameter)
             or _prefix_ it to the existing description (unless `[original]` is given).
            
             See also the details with placeholder or `[original]` as explained on <see cref="M:ToSic.Sxc.Services.IPageService.SetTitle(System.String,System.String)" /></summary>
      <returns>Empty string, so it can be used on inline razor such as `@Kit.Page.SetDescription(...)`</returns>
    </member>
    <member name="M:ToSic.Sxc.Services.IPageService.SetKeywords(System.String,System.String)">
      <summary>
             Set the Page Keywords. 
             It will either try to replace the placeholder (second parameter)
             or _prefix_ it to the existing keywords  (unless `[original]` is given).
            
             See also the details with placeholder or `[original]` as explained on <see cref="M:ToSic.Sxc.Services.IPageService.SetTitle(System.String,System.String)" /></summary>
      <returns>Empty string, so it can be used on inline razor such as `@Kit.Page.SetKeywords(...)`</returns>
    </member>
    <member name="M:ToSic.Sxc.Services.IPageService.SetHttpStatus(System.Int32,System.String)">
      <summary>
            Set the page status code if possible (it will work in DNN, but probably not in Oqtane)
            </summary>
      <param name="statusCode">An HTTP status code like 404</param>
      <param name="message">Message / Description text (optional) which would be included in the header</param>
      <returns>Empty string, so it can be used on inline razor such as `@Kit.Page.SetHttpStatus(...)`</returns>
    </member>
    <member name="M:ToSic.Sxc.Services.IPageService.AddToHead(System.String)">
      <summary>
            Add a tag to the header of the page
            Will simply not do anything if an error occurs, like if the page object doesn't exist
            </summary>
      <param name="tag"></param>
      <returns>Empty string, so it can be used on inline razor such as `@Kit.Page.AddToHead(...)`</returns>
    </member>
    <member name="M:ToSic.Sxc.Services.IPageService.AddToHead(ToSic.Razor.Blade.IHtmlTag)">
      <summary>
            Add a RazorBlade Tag to the headers of the page
            Will simply not do anything if an error occurs, like if the page object doesn't exist
            </summary>
      <param name="tag"></param>
      <returns>Empty string, so it can be used on inline razor such as `@Kit.Page.AddToHead(...)`</returns>
    </member>
    <member name="M:ToSic.Sxc.Services.IPageService.AddMeta(System.String,System.String)">
      <summary>
            Add a standard meta header tag.
            You may also want to use <see cref="M:ToSic.Sxc.Services.IPageService.AddOpenGraph(System.String,System.String)" /> or <see cref="M:ToSic.Sxc.Services.IPageService.AddJsonLd(System.String)" /></summary>
      <param name="name"></param>
      <param name="content"></param>
      <returns>Empty string, so it can be used on inline razor such as `@Kit.Page.AddMeta(...)`</returns>
    </member>
    <member name="M:ToSic.Sxc.Services.IPageService.AddOpenGraph(System.String,System.String)">
      <summary>
            Add an open-graph header according to http://ogp.me/
            </summary>
      <param name="property">Open Graph property name, like title or image:width. 'og:' is automatically prefixed if not included</param>
      <param name="content">value of this property</param>
      <returns>Empty string, so it can be used on inline razor such as `@Kit.Page.AddOpenGraph(...)`</returns>
    </member>
    <member name="M:ToSic.Sxc.Services.IPageService.AddJsonLd(System.String)">
      <summary>
            Add a JSON-LD header according https://developers.google.com/search/docs/guides/intro-structured-data
            </summary>
      <param name="jsonString">A prepared JSON string</param>
      <returns>Empty string, so it can be used on inline razor such as `@Kit.Page.AddJsonLd(...)`</returns>
    </member>
    <member name="M:ToSic.Sxc.Services.IPageService.AddJsonLd(System.Object)">
      <summary>
            Add a JSON-LD header according https://developers.google.com/search/docs/guides/intro-structured-data
            </summary>
      <param name="jsonObject">A object which will be converted to JSON. We recommend using dictionaries to build the object.</param>
      <returns>Empty string, so it can be used on inline razor such as `@Kit.Page.AddJsonLd(...)`</returns>
    </member>
    <member name="M:ToSic.Sxc.Services.IPageService.AddIcon(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.Int32,System.String)">
      <summary>
            Add an Icon header tag to the Page. 
            </summary>
      <param name="path">Path to the image/icon file</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="rel">the rel-text, default is 'icon'. common terms are also 'shortcut icon' or 'apple-touch-icon'</param>
      <param name="size">Will be used in size='#x#' tag; only relevant if you want to provide multiple separate sizes</param>
      <param name="type">An optional type. If not provided, will be auto-detected from known types or remain empty</param>
      <returns>Empty string, so it can be used on inline razor such as `@Kit.Page.AddIcon(...)`</returns>
    </member>
    <member name="M:ToSic.Sxc.Services.IPageService.AddIconSet(System.String,ToSic.Lib.Coding.NoParamOrder,System.Object,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            Add a set of icons to the page
            </summary>
      <param name="path">Path to the image/icon file</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="favicon">path to favicon, default is '/favicon.ico' </param>
      <param name="rels"></param>
      <param name="sizes"></param>
      <returns>Empty string, so it can be used on inline razor such as `@Kit.Page.AddIconSet(...)`</returns>
    </member>
    <member name="M:ToSic.Sxc.Services.IPageService.Activate(System.String[])">
      <summary>
            Activate a feature on this page, such as `turnOn`, `2sxc.JsCore` etc.
            For list of features, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Razor.Services.IPageServiceActivate">NetCode.Razor.Services.IPageServiceActivate</a>.
            </summary>
      <param name="keys">One or more strings containing Page-Feature keys</param>
      <returns>Empty string, so it can be used on inline razor such as `@Kit.Page.Activate(...)`</returns>
    </member>
    <member name="M:ToSic.Sxc.Services.IPageService.Activate(ToSic.Lib.Coding.NoParamOrder,System.Boolean,System.String[])">
      <summary>
            Activate a feature on this page, such as `turnOn`, `2sxc.JsCore` etc.
            For list of features, see <a href="https://go.2sxc.org/xref17?xref=NetCode.Razor.Services.IPageServiceActivate">NetCode.Razor.Services.IPageServiceActivate</a>.
            </summary>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="condition">Condition to determine if activation should happen</param>
      <param name="features">One or more strings containing Page-Feature keys</param>
      <returns>Empty string, so it can be used on inline razor such as `@Kit.Page.Activate(...)`</returns>
      <remarks>
            * This overload with `condition` added in v15.03
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.IPageService.AssetAttributes(ToSic.Lib.Coding.NoParamOrder,System.Boolean,System.Int32,System.String,System.Boolean)">
      <summary>
            Add common html attributes to a `script` or `link` tag to <a href="https://go.2sxc.org/xref17?xref=Basics.Server.AssetOptimization.Index">enable optimizations</a>
            and <a href="https://go.2sxc.org/xref17?xref=Abyss.Security.Csp.Parts#auto-white-listing-explicit">automatically whitelist in the Content Security Policy</a></summary>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="optimize">Activate optimize, default is true</param>
      <param name="priority">Optional priority of optimization. Must be more than 100 to have an effect.</param>
      <param name="position">Optional position of the resource (`head`, `body`, `bottom`)</param>
      <param name="whitelist">Automatically add to CSP-whitelist. This uses a random key to protect against XSS.</param>
      <returns>The asset attributes in a format which will be preserved in HTML</returns>
      <remarks>
            History: Created in 2sxc 13.10
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.IPageService.AddCsp(System.String,System.String[])">
      <summary>
             Add a CSP rule where you also specify the name.
             Best check the <a href="https://go.2sxc.org/xref17?xref=Abyss.Security.Csp.Index">CSP Guide</a>.
            
             For an example, see <a href="https://go.2sxc.org/xref17?xref=Abyss.Security.Csp.CodedRules">Coded CSP</a></summary>
      <param name="name"></param>
      <param name="values"></param>
      <returns>Empty string, so it can be used on inline razor such as `@Kit.Page.AddCsp(...)`</returns>
    </member>
    <member name="M:ToSic.Sxc.Services.IPageService.TurnOn(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Object,System.Object,System.Boolean,System.Nullable{System.Boolean})">
      <summary>
            Turn on some javascript code when all requirements have been met.
            Uses <a href="https://go.2sxc.org/xref17?xref=JsCode.TurnOn.Index">turnOn</a>.
            
            Will automatically activate the feature and set hidden data on the page for the turnOn JS to pick up.
            </summary>
      <param name="runOrSpecs">
            * either a run `string` like `window.myObject.myJs()` (must always start with window)
            * or a object containing all the parameters which turnOn requires
            </param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="require">
            _optional_ One or more requirements which must be met before the code starts.
            Can be one or many values and/or functions.
            * a `string` such as `window.myObject` or `window.myObject.readyToStart()`
            * a array of such strings
            </param>
      <param name="data">_optional_ any value such as a string, or an object - to pass into the run-command</param>
      <param name="condition">_optional_ condition when this should happen - if false, it won't add anything (new v16.02)</param>
      <param name="noDuplicates">Will not add this turnOn if an identical one is already added to the page (new 16.05)</param>
      <returns>An empty string, just so you can use it directly in Razor like `@Kit.Page.TurnOn("...")`</returns>
      <remarks>
            * Added in v15.x
            * `condition` added in 16.02
            * `noDuplicates` added in 16.05
            </remarks>
    </member>
    <member name="T:ToSic.Sxc.Services.IRenderService">
      <summary>
             Block-Rendering system. It's responsible for taking a Block and delivering HTML for the output. <br />
             It's used for InnerContent, so that Razor-Code can easily render additional content blocks. <br />
             See also <a href="https://go.2sxc.org/xref17?xref=Basics.Cms.InnerContent.Index">Basics.Cms.InnerContent.Index</a><para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.IRenderService">ðŸ“– IRenderService</a></para></summary>
      <remarks>
             This replaces the now obsolete ToSic.Sxc.Blocks.Render
            
             History
             * Introduced in v12.05 but on another namespace which still works for compatibility
             * Moved to ToSic.Sxc.Services in v13
             </remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.IRenderService.One(ToSic.Sxc.Data.Internal.ICanBeItem,ToSic.Lib.Coding.NoParamOrder,ToSic.Eav.Data.ICanBeEntity,System.Object,System.String,System.Nullable{System.Guid})">
      <summary>
            Render one content block
            This is accessed through DynamicEntity.Render()
            At the moment it MUST stay internal, as it's not clear what API we want to surface
            </summary>
      <param name="parent">The parent-item containing the content-blocks and providing edit-context</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="item">The content-block item to render. Optional, by default the same item is used as the context.</param>
      <param name="field">Optional: </param>
      <param name="newGuid">Internal: this is the guid given to the item when being created in this block. Important for the inner-content functionality to work. </param>
      <param name="data">Data to give the Razor as `DynamicModel` - new 15.07</param>
      <returns></returns>
      <remarks>
            * Changed result object to `IRawHtmlString` in v16.02 from `IHybridHtmlString`
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.IRenderService.All(ToSic.Sxc.Data.Internal.ICanBeItem,ToSic.Lib.Coding.NoParamOrder,System.String,System.String,System.Int32,System.String)">
      <summary>
            Render content-blocks into a larger html-block containing placeholders
            </summary>
      <param name="parent">The parent-item containing the content-blocks and providing edit-context</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="field">Required: Field containing the content-blocks. </param>
      <param name="max">BETA / WIP</param>
      <param name="merge">Optional: html-text containing special placeholders.</param>
      <param name="apps">BETA / WIP</param>
      <returns></returns>
      <remarks>
            * Changed result object to `IRawHtmlString` in v16.02 from `IHybridHtmlString`
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.IRenderService.Module(System.Int32,System.Int32,ToSic.Lib.Coding.NoParamOrder,System.Object)">
      <summary>
            Get a 2sxc module rendered directly. 
            </summary>
      <param name="pageId"></param>
      <param name="moduleId"></param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="data">Data to give the Razor as `DynamicModel` - new 15.07</param>
      <returns>
            An HTML-String which can be added to the output directly.
            The object also has additional information like assets or page changes, which are not applied when using this render command. 
            </returns>
      <remarks>New in 2sxc 13.02</remarks>
    </member>
    <member name="T:ToSic.Sxc.Services.ISecureDataService">
      <summary>
            Helper to work with secure / encrypted data. 
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ISecureDataService">ðŸ“– ISecureDataService</a></para></summary>
      <remarks>
            History
            * Added in 2sxc 12.05
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.ISecureDataService.Parse(System.String)">
      <summary>
            Read an input value and return a secure data object.
            This will contain the readable value and additional information if it was encrypted or not, etc.
            </summary>
      <param name="value"></param>
      <returns></returns>
    </member>
    <member name="T:ToSic.Sxc.Services.SecureDataService">
      <summary>
             Note: this is still a very temporary implementation, WIP
            
             For now we have a super-trivial encryption for keys which are not really critical,
             but only 2sxc distributions actually encrypt stuff. So it's not for any other use yet.
            
             To encrypt other values, use the SecureDataTest.DumpEncryptedValue() code and get the encrypted value from the Trace
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.SecureDataService">ðŸ“– SecureDataService</a></para></summary>
    </member>
    <member name="M:ToSic.Sxc.Services.SecureDataService.#ctor(ToSic.Eav.Security.Encryption.AesCryptographyService)">
      <summary>
             Note: this is still a very temporary implementation, WIP
            
             For now we have a super-trivial encryption for keys which are not really critical,
             but only 2sxc distributions actually encrypt stuff. So it's not for any other use yet.
            
             To encrypt other values, use the SecureDataTest.DumpEncryptedValue() code and get the encrypted value from the Trace
             </summary>
    </member>
    <member name="T:ToSic.Sxc.Services.ServiceKit">
      <summary>
            Root / base class for **ServiceKits**.
            ServiceKits are a bundle of services which are quickly available when you need them.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ServiceKit">ðŸ“– ServiceKit</a></para></summary>
      <remarks>
            * History: Added v14.04
            * Everything that needs a ServiceKit will have a "where TKit : <see cref="T:ToSic.Sxc.Services.ServiceKit14" />"
            * It's not abstract, so that you can use it as the placeholder in cases where you don't need a real kit (like in DynamicCodeRoot generic types)
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.ServiceKit.#ctor(System.String)">
      <summary>
            Root / base class for **ServiceKits**.
            ServiceKits are a bundle of services which are quickly available when you need them.
            </summary>
      <remarks>
            * History: Added v14.04
            * Everything that needs a ServiceKit will have a "where TKit : <see cref="T:ToSic.Sxc.Services.ServiceKit14" />"
            * It's not abstract, so that you can use it as the placeholder in cases where you don't need a real kit (like in DynamicCodeRoot generic types)
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.ServiceKit.GetKitService``1">
      <summary>
             All the services provided by this kit must come from the code root, so they are properly initialized.
            
             Will first try to use the GetService method to ensure that changes in the Kit (eg. 16/14) still return
             the identical sub-services.
             </summary>
      <typeparam name="TService"></typeparam>
      <returns></returns>
    </member>
    <member name="T:ToSic.Sxc.Services.ServiceKit14">
      <summary>
            Default ServiceKit for 2sxc v14.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ServiceKit14">ðŸ“– ServiceKit14</a></para></summary>
      <remarks>
            * History: Added v14.04
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.ServiceKit14.#ctor">
      <summary>
            Default ServiceKit for 2sxc v14.
            </summary>
      <remarks>
            * History: Added v14.04
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKit14.Adam">
      <summary>
            The ADAM Service, used to retrieve files and maybe more. 
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ServiceKit14.Adam">ðŸ“– Adam</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKit14.Cms">
      <summary>
            The CMS Service - WIP
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ServiceKit14.Cms">ðŸ“– Cms</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKit14.Convert">
      <summary>
            The Convert Service, used to convert any kind of data type to another data type
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ServiceKit14.Convert">ðŸ“– Convert</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKit14.Css">
      <summary>
            The Koi CSS Service, used to detect the current CSS framework and other features.
            See <a href="https://go.2sxc.org/xref17?xref=Connect.Koi.ICss">ICss</a><para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ServiceKit14.Css">ðŸ“– Css</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKit14.Data">
      <summary>
            The Data service to get DataSources and similar.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ServiceKit14.Data">ðŸ“– Data</a></para></summary>
      <remarks>
            * added in v15.06
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKit14.Edit">
      <summary>
            The Edit service, same as the main Edit service
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ServiceKit14.Edit">ðŸ“– Edit</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKit14.Feature">
      <summary>
            The Features service, used to check if features are enabled
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ServiceKit14.Feature">ðŸ“– Feature</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKit14.HtmlTags">
      <summary>
             The Razor Blade 4 HtmlTags service, to fluidly create Tags.
             See <a href="https://go.2sxc.org/xref17?xref=ToSic.Razor.Blade.IHtmlTagsService">ToSic.Razor.Blade.IHtmlTagsService</a>.
            
             &gt; [!IMPORTANT]
             &gt; This is _similar but different_ to the [Razor.Blade.Tag](https://razor-blade.net/api/ToSic.Razor.Blade.Tag.html).
             &gt; The <a href="https://go.2sxc.org/xref17?xref=ToSic.Razor.Blade.IHtmlTag">ToSic.Razor.Blade.IHtmlTag</a> objects returned here are _immutable_.
             &gt; This means that chained commands like `...HtmlTags.Div().Id(...).Class(...)`
             &gt; all return new objects and don't modify the previous one.
             &gt;
             &gt; The older `Tag` helper created mutable objects where chaining always modified the original and returned it again.
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ServiceKit14.HtmlTags">ðŸ“– HtmlTags</a></para></summary>
      <remarks>Added in v15</remarks>
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKit14.Image">
      <summary>
            The Images service, used to create `img` and `picture` tags
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ServiceKit14.Image">ðŸ“– Image</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKit14.Json">
      <summary>
            The JSON service, used to convert data to-and-from JSON
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ServiceKit14.Json">ðŸ“– Json</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKit14.Link">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.Link" />
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKit14.SystemLog">
      <summary>
            The System Log service, used to add log messages to the system (Dnn/Oqtane)
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ServiceKit14.SystemLog">ðŸ“– SystemLog</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKit14.Log">
      <summary>
            Note that this was used in Mobius / Events in a few releases, so we can't just change it.
            If we create a Kit15, this should be removed
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ServiceKit14.Log">ðŸ“– Log</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKit14.Mail">
      <summary>
            The Mail service, used to send mails
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ServiceKit14.Mail">ðŸ“– Mail</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKit14.Page">
      <summary>
            The Page service, used to set headers, activate features etc.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ServiceKit14.Page">ðŸ“– Page</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKit14.Render">
      <summary>
            The Render service, used to render one or more dynamic content within other content
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ServiceKit14.Render">ðŸ“– Render</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKit14.SecureData">
      <summary>
            The Secure Data service - mainly for reading / decrypting secrets. 
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ServiceKit14.SecureData">ðŸ“– SecureData</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKit14.Scrub">
      <summary>
            The Razor-Blade Scrub service, used to clean up HTML.
            See <a href="https://go.2sxc.org/xref17?xref=ToSic.Razor.Blade.IScrub">ToSic.Razor.Blade.IScrub</a><para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ServiceKit14.Scrub">ðŸ“– Scrub</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKit14.Toolbar">
      <summary>
            The toolbar service, used to generate advanced toolbars
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ServiceKit14.Toolbar">ðŸ“– Toolbar</a></para></summary>
    </member>
    <member name="T:ToSic.Sxc.Services.ServiceKit16">
      <summary>
            Default ServiceKit for 2sxc v14.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ServiceKit16">ðŸ“– ServiceKit16</a></para></summary>
      <remarks>
            * History: Added v14.04
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.ServiceKit16.#ctor">
      <summary>
            Default ServiceKit for 2sxc v14.
            </summary>
      <remarks>
            * History: Added v14.04
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKit16.Adam">
      <inheritdoc cref="P:ToSic.Sxc.Services.ServiceKit14.Adam" />
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKit16.Cms">
      <summary>
            The CMS Service - WIP
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ServiceKit16.Cms">ðŸ“– Cms</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKit16.Convert">
      <inheritdoc cref="P:ToSic.Sxc.Services.ServiceKit14.Convert" />
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKit16.Css">
      <inheritdoc cref="P:ToSic.Sxc.Services.ServiceKit14.Css" />
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKit16.Data">
      <inheritdoc cref="P:ToSic.Sxc.Services.ServiceKit14.Data" />
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKit16.Edit">
      <inheritdoc cref="P:ToSic.Sxc.Services.ServiceKit14.Edit" />
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKit16.Feature">
      <inheritdoc cref="P:ToSic.Sxc.Services.ServiceKit14.Feature" />
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKit16.HtmlTags">
      <inheritdoc cref="P:ToSic.Sxc.Services.ServiceKit14.HtmlTags" />
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKit16.Image">
      <inheritdoc cref="P:ToSic.Sxc.Services.ServiceKit14.Image" />
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKit16.Json">
      <inheritdoc cref="P:ToSic.Sxc.Services.ServiceKit14.Json" />
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKit16.Link">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.Link" />
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKit16.SystemLog">
      <inheritdoc cref="P:ToSic.Sxc.Services.ServiceKit14.SystemLog" />
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKit16.Mail">
      <inheritdoc cref="P:ToSic.Sxc.Services.ServiceKit14.Mail" />
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKit16.Page">
      <inheritdoc cref="P:ToSic.Sxc.Services.ServiceKit14.Page" />
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKit16.Render">
      <inheritdoc cref="P:ToSic.Sxc.Services.ServiceKit14.Render" />
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKit16.SecureData">
      <inheritdoc cref="P:ToSic.Sxc.Services.ServiceKit14.SecureData" />
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKit16.Scrub">
      <inheritdoc cref="P:ToSic.Sxc.Services.ServiceKit14.Scrub" />
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKit16.Toolbar">
      <inheritdoc cref="P:ToSic.Sxc.Services.ServiceKit14.Toolbar" />
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKit16.User">
      <inheritdoc cref="P:ToSic.Sxc.Services.ServiceKit14.User" />
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKit16.Key">
      <summary>
            Key service.
            Rarely used, as the RazorTyped has a UniqueKey property which comes from this service.
            You only need this service, if you need to create combined keys (eg with an entity)
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ServiceKit16.Key">ðŸ“– Key</a></para></summary>
      <remarks>
            * New in v16.04
            </remarks>
    </member>
    <member name="T:ToSic.Sxc.Services.ServiceKitLight16">
      <summary>
             Lightweight ServiceKit for 2sxc v15.
             It's primarily used in dynamic code which runs standalone, without a module context.
            
             Example: Custom DataSources can run anywhere without actually being inside a module or content-block.
             In such scenarios, certain services like the <see cref="T:ToSic.Sxc.Services.IPageService" /> would not be able to perform any real work.
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ServiceKitLight16">ðŸ“– ServiceKitLight16</a></para></summary>
      <remarks>
             * History: Added v15.06 - still WIP
             </remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.ServiceKitLight16.#ctor(System.IServiceProvider)">
      <summary>
             Lightweight ServiceKit for 2sxc v15.
             It's primarily used in dynamic code which runs standalone, without a module context.
            
             Example: Custom DataSources can run anywhere without actually being inside a module or content-block.
             In such scenarios, certain services like the <see cref="T:ToSic.Sxc.Services.IPageService" /> would not be able to perform any real work.
             </summary>
      <remarks>
             * History: Added v15.06 - still WIP
             </remarks>
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKitLight16.Convert">
      <inheritdoc cref="P:ToSic.Sxc.Services.ServiceKit14.Convert" />
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKitLight16.Data">
      <inheritdoc cref="P:ToSic.Sxc.Services.ServiceKit14.Data" />
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKitLight16.Feature">
      <inheritdoc cref="P:ToSic.Sxc.Services.ServiceKit14.Feature" />
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKitLight16.HtmlTags">
      <inheritdoc cref="P:ToSic.Sxc.Services.ServiceKit14.HtmlTags" />
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKitLight16.Json">
      <inheritdoc cref="P:ToSic.Sxc.Services.ServiceKit14.Json" />
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKitLight16.SystemLog">
      <inheritdoc cref="P:ToSic.Sxc.Services.ServiceKit14.SystemLog" />
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKitLight16.SecureData">
      <inheritdoc cref="P:ToSic.Sxc.Services.ServiceKit14.SecureData" />
    </member>
    <member name="P:ToSic.Sxc.Services.ServiceKitLight16.Scrub">
      <inheritdoc cref="P:ToSic.Sxc.Services.ServiceKit14.Scrub" />
    </member>
    <member name="T:ToSic.Sxc.Services.IToolbarService">
      <summary>
            Special helper to generate edit toolbars in the front-end.
            It's especially useful custom and/or complex rules like Metadata-buttons.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.IToolbarService">ðŸ“– IToolbarService</a></para></summary>
      <remarks>
            History
            * uses the <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.Functional">NetCode.Conventions.Functional</a>
            * Added in 2sxc 13
            * parameter `target` added to `Default()` and `Empty()` in v14.03
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.IToolbarService.Default(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton},System.Object,System.Object,System.Object)">
      <summary>
            Build a Toolbar configuration using the `default` template/buttons to use with `@Edit.Toolbar`
            It's a fluid API, so the returned object can be extended with further `Add(...)` or special helpers to quickly create complex configurations.
            For guidance what to give it, also check out the <a href="https://go.2sxc.org/xref17?xref=JsCode.Toolbars.Simple">toolbar docs</a>.
            </summary>
      <param name="target">_optional_ entity-like target, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Target">target guide</a></param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="tweak">Functional <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.TweakButtons">Tweak API</a> to modify UI and parameters (new v16.02)</param>
      <param name="ui">_optional_ configuration how to show, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Ui">ui guide</a></param>
      <param name="parameters">_optional_ parameters for the command, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Parameters">parameters guide</a></param>
      <param name="prefill">_optional_ prefill for the edit-UI, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Prefill">prefill guide</a></param>
      <returns></returns>
      <remarks>
            History
            * Added in 2sxc 13
            * target, ui, parameters added in v14.04
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.IToolbarService.Empty(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton},System.Object,System.Object,System.Object)">
      <summary>
            Build a Toolbar configuration using the `empty` toolbar to use with `@Edit.Toolbar`
            It's a fluid API, so the returned object can be extended with further `Add(...)` or special helpers to quickly create complex configurations.
            For guidance what to give it, also check out the <a href="https://go.2sxc.org/xref17?xref=JsCode.Toolbars.Simple">toolbar docs</a>.
            </summary>
      <param name="target">_optional_ entity-like target, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Target">target guide</a></param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="tweak">Functional <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.TweakButtons">Tweak API</a> to modify UI and parameters (new v16.02)</param>
      <param name="ui">_optional_ configuration how to show, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Ui">ui guide</a></param>
      <param name="parameters">_optional_ parameters for the command, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Parameters">parameters guide</a></param>
      <param name="prefill">_optional_ prefill for the edit-UI, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Prefill">prefill guide</a></param>
      <returns></returns>
      <remarks>
            History
            * Added in 2sxc 13
            * target, ui, parameters added in v14.04
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.IToolbarService.Metadata(System.Object,System.String,ToSic.Lib.Coding.NoParamOrder,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton},System.Object,System.Object,System.Object,System.String)">
      <summary>
            Build an **empty** Toolbar with a Metadata button.
            
            This is the same as `.Empty().Metadata(...)`
            </summary>
      <param name="target">The target object which should receive metadata. Must support <see cref="T:ToSic.Eav.Metadata.IHasMetadata" /></param>
      <param name="contentTypes">Name of one or more content-types for which to generate the button(s). For many, use comma `,` to separate. If not specified, will try to lookup config (v14)</param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="tweak">Functional <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.TweakButtons">Tweak API</a> to modify UI and parameters (new v16.02)</param>
      <param name="ui">_optional_ configuration how to show, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Ui">ui guide</a></param>
      <param name="parameters">_optional_ parameters for the command, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Parameters">parameters guide</a></param>
      <param name="prefill">_optional_ prefill for the edit-UI, see <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.Prefill">prefill guide</a></param>
      <param name="context">EXPERIMENTAL - not final</param>
      <returns>An toolbar builder with empty configuration and just this button on it</returns>
      <remarks>
            History
            * Added in 2sxc 13
            * contentTypes changed from one to many in v14
            * contentTypes can also have `*` or `YourCustomType,*` in v14
            * contentTypes can also be optional, in which case it behaves as if it was `*` in v14 - if no config is found, it will not add a metadata-button
            * parameter context added in 2sxc 14 - still WIP/experimental
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.IToolbarService.Edit(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton})">
      <summary>
            Build an **empty** Toolbar with a Edit button.
            
            This is the same as `.Empty().Edit(...)`
            </summary>
      <param name="target">The target object which should receive metadata. Must support <see cref="T:ToSic.Eav.Metadata.IHasMetadata" /></param>
      <param name="noParamOrder">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="tweak">Functional <a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.ToolbarBuilder.TweakButtons">Tweak API</a> to modify UI and parameters (new v16.02)</param>
      <returns>An toolbar builder with empty configuration and just this button on it</returns>
      <remarks>
            History
            * Added in 2sxc 17
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.ToolbarService.Default(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton},System.Object,System.Object,System.Object)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Services.ToolbarService.Empty(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton},System.Object,System.Object,System.Object)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Services.ToolbarService.Metadata(System.Object,System.String,ToSic.Lib.Coding.NoParamOrder,System.Func{ToSic.Sxc.Edit.Toolbar.ITweakButton,ToSic.Sxc.Edit.Toolbar.ITweakButton},System.Object,System.Object,System.Object,System.String)">
      <inheritdoc />
    </member>
    <member name="T:ToSic.Sxc.Services.Tweaks.ITweakData`1">
      <summary>
            Container for a value (data) to tweak.
            As of now just contains the value in a property, but will be extended in the future.
            So in future it could have more context information etc.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.Tweaks.ITweakData`1">ðŸ“– ITweakData`1</a></para></summary>
      <remarks>New in v17 - NOT YET IN USE IN PUBLIC APIs</remarks>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="P:ToSic.Sxc.Services.Tweaks.ITweakData`1.Value">
      <summary>
            Current value before tweaking.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.Tweaks.ITweakData`1.Value">ðŸ“– Value</a></para></summary>
    </member>
    <member name="T:ToSic.Sxc.Services.Tweaks.ITweakInput`1">
      <summary>
             Tweak API to reconfigure a value pre-processing in a service / method call.
            
             Whatever code you write, always assume that this interface can be replaced with another name
             which will then provide more tweaks. So never use the interface-name in your code.
             <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.Tweaks.ITweakInput`1">ðŸ“– ITweakInput`1</a></para></summary>
      <remarks>Added in v17</remarks>
    </member>
    <member name="M:ToSic.Sxc.Services.Tweaks.ITweakInput`1.Input(`0,ToSic.Lib.Coding.NoParamOrder)">
      <summary>
            Simple value tweak, to inject a different value for use instead of the original.
            </summary>
      <param name="replace">replacement value to use instead</param>
      <param name="protector">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="step">optional step, such as 'before' or 'after' - default is 'before'</param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Services.Tweaks.ITweakInput`1.Input(System.Func{`0},ToSic.Lib.Coding.NoParamOrder)">
      <summary>
            Simple value tweak, to inject a different value for use instead of the original.
            </summary>
      <param name="func">function to generate a replacement value</param>
      <param name="protector">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="step">optional step, such as 'before' or 'after' - default is 'before'</param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Services.Tweaks.ITweakInput`1.Input(System.Func{`0,`0},ToSic.Lib.Coding.NoParamOrder)">
      <summary>
            Simple value tweak, to inject a different value for use instead of the original.
            </summary>
      <param name="func">function to generate a replacement value, but first providing the initial value</param>
      <param name="protector">see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.NamedParameters">NetCode.Conventions.NamedParameters</a></param>
      <param name="step">optional step, such as 'before' or 'after' - default is 'before'</param>
      <returns></returns>
    </member>
    <member name="P:ToSic.Sxc.Services.Tweaks.TweakConfig.Target">
      <summary>
            Name of the target which will be modified, eg `Value`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.Tweaks.TweakConfig.Target">ðŸ“– Target</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Services.Tweaks.TweakConfig.Step">
      <summary>
            Step of the tweak, like a workflow step. eg. `Result`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.Tweaks.TweakConfig.Step">ðŸ“– Step</a></para></summary>
    </member>
    <member name="T:ToSic.Sxc.Services.Tweaks.TweakData`1">
      <summary>
            WIP 16.08 Helper to let a tweak operation modify a value
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.Tweaks.TweakData`1">ðŸ“– TweakData`1</a></para></summary>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="P:ToSic.Sxc.Services.Tweaks.TweakData`1.Name">
      <summary>
            Name of the value which will be modified, eg `FirstName`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.Tweaks.TweakData`1.Name">ðŸ“– Name</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Services.Tweaks.TweakData`1.Step">
      <summary>
            Step of the tweak, like a workflow step. eg. `before`
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.Tweaks.TweakData`1.Step">ðŸ“– Step</a></para></summary>
    </member>
    <member name="P:ToSic.Sxc.Services.Tweaks.TweakData`1.Value">
      <inheritdoc />
    </member>
    <member name="T:ToSic.Sxc.Services.Tweaks.TweakValueEngine">
      <summary>
            Not in use yet
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Services.Tweaks.TweakValueEngine">ðŸ“– TweakValueEngine</a></para></summary>
    </member>
    <member name="M:ToSic.Sxc.Startup.RegisterSxcServices.AddSxcCoreFallbackServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
      <summary>
            This will add Do-Nothing services which will take over if they are not provided by the main system
            In general this will result in some features missing, which many platforms don't need or care about
            </summary>
      <param name="services"></param>
      <returns></returns>
      <remarks>
            All calls in here MUST use TryAddTransient, and never without the Try
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Startup.RegisterSxcServices.AddSxcCoreLookUps(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
      <summary>
            This will add LookUps for DI
            All must use AddTransient, not TryAdd
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Startup.SxcStartUpRegistrations.Register">
      <summary>
            Register Dnn features before loading
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Web.Build.Attribute(System.String,System.String)">
      <summary>
            Generate an HTML attribute
            - but only if in edit mode
            </summary>
      <param name="name"></param>
      <param name="value"></param>
      <returns></returns>
      <remarks>
            has trailing space to ensure attributes never "stick" together
            we also don't want to use {HttpUtility.HtmlAttributeEncode(value)...
            ...because it makes the html hard to work with when debugging
            so we just manually replace all apos to make sure it doesn't create invalid html
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.ClientAssets.ClientAsset.Id">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.ClientAssets.ClientAsset.HtmlAttributes">
      <inheritdoc />
    </member>
    <member name="F:ToSic.Sxc.Web.Internal.ClientAssets.ClientAssetConstants.SpecialHtmlAttributes">
      <summary>
            List of special attributes like "src", "id", "data-enableoptimizations"
            that we need to skip from adding in general HtmlAttributes dictionary
            because this special attributes are handled in custom way.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.ClientAssets.ClientAssetExtractSettings.ExtractAll">
      <summary>
            Extract all assets, even if they don't have an auto-optimize attribute.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.ClientAssets.ClientAssetExtractSettings.Priority">
      <summary>
            Default Priority - will be used for sorting when added to page
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.ClientAssets.ClientAssetExtractSettings.AutoDefer">
      <summary>
            Automatically add a `defer` attribute to scripts
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.ClientAssets.ClientAssetExtractSettings.AutoAsync">
      <summary>
            Automatically add as `async` attribute to scripts
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.ClientAssets.IClientAsset.Id">
      <summary>
            Asset ID for use in HTML - ideally should ensure that this asset is only loaded once
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.ClientAssets.IClientAsset.HtmlAttributes">
      <summary>
            Used to store all other html attributes from html tag.
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Web.Internal.ContentSecurityPolicy.ContentSecurityPolicyService">
      <summary>
            Very experimental, do not use
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Web.Internal.ContentSecurityPolicy.ContentSecurityPolicyServiceBase">
      <summary>
            Very experimental, do not use
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.ContentSecurityPolicy.ContentSecurityPolicyServiceBase.#ctor">
      <summary>
            Very experimental, do not use
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Web.Internal.ContentSecurityPolicy.CspOfApp">
      <summary>
            This object reads the CSP settings of an app and passes it to the <see cref="T:ToSic.Sxc.Web.Internal.ContentSecurityPolicy.CspOfModule" />.
            This is important because a module can have multiple apps in it, so it must merge the Csp Settings
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.ContentSecurityPolicy.CspOfApp.ConnectToRoot(ToSic.Sxc.Code.Internal.ICodeApiService)">
      <summary>
            Connect to code root, so page-parameters and settings will be available later on.
            Important: page-parameters etc. are not available at this time, so don't try to get them until needed
            </summary>
      <param name="codeRoot"></param>
    </member>
    <member name="F:ToSic.Sxc.Web.Internal.ContentSecurityPolicy.CspOfModule.AppCsps">
      <summary>
            Each App will register itself here to be added to the CSP list
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.ContentSecurityPolicy.CspOfModule.SiteCspSettings">
      <summary>
            CSP Settings Reader from Dynamic Entity for the Site
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.ContentSecurityPolicy.CspOfModule.IsEnforced">
      <summary>
            Enforce?
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.ContentSecurityPolicy.CspOfModule.IsEnabled">
      <summary>
            Check if enabled based on various criteria like features, url-param, settings etc.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.ContentSecurityPolicy.CspOfPage.HeaderName(System.Boolean)">
      <summary>
            Name of the CSP header to be added, based on the report-only aspect
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Web.Internal.ContentSecurityPolicy.CspSettingsReader">
      <summary>
            Helper class to read the dynamic settings for the current site or global to be used in CSP
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.ContentSecurityPolicy.CspSettingsReader.#ctor(ToSic.Sxc.Data.Internal.Stack.DynamicStack,ToSic.Eav.Context.IUser,System.Boolean,ToSic.Lib.Logging.ILog)">
      <summary>
            Helper class to read the dynamic settings for the current site or global to be used in CSP
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.ContentSecurityPolicy.CspSettingsReader.SettingsDefault">
      <summary>
            The fallback settings, which will be null if in devMode, because then we shouldn't do a fallback
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.DotNet.HttpAbstractionBase.Current">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.DotNet.HttpAbstractionBase.Request">
      <inheritdoc />
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.DotNet.HttpAbstractionBase.QueryStringParams">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.DotNet.HttpAbstractionBase.QueryStringKeyValuePairs">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.DotNet.HttpNetFramework.#ctor">
      <summary>
            Empty constructor for DI
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Web.Internal.DotNet.IHttp">
      <summary>
            Goal is that anything on this will be able to provide HttpContext operations as needed
            To abstract .net451 and .net core
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.DotNet.IHttp.Current">
      <summary>
            The standardized HttpContext. It's type changes depending on the framework it's running in
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.DotNet.IHttp.Request">
      <summary>
            The standardized" HttpRequest object. It's type changes depending on the framework it's running in.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.DotNet.IHttp.QueryStringParams">
      <summary>
            The standardized QueryString parameters so it works on all platforms
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.DotNet.IHttp.QueryStringKeyValuePairs">
      <summary>
            QueryString params as KeyValue Pairs.
            We don't use a dictionary, because sometimes the same key can occur twice.
            </summary>
      <returns></returns>
    </member>
    <member name="T:ToSic.Sxc.Web.Internal.EditUi.EditUiResources">
      <summary>
            Provide all resources (fonts, icons, etc.) needed for the edit-ui
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Web.Internal.EditUi.EditUiResourceSettings">
      <summary>
            Configuration which icons/fonts are needed by the various edit-UIs
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Web.Internal.HtmlParsing.RegexUtil.SrcKey">
      <summary>
            Used in ScriptSrc and StyleSrc Formulas
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Web.Internal.HybridHtmlStringLog">
      <summary>
            2023-11-14 Can't make this internal, would cause trouble, going public is necessary otherwise IResponsiveImage etc. fail
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.Url.ObjectToUrl.SerializeWithChild(System.Object,System.Object,System.String)">
      <summary></summary>
      <param name="main"></param>
      <param name="child"></param>
      <param name="childPrefix">Prefix to use for the child - it is not the same as the Prefix of the main object! as that applies to all data, not child-data</param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.Url.UrlHelpers.ParseQueryString(System.String)">
      <summary>
            Safer replacement to the HttpUtility.ParseQueryString because that changes umlauts etc. to %u0043 characters which is not very common
            </summary>
      <param name="query"></param>
      <returns></returns>
      <remarks>
            See https://stackoverflow.com/questions/68624/how-to-parse-a-query-string-into-a-namevaluecollection-in-net
            </remarks>
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.Url.UrlHelpers.NvcToString(System.Collections.Specialized.NameValueCollection)">
      <summary>
            Converts a NameValueCollection to string.
            Used in link generations and especially also the <see cref="N:ToSic.Sxc.Web.Parameters" />
            so be very careful if you change anything!
            </summary>
      <param name="nvc"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.Url.UrlHelpers.Merge(System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection,System.Boolean)">
      <summary>
            Import an NVC into another
            </summary>
      <returns></returns>
    </member>
    <member name="T:ToSic.Sxc.Web.Internal.Url.UrlValueCamelCase">
      <summary>
            Helper to process url values - and keep or skip certain properties.
            Note that it is case-insensitive
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Web.Internal.Url.UrlValueFilterNames">
      <summary>
            Helper to process url values - and keep or skip certain properties.
            Note that it is case-insensitive
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.Url.UrlValueFilterNames.#ctor(System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Determine names of properties to preserve in the final parameters
            </summary>
      <param name="defaultSerialize"></param>
      <param name="opposite"></param>
    </member>
    <member name="F:ToSic.Sxc.Web.Internal.Url.UrlValueFilterNames.PropSerializeDefault">
      <summary>
            Determine if not-found properties should be preserved or not - default is preserve, but init can reverse this
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Web.Internal.Url.UrlValuePair">
      <summary>
            Helper class to prepare data for use in a url parameter.
            Especially useful to ensure that the value part is encoded, but not re-encoded.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.Url.UrlValuePair.#ctor(System.String,System.String,System.Boolean)">
      <summary>
            Helper class to prepare data for use in a url parameter.
            Especially useful to ensure that the value part is encoded, but not re-encoded.
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Web.Internal.Url.UrlValueProcess">
      <summary>
            Base class for processing URL Values before keeping / converting to a string-url
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.Url.UrlValueProcess.MakeSafe(ToSic.Sxc.Web.Internal.Url.NameObjectSet)">
      <summary>
            Converts any string value which contains unsafe characters to base64
            Works for SVG icons and similar
            Requires the receiving system (in this case the inpage JS) to handle strings starting with "base64:" differently. 
            </summary>
      <param name="set"></param>
      <returns></returns>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.JsContextEdit.ContentBlockDto.ViewName">
      <summary>
            The view name to show on the layout button, new v17
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.JsContextEdit.ContentBlockDto.AppName">
      <summary>
            The app name to show on the layout button, new v17
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.JsContextEdit.ContentBlockReferenceDto.PublishingMode">
      <summary>
            Info how this item is edited (draft required / optional)
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.JsContextEdit.ContentBlockReferenceDto.Id">
      <summary>
            ID of the reference item
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.JsContextEdit.ContentBlockReferenceDto.ParentGuid">
      <summary>
            GUID of parent
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.JsContextEdit.ContentBlockReferenceDto.ParentField">
      <summary>
            Field it's being referenced in
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.JsContextEdit.ContentBlockReferenceDto.ParentIndex">
      <summary>
            Index / sort-order, where this is in the list of content-blocks
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.JsContextEdit.ContentBlockReferenceDto.PartOfPage">
      <summary>
            If this should be regarded as part of page - relevant for page publishing features
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Web.Internal.JsContext.JsApi">
      <summary>
            This is a special json-structure which will be added to the page head.
            It's necessary for API calls to just-work, since the JS needs to know the API-URLs and more.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.JsContext.JsApi.source">
      <summary>
            Debug information while we're developing the on-module info
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Web.Internal.LightSpeed.AppResetMonitor">
      <summary>
            Experimental way to signal that all the items in an app cache should be flushed
            Idea from here: https://stackoverflow.com/questions/25269338/is-this-a-good-solution-to-clear-a-c-sharp-memorycache
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Web.Internal.LightSpeed.FeaturesResetMonitor">
      <summary>
            Signal that some items in an app cache should be flushed
            Idea from here: https://stackoverflow.com/questions/25269338/is-this-a-good-solution-to-clear-a-c-sharp-memorycache
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.LightSpeed.LightSpeed.IsEnabledOnDependentApps(System.Collections.Generic.List{ToSic.Eav.Apps.State.IAppStateCache})">
      <summary>
            find if caching is enabled on all dependent apps
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.LightSpeed.LightSpeed.AppPaths(System.Collections.Generic.List{ToSic.Eav.Apps.State.IAppStateCache})">
      <summary>
            Get physical paths for parent app and all dependent apps (portal and shared)
            </summary>
      <remarks>
            Note: The App Paths are only the apps in /2sxc (global and per portal)
            ADAM folders are not monitored
            </remarks>
      <returns>list of paths to monitor</returns>
    </member>
    <member name="F:ToSic.Sxc.Web.Internal.LightSpeed.OutputCacheItem.EnforcePre1025">
      <summary>
            This is only used in Dnn - might be solved with generics some time, but ATM this is just simpler
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.PageFeatures.IPageFeature.NameId">
      <summary>
            Primary identifier to activate the feature
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.PageFeatures.IPageFeature.Name">
      <summary>
            Name of this feature. 
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.PageFeatures.IPageFeature.Description">
      <summary>
            Nice description of the feature.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.PageFeatures.IPageFeature.Needs">
      <summary>
            List of other features required to run this feature.
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Web.Internal.PageFeatures.IPageFeatures">
      <summary>
            Part of the <see cref="T:ToSic.Sxc.Services.IPageService" /> to activate features on the page.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.PageFeatures.IPageFeatures.GetFeaturesWithDependentsAndFlush(ToSic.Lib.Logging.ILog)">
      <summary>
            Get a list of all features incl. dependent features for adding to the page
            </summary>
      <param name="log"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.PageFeatures.IPageFeatures.GetWithDependents(System.Collections.Generic.List{System.String},ToSic.Lib.Logging.ILog)">
      <summary>
            Internal helper to expand a set of keys to the features.
            It must be callable separately, because we also need it to expand features which are from another source. 
            </summary>
      <param name="features"></param>
      <param name="log"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.PageFeatures.IPageFeatures.FeaturesFromSettingsAdd(ToSic.Sxc.Web.Internal.PageFeatures.PageFeatureFromSettings)">
      <summary>
            Add a manual feature (having custom HTML)
            </summary>
      <param name="newFeature"></param>
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.PageFeatures.IPageFeatures.FeaturesFromSettingsGetNew(ToSic.Lib.Logging.ILog)">
      <summary>
            Get the manual features which were added - skip those which were previously already added
            </summary>
      <param name="log"></param>
      <returns></returns>
    </member>
    <member name="T:ToSic.Sxc.Web.Internal.PageFeatures.PageFeature">
      <summary>
            A feature describes something that can be enabled on a page. It can be a script, some css, an inline JS or combinations thereof.
            This is just the information which is prepared. It will be in a list of features to activate.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.PageFeatures.PageFeature.#ctor(System.String,System.String,System.String,System.String[],System.String,System.Collections.Generic.List{ToSic.Eav.SysData.Requirement},System.String)">
      <summary>
            A feature describes something that can be enabled on a page. It can be a script, some css, an inline JS or combinations thereof.
            This is just the information which is prepared. It will be in a list of features to activate.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.PageFeatures.PageFeature.NameId">
      <summary>
            Primary identifier to activate the feature
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.PageFeatures.PageFeature.Name">
      <summary>
            Name of this feature. 
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.PageFeatures.PageFeature.Description">
      <summary>
            Nice description of the feature.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.PageFeatures.PageFeature.Needs">
      <summary>
            List of other features required to run this feature.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.PageFeatures.PageFeature.UrlWip">
      <summary>
            Temporary URL for internal features which need to store the URL someplace
            This is not a final solution, in future it should probably
            be more sophisticated, like contain a list of configuration objects to construct the url.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.PageFeatures.PageFeature.ToString">
      <summary>
            ToString for easier debugging
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.PageFeatures.PageFeatures.Activate(System.String[])">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.PageFeatures.PageFeatures.GetWithDependents(System.Collections.Generic.List{System.String},ToSic.Lib.Logging.ILog)">
      <inheritdoc />
    </member>
    <member name="T:ToSic.Sxc.Web.Internal.PageFeatures.PageFeaturesCatalog">
      <summary>
            Important: This is a singleton!
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.PageFeatures.PageFeaturesCatalog.#ctor(ToSic.Lib.Logging.ILogStore)">
      <summary>
             Constructor - ATM we'll just add our known services here.
            
             </summary>
      <remarks>
             Important: if you want to add more services in a DI Startup, it must happen at Configure.
             If you do it earlier, the singleton retrieved then will not be the one at runtime.
             </remarks>
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.PageFeatures.PageFeaturesManager.#ctor(ToSic.Sxc.Web.Internal.PageFeatures.PageFeaturesCatalog)">
      <summary>
            Constructor - ATM we'll just add our known services here. 
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.PageFeatures.PageFeaturesManager.Features">
      <inheritdoc />
    </member>
    <member name="F:ToSic.Sxc.Web.Internal.PageFeatures.SxcPageFeatures.JQuery">
      <summary>
            JQuery feature
            </summary>
      <remarks>
            Published the key 'jQuery' in v12.02, do not change
            </remarks>
    </member>
    <member name="F:ToSic.Sxc.Web.Internal.PageFeatures.SxcPageFeatures.ContextPage">
      <summary>
            Internal feature, not published ATM
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Web.Internal.PageFeatures.SxcPageFeatures.ContextModule">
      <summary>
            Internal feature, not published ATM
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Web.Internal.PageFeatures.SxcPageFeatures.JsCore">
      <summary>
            The core 2sxc JS libraries
            </summary>
      <remarks>
            Published the key '2sxc.JsCore' in v13.00, do not change
            </remarks>
    </member>
    <member name="F:ToSic.Sxc.Web.Internal.PageFeatures.SxcPageFeatures.JsCmsInternal">
      <summary>
            The INTERNAL USE 2sxc JS libraries for cms / edit actions.
            This one doesn't check requirements, and is the one which is added automatically. 
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Web.Internal.PageFeatures.SxcPageFeatures.JsCms">
      <summary>
            The 2sxc JS libraries for cms / edit actions
            </summary>
      <remarks>
            Published the key '2sxc.JsCms' in v13.00, do not change
            </remarks>
    </member>
    <member name="F:ToSic.Sxc.Web.Internal.PageFeatures.SxcPageFeatures.ToolbarsInternal">
      <summary>
            The 2sxc JS libraries for cms / edit actions
            </summary>
      <remarks>
            Published the key '2sxc.Toolbars' in v13.00, do not change
            </remarks>
    </member>
    <member name="F:ToSic.Sxc.Web.Internal.PageFeatures.SxcPageFeatures.Toolbars">
      <summary>
            The 2sxc JS libraries for cms / edit actions
            </summary>
      <remarks>
            Published the key '2sxc.Toolbars' in v13.00, do not change
            </remarks>
    </member>
    <member name="F:ToSic.Sxc.Web.Internal.PageFeatures.SxcPageFeatures.ToolbarsAutoInternal">
      <summary>
            WIP - this will probably be moved to local only in future, ATM it's global though
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Web.Internal.PageFeatures.SxcPageFeatures.ToolbarsAuto">
      <summary>
            WIP - this will probably be moved to local only in future, ATM it's global though
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Web.Internal.PageFeatures.SxcPageFeatures.TurnOn">
      <summary>
            turnOn feature
            </summary>
      <remarks>
            Published the key 'turnOn' in v12.02, do not change
            </remarks>
    </member>
    <member name="F:ToSic.Sxc.Web.Internal.PageFeatures.SxcPageFeatures.CmsWysiwyg">
      <summary>
            turnOn feature
            </summary>
      <remarks>
            Added in v15.01
            </remarks>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.PageService.HeadChange.ReplacementIdentifier">
      <summary>
            This is part of the original property, which would be replaced.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.PageService.Helpers.InjectOriginalInValue(ToSic.Sxc.Web.Internal.PageService.PagePropertyChange,System.String)">
      <summary>
            If new value has placeholder token [original], token will be replaced
            with old value, effectively injecting old value in new value
            </summary>
      <param name="original"></param>
      <param name="originalValue">old value</param>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.PageService.HttpHeader.Reset">
      <summary>
            If set, would flush existing headers
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.PageService.IChangeQueue.GetPropertyChangesAndFlush(ToSic.Lib.Logging.ILog)">
      <summary>
            Once processed clean up, in case the same object (scoped) is used again, and we want to ensure it won't be processed again
            </summary>
      <returns></returns>
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.PageService.IChangeQueue.GetHeadChangesAndFlush(ToSic.Lib.Logging.ILog)">
      <summary>
            Once processed clean up, in case the same object (scoped) is used again, and we want to ensure it won't be processed again
            </summary>
      <returns></returns>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.PageService.IChangeQueue.HttpStatusCode">
      <summary>
            Status code to set (if possible) to the page which loads this block
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.PageService.IChangeQueue.HttpStatusMessage">
      <summary>
            Status message to set (if possible) to the page which loads this block
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Web.Internal.PageService.PageChangeModes.Default">
      <summary>
            Default - similar to Auto
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Web.Internal.PageService.PageChangeModes.Auto">
      <summary>
            Auto - so a change will be applied as best seen fit
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Web.Internal.PageService.PageChangeModes.Replace">
      <summary>
            Replace the original implementation.
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Web.Internal.PageService.PageChangeModes.ReplaceOrSkip">
      <summary>
            Attempt to replace, otherwise don't apply the change.
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Web.Internal.PageService.PageChangeModes.Append">
      <summary>
            Append the change.
            </summary>
    </member>
    <member name="F:ToSic.Sxc.Web.Internal.PageService.PageChangeModes.Prepend">
      <summary>
            Prepend the change. 
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Web.Internal.PageService.PageChangeSummary">
      <summary>
            This should bundle all the page changes once a module is done.
            Usually used at the top-level of render-result, and in future also on page-level dynamic code
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.PageService.PagePropertyChange.#ctor(ToSic.Sxc.Web.Internal.PageService.PagePropertyChange)">
      <summary>
            Clone-Constructor
            </summary>
      <param name="original"></param>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.PageService.PagePropertyChange.ReplacementIdentifier">
      <summary>
            This is part of the original property, which would be replaced.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.PageService.PageService.TestCdn(System.String)">
      <summary>
            Test code to modify the CDN source, not for public use
            </summary>
      <param name="cdnSource"></param>
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.PageService.PageService.Activate(System.String[])">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.PageService.PageService.Activate(ToSic.Lib.Coding.NoParamOrder,System.Boolean,System.String[])">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.PageService.PageService.AddToHead(ToSic.Razor.Blade.IHtmlTag)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.PageService.PageService.AddToHead(System.String)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.PageService.PageService.AddMeta(System.String,System.String)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.PageService.PageService.AddIcon(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.Int32,System.String)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.PageService.PageService.AddIconSet(System.String,ToSic.Lib.Coding.NoParamOrder,System.Object,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Int32})">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.PageService.PageService.AddJsonLd(System.String)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.PageService.PageService.AddJsonLd(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.PageService.PageService.AddOpenGraph(System.String,System.String)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.PageService.PageService.SetTitle(System.String,System.String)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.PageService.PageService.SetDescription(System.String,System.String)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.PageService.PageService.SetKeywords(System.String,System.String)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.PageService.PageService.SetHttpStatus(System.Int32,System.String)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.PageService.PageService.SetBase(System.String)">
      <inheritdoc />
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.PageService.PageService.TurnOn(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Object,System.Object,System.Boolean,System.Nullable{System.Boolean})">
      <inheritdoc />
    </member>
    <member name="T:ToSic.Sxc.Web.Internal.PageService.PageServiceShared">
      <summary>
            This controller should collect what all the <see cref="T:ToSic.Sxc.Services.IPageService" /> objects do, for use on the final page
            It must be scoped, so that it's the same object across the entire page-lifecycle.
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.PageService.PageServiceShared.#ctor(ToSic.Sxc.Web.Internal.PageFeatures.IPageFeatures,ToSic.Sxc.Services.IFeaturesService,ToSic.Sxc.Web.Internal.ContentSecurityPolicy.CspOfModule)">
      <summary>
            This controller should collect what all the <see cref="T:ToSic.Sxc.Services.IPageService" /> objects do, for use on the final page
            It must be scoped, so that it's the same object across the entire page-lifecycle.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.PageService.PageServiceShared.ChangeMode">
      <summary>
            How the changes given to this object should be processed.
            </summary>
    </member>
    <member name="P:ToSic.Sxc.Web.Internal.PageService.PageServiceShared.Assets">
      <summary>
            Assets consolidated from all render-results 
            </summary>
    </member>
    <member name="M:ToSic.Sxc.Web.Internal.PageService.PageServiceShared.Queue(ToSic.Sxc.Web.Internal.PageService.PageProperties,System.String,ToSic.Sxc.Web.Internal.PageService.PageChangeModes,System.String)">
      <summary>
            Add something to the queue for setting a page property
            </summary>
    </member>
    <member name="T:ToSic.Sxc.Web.IPageService">
      <summary>
            Old name for the IPageService, it's in use in some v12 App templates so we must keep it working.
            Will continue to work, but shouldn't be used. Please use <see cref="T:ToSic.Sxc.Services.IPageService" />  instead
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Web.IPageService">ðŸ“– IPageService</a></para></summary>
    </member>
    <member name="M:ToSic.Sxc.Web.Parameters.OriginalParameters.GetOverrideParams(System.Collections.Specialized.NameValueCollection)">
      <summary>
            get url parameters and provide override values to ensure all configuration is 
            preserved in AJAX calls
            </summary>
      <param name="requestParams"></param>
      <returns></returns>
    </member>
    <member name="T:ToSic.Sxc.Web.Parameters.UpperCaseStringKeyValuePair">
      <summary>
            Workaround for deserializing KeyValuePair - it requires lowercase properties (case sensitive), 
            which seems to be a issue in some Newtonsoft.Json versions: http://stackoverflow.com/questions/11266695/json-net-case-insensitive-property-deserialization
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Sxc.Web.Parameters.UpperCaseStringKeyValuePair">ðŸ“– UpperCaseStringKeyValuePair</a></para></summary>
    </member>
    <member name="P:ToSic.SexyContent.Element.Content">
      <summary>
            The DynamicContent object, as dynamic
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.SexyContent.Element.Content">ðŸ“– Content</a></para></summary>
    </member>
    <member name="P:ToSic.SexyContent.Element.Presentation">
      <summary>
            The Presentation object, as dynamic
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.SexyContent.Element.Presentation">ðŸ“– Presentation</a></para></summary>
    </member>
    <member name="P:ToSic.SexyContent.Element.EntityId">
      <summary>
            The EntityID of the ContentGroupItem
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.SexyContent.Element.EntityId">ðŸ“– EntityId</a></para></summary>
    </member>
    <member name="P:ToSic.SexyContent.Element.SortOrder">
      <summary>
            The SortOrder of the ContentGroupItem
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.SexyContent.Element.SortOrder">ðŸ“– SortOrder</a></para></summary>
    </member>
    <member name="P:ToSic.SexyContent.Element.GroupId">
      <summary>
            The ContentGroupID of the ContentGroupItem
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.SexyContent.Element.GroupId">ðŸ“– GroupId</a></para></summary>
    </member>
    <member name="T:ToSic.SexyContent.IAppAndDataHelpers">
      <remarks>
            Deprecation notice: this is an old interface in the "bad" SexyContent namespace.
            We'll probably keep it forever, but don't add any more features. Instead, put it on the new interface
            This will force developers to use the new interface without breaking compatibility
            </remarks>
    </member>
    <member name="M:ToSic.SexyContent.IAppAndDataHelpers.AsDynamic(ToSic.Eav.Data.IEntity)">
      <summary>
            Transform a IEntity to a DynamicEntity as dynamic object
            </summary>
      <param name="entity"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.SexyContent.IAppAndDataHelpers.AsDynamic(System.Object)">
      <summary>
            Makes sure a dynamicEntity could be wrapped in AsDynamic()
            </summary>
      <param name="dynamicEntity"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.SexyContent.IAppAndDataHelpers.AsEntity(System.Object)">
      <summary>
            Transform a DynamicEntity dynamic object back to a IEntity instance
            </summary>
      <param name="dynamicEntity"></param>
      <returns></returns>
    </member>
    <member name="M:ToSic.SexyContent.IAppAndDataHelpers.CreateSource``1(ToSic.Eav.DataSource.IDataStream)">
      <summary>
            Create a source with initial stream to attach...
            </summary>
      <returns></returns>
    </member>
    <member name="T:ToSic.SexyContent.Interfaces.IApp">
      <summary>
            This is the old interface with the "wrong" namespace
            We'll probably need to keep it alive so old code doesn't break
            But this interface shouldn't be enhanced or documented publicly
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.SexyContent.Interfaces.IApp">ðŸ“– IApp</a></para></summary>
    </member>
    <member name="T:ToSic.SexyContent.Interfaces.IDynamicEntity">
      <summary>
            This is the old interface with the "wrong" namespace
            We'll probably need to keep it alive so old code doesn't break
            But this interface shouldn't be enhanced or documented publicly
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.SexyContent.Interfaces.IDynamicEntity">ðŸ“– IDynamicEntity</a></para></summary>
    </member>
    <member name="P:ToSic.SexyContent.Interfaces.IDynamicEntity.Toolbar">
      <summary>
            Deprecated - avoid using. Use Edit.Toolbar(object...) instead
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.SexyContent.Interfaces.IDynamicEntity.Toolbar">ðŸ“– Toolbar</a></para></summary>
    </member>
    <member name="M:ToSic.SexyContent.Interfaces.IDynamicEntity.Render">
      <summary>
            Note: changed to `IRawHtmlString` in 16.02
            </summary>
      <returns></returns>
    </member>
    <member name="T:ToSic.SexyContent.Search.ISearchInfo">
      <remarks>
            This is part of a public API, so don't touch the name or namespace
            </remarks>
    </member>
    <member name="T:ToSic.Eav.Run.IContainer">
      <summary>
            This interface is used in the Dnn RazorComponent of v10, so we must still support it.
            The only use case is in an overridable CustomizeSearch, so it is never really called,
            but just defined by a razor page.
            <para><a href="https://go.2sxc.org/xref17?xref=ToSic.Eav.Run.IContainer">ðŸ“– IContainer</a></para></summary>
    </member>
    <member name="T:ThisApp.Code._Help">
      <summary>
             This class is a placeholder to provide help in the docs.
            
             The namespace <see cref="N:AppCode" /> is reserved for custom code in your app.
             As such, it doesn't have any code in the public docs, but will contain classes and code from your app.
            
             To use, see TODO: Add link to docs
             <para><a href="https://go.2sxc.org/xref17?xref=ThisApp.Code._Help">ðŸ“– _Help</a></para></summary>
    </member>
    <member name="T:ThisApp.Data._Help">
      <summary>
             This class is a placeholder to provide help in the docs.
            
             The namespace <see cref="!:AppCode.Data" /> is reserved for custom code in your app.
             As such, it doesn't have any code in the public docs, but will contain classes and code from your app.
            
             To use, see TODO: Add link to docs
             <para><a href="https://go.2sxc.org/xref17?xref=ThisApp.Data._Help">ðŸ“– _Help</a></para></summary>
    </member>
    <member name="T:AppCode._Help">
      <summary>
             EXPERIMENTAL v17
             
             This class is a placeholder to provide help in the docs.
            
             The namespace <see cref="N:AppCode" /> is reserved for custom code in your app.
             As such, it doesn't have any code in the public docs, but will contain classes and code from your app.
            
             To use, see TODO: Add link to docs
             <para><a href="https://go.2sxc.org/xref17?xref=AppCode._Help">ðŸ“– _Help</a></para></summary>
    </member>
    <member name="T:Custom.DataSource.DataSource16">
      <summary>
            The Base Class for custom Dynamic DataSources in your App.
            <para><a href="https://go.2sxc.org/xref17?xref=Custom.DataSource.DataSource16">ðŸ“– DataSource16</a></para></summary>
    </member>
    <member name="T:Custom.DataSource.DataSource16.MyServices">
      <summary>
            These are dependencies of DataSource15.
            At the moment we could use something else, but this ensures that all users must have this
            in the constructor, so we can be sure we can add more dependencies as we need them.
            <para><a href="https://go.2sxc.org/xref17?xref=Custom.DataSource.DataSource16.MyServices">ðŸ“– MyServices</a></para></summary>
    </member>
    <member name="M:Custom.DataSource.DataSource16.#ctor(Custom.DataSource.DataSource16.MyServices,System.String)">
      <summary>
            Constructor with the option to provide a log name.
            </summary>
      <param name="services">All the needed services - see <a href="https://go.2sxc.org/xref17?xref=NetCode.Conventions.MyServices">NetCode.Conventions.MyServices</a></param>
      <param name="logName">Optional name for logging such as `My.JsonDS`</param>
    </member>
    <member name="P:Custom.DataSource.DataSource16.Log">
      <inheritdoc cref="P:ToSic.Sxc.Code.IHasCodeLog.Log" />
    </member>
    <member name="M:Custom.DataSource.DataSource16.TryGetIn(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Custom.DataSource.DataSource16.TryGetOut(System.String)">
      <inheritdoc />
    </member>
    <member name="T:Custom.Data.CustomItem">
      <summary>
             Base class for custom data objects, which are typed and can be used in Razor Components.
            
             It is used by 2sxc Copilot when generating base classes for custom data objects.
             <para><a href="https://go.2sxc.org/xref17?xref=Custom.Data.CustomItem">ðŸ“– CustomItem</a></para></summary>
      <remarks>
             It's not abstract, even if the most common case is to inherit, as there are cases where you want to use it directly.
             </remarks>
    </member>
    <member name="M:Custom.Data.CustomItem.ToSic#Sxc#Data#ITypedItemWrapper16#Setup(ToSic.Sxc.Data.ITypedItem)">
      <inheritdoc />
    </member>
    <member name="P:Custom.Data.CustomItem.ToSic#Sxc#Data#ITypedItemWrapper16#ForContentType">
      <inheritdoc />
    </member>
    <member name="P:Custom.Data.CustomItem.ToSic#Sxc#Data#Internal#ICanBeItem#Item">
      <summary>
             The actual item which is being wrapped, in rare cases where you must access it.
            
             It's only on the explicit interface, so it is not available from outside or inside, unless you cast to it.
             Goal is that inheriting classes don't access it to keep API surface small.
             <para><a href="https://go.2sxc.org/xref17?xref=Custom.Data.CustomItem.ToSic#Sxc#Data#Internal#ICanBeItem#Item">ðŸ“– ToSic#Sxc#Data#Internal#ICanBeItem#Item</a></para></summary>
    </member>
    <member name="P:Custom.Data.CustomItem.ToSic#Eav#Data#ICanBeEntity#Entity">
      <summary>
             This is necessary so the object can be used in places where an IEntity is expected,
             like toolbars.
            
             It's an explicit interface implementation, so that the object itself doesn't broadcast this.
             <para><a href="https://go.2sxc.org/xref17?xref=Custom.Data.CustomItem.ToSic#Eav#Data#ICanBeEntity#Entity">ðŸ“– ToSic#Eav#Data#ICanBeEntity#Entity</a></para></summary>
    </member>
    <member name="P:Custom.Data.CustomItem._item">
      <summary>
            The item - for inheriting classes to access.
            <para><a href="https://go.2sxc.org/xref17?xref=Custom.Data.CustomItem._item">ðŸ“– _item</a></para></summary>
      <remarks>
            This property is protected, not public, as it should only be used internally.
            It uses an unusual name _item to avoid naming conflicts with properties generated in inheriting classes.
            </remarks>
    </member>
    <member name="M:Custom.Data.CustomItem.ToString">
      <summary>
            Override ToString to give more information about the current object
            </summary>
    </member>
    <member name="M:Custom.Data.CustomItem.ContainsKey(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Custom.Data.CustomItem.Keys(ToSic.Lib.Coding.NoParamOrder,System.Collections.Generic.IEnumerable{System.String})">
      <inheritdoc />
    </member>
    <member name="M:Custom.Data.CustomItem.IsEmpty(System.String,ToSic.Lib.Coding.NoParamOrder)">
      <inheritdoc />
    </member>
    <member name="M:Custom.Data.CustomItem.IsNotEmpty(System.String,ToSic.Lib.Coding.NoParamOrder)">
      <inheritdoc />
    </member>
    <member name="M:Custom.Data.CustomItem.Get(System.String,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean})">
      <inheritdoc />
    </member>
    <member name="M:Custom.Data.CustomItem.Get``1(System.String,ToSic.Lib.Coding.NoParamOrder,``0,System.Nullable{System.Boolean})">
      <inheritdoc />
    </member>
    <member name="M:Custom.Data.CustomItem.Bool(System.String,ToSic.Lib.Coding.NoParamOrder,System.Boolean,System.Nullable{System.Boolean})">
      <inheritdoc />
    </member>
    <member name="M:Custom.Data.CustomItem.DateTime(System.String,ToSic.Lib.Coding.NoParamOrder,System.DateTime,System.Nullable{System.Boolean})">
      <inheritdoc />
    </member>
    <member name="M:Custom.Data.CustomItem.String(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.Nullable{System.Boolean},System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Custom.Data.CustomItem.Int(System.String,ToSic.Lib.Coding.NoParamOrder,System.Int32,System.Nullable{System.Boolean})">
      <inheritdoc />
    </member>
    <member name="M:Custom.Data.CustomItem.Long(System.String,ToSic.Lib.Coding.NoParamOrder,System.Int64,System.Nullable{System.Boolean})">
      <inheritdoc />
    </member>
    <member name="M:Custom.Data.CustomItem.Float(System.String,ToSic.Lib.Coding.NoParamOrder,System.Single,System.Nullable{System.Boolean})">
      <inheritdoc />
    </member>
    <member name="M:Custom.Data.CustomItem.Decimal(System.String,ToSic.Lib.Coding.NoParamOrder,System.Decimal,System.Nullable{System.Boolean})">
      <inheritdoc />
    </member>
    <member name="M:Custom.Data.CustomItem.Double(System.String,ToSic.Lib.Coding.NoParamOrder,System.Double,System.Nullable{System.Boolean})">
      <inheritdoc />
    </member>
    <member name="M:Custom.Data.CustomItem.Url(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.Nullable{System.Boolean})">
      <inheritdoc />
    </member>
    <member name="P:Custom.Data.CustomItem.IsDemoItem">
      <inheritdoc />
    </member>
    <member name="M:Custom.Data.CustomItem.Attribute(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.Nullable{System.Boolean})">
      <inheritdoc />
    </member>
    <member name="M:Custom.Data.CustomItem.Html(System.String,ToSic.Lib.Coding.NoParamOrder,System.Object,System.Nullable{System.Boolean},System.Object,System.Nullable{System.Boolean},System.Boolean,System.Func{ToSic.Sxc.Services.Tweaks.ITweakInput{System.String},ToSic.Sxc.Services.Tweaks.ITweakInput{System.String}})">
      <inheritdoc />
    </member>
    <member name="M:Custom.Data.CustomItem.Picture(System.String,ToSic.Lib.Coding.NoParamOrder,System.Object,System.Object,System.Object,System.String,System.String,System.String,System.Object,System.String,System.Object,System.Object,System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Custom.Data.CustomItem.Img(System.String,ToSic.Lib.Coding.NoParamOrder,System.Object,System.Object,System.Object,System.String,System.String,System.String,System.Object,System.Object,System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Custom.Data.CustomItem.Folder(System.String,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean})">
      <inheritdoc />
    </member>
    <member name="M:Custom.Data.CustomItem.File(System.String,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean})">
      <inheritdoc />
    </member>
    <member name="M:Custom.Data.CustomItem.Child(System.String,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean})">
      <inheritdoc />
    </member>
    <member name="M:Custom.Data.CustomItem.Children(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.Nullable{System.Boolean})">
      <inheritdoc />
    </member>
    <member name="M:Custom.Data.CustomItem.Parent(ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean},System.String,System.String)">
      <inheritdoc />
    </member>
    <member name="M:Custom.Data.CustomItem.Parents(ToSic.Lib.Coding.NoParamOrder,System.String,System.String)">
      <inheritdoc />
    </member>
    <member name="P:Custom.Data.CustomItem.IsPublished">
      <inheritdoc />
    </member>
    <member name="P:Custom.Data.CustomItem.Publishing">
      <inheritdoc />
    </member>
    <member name="P:Custom.Data.CustomItem.ToSic#Sxc#Data#ITypedItem#Dyn">
      <summary>
            Explicit, obsolete `Dyn` implementation, not to be used.
            <para><a href="https://go.2sxc.org/xref17?xref=Custom.Data.CustomItem.ToSic#Sxc#Data#ITypedItem#Dyn">ðŸ“– ToSic#Sxc#Data#ITypedItem#Dyn</a></para></summary>
    </member>
    <member name="P:Custom.Data.CustomItem.Presentation">
      <inheritdoc />
    </member>
    <member name="P:Custom.Data.CustomItem.Metadata">
      <inheritdoc />
    </member>
    <member name="M:Custom.Data.CustomItem.Field(System.String,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean})">
      <inheritdoc />
    </member>
    <member name="P:Custom.Data.CustomItem.Id">
      <inheritdoc />
    </member>
    <member name="P:Custom.Data.CustomItem.Guid">
      <inheritdoc />
    </member>
    <member name="P:Custom.Data.CustomItem.Title">
      <inheritdoc />
    </member>
    <member name="P:Custom.Data.CustomItem.Type">
      <inheritdoc />
    </member>
    <member name="M:Custom.Data.CustomItem.Child``1(System.String,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean})">
      <inheritdoc />
    </member>
    <member name="M:Custom.Data.CustomItem.Children``1(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.Nullable{System.Boolean})">
      <inheritdoc />
    </member>
    <member name="M:Custom.Data.CustomItem.Parent``1(ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean},System.String,System.String)">
      <inheritdoc />
    </member>
    <member name="M:Custom.Data.CustomItem.Parents``1(ToSic.Lib.Coding.NoParamOrder,System.String,System.String)">
      <inheritdoc />
    </member>
    <member name="M:Custom.Data.CustomItem.Gps(System.String,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean})">
      <inheritdoc />
    </member>
    <member name="M:Custom.Data.CustomItem.As``1(ToSic.Sxc.Data.ITypedItem)">
      <summary>
            Convert an Entity or TypedItem into a strongly typed object.
            Typically, the type will be from your `AppCode.Data`.
            </summary>
      <typeparam name="T"></typeparam>
      <param name="item"></param>
      <returns></returns>
      <remarks>
            BETA in v17.03
            </remarks>
    </member>
    <member name="M:Custom.Data.CustomItem.AsList``1(System.Collections.Generic.IEnumerable{ToSic.Sxc.Data.ITypedItem},ToSic.Lib.Coding.NoParamOrder,System.Boolean)">
      <summary>
            Convert a list of Entities or TypedItems into a strongly typed list.
            Typically, the type will be from your `AppCode.Data`.
            </summary>
      <typeparam name="T"></typeparam>
      <param name="source"></param>
      <param name="protector"></param>
      <param name="nullIfNull"></param>
      <returns></returns>
      <remarks>
            BETA in v17.03
            </remarks>
    </member>
    <member name="M:Custom.Data.CustomItem.Equals(System.Object)">
      <summary>
            Ensure that the equality check is done correctly.
            If two objects wrap the same item, they will be considered equal.
            </summary>
    </member>
    <member name="M:Custom.Data.CustomItem.op_Equality(Custom.Data.CustomItem,Custom.Data.CustomItem)">
      <summary>
            Ensure that the equality check is done correctly.
            If two objects wrap the same item, they will be considered equal.
            </summary>
      <param name="item1">first item to compare</param>
      <param name="item2">second item to compare</param>
      <returns>true, if both wrappers are the same type and wrap the same entity</returns>
    </member>
    <member name="M:Custom.Data.CustomItem.op_Inequality(Custom.Data.CustomItem,Custom.Data.CustomItem)">
      <summary>
            Ensure that the equality check is done correctly.
            If two objects wrap the same item, they will be considered equal.
            </summary>
      <param name="item1">first item to compare</param>
      <param name="item2">second item to compare</param>
      <returns>false, if both wrappers are the same type and wrap the same entity</returns>
    </member>
    <member name="T:Custom.Hybrid.Code12">
      <summary>
             This is the base class for custom code (.cs) files in your Apps.
             By inheriting from this base class, you will automatically have the context like the App object etc. available.
            
             &gt; [!TIP]
             &gt; This is an old base class and works, but you should use a newer one such as <see cref="T:Custom.Hybrid.CodeTyped" /><para><a href="https://go.2sxc.org/xref17?xref=Custom.Hybrid.Code12">ðŸ“– Code12</a></para></summary>
    </member>
    <member name="M:Custom.Hybrid.Code12.#ctor">
      <summary>
            Main constructor. May never have parameters, otherwise inheriting code will run into problems. 
            </summary>
    </member>
    <member name="P:Custom.Hybrid.Code12.Log">
      <inheritdoc cref="P:ToSic.Sxc.Code.IHasCodeLog.Log" />
    </member>
    <member name="M:Custom.Hybrid.Code12.GetService``1">
      <inheritdoc cref="M:ToSic.Eav.Code.ICanGetService.GetService``1" />
    </member>
    <member name="P:Custom.Hybrid.Code12.Convert">
      <inheritdoc cref="P:ToSic.Sxc.Code.Internal.IDynamicCode12.Convert" />
    </member>
    <member name="P:Custom.Hybrid.Code12.Resources">
      <inheritdoc cref="P:ToSic.Sxc.Code.Internal.IDynamicCode12.Resources" />
    </member>
    <member name="P:Custom.Hybrid.Code12.Settings">
      <inheritdoc cref="P:ToSic.Sxc.Code.Internal.IDynamicCode12.Settings" />
    </member>
    <member name="P:Custom.Hybrid.Code12.App">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.App" />
    </member>
    <member name="P:Custom.Hybrid.Code12.Data">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.Data" />
    </member>
    <member name="P:Custom.Hybrid.Code12.Content">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.Content" />
    </member>
    <member name="P:Custom.Hybrid.Code12.Header">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.Header" />
    </member>
    <member name="P:Custom.Hybrid.Code12.Link">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.Link" />
    </member>
    <member name="P:Custom.Hybrid.Code12.Edit">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.Edit" />
    </member>
    <member name="P:Custom.Hybrid.Code12.ToSic#Sxc#Code#Internal#IGetCodePath#CreateInstancePath">
      <inheritdoc />
    </member>
    <member name="M:Custom.Hybrid.Code12.CreateInstance(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.String,System.Boolean)">
      <inheritdoc cref="!:IDynamicCode.CreateInstance" />
    </member>
    <member name="P:Custom.Hybrid.Code12.CmsContext">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.CmsContext" />
    </member>
    <member name="M:Custom.Hybrid.Code12.AsDynamic(System.String,System.String)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.AsDynamic(System.String,System.String)" />
    </member>
    <member name="M:Custom.Hybrid.Code12.AsDynamic(ToSic.Eav.Data.IEntity)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.AsDynamic(ToSic.Eav.Data.IEntity)" />
    </member>
    <member name="M:Custom.Hybrid.Code12.AsDynamic(System.Object)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.AsDynamic(System.Object)" />
    </member>
    <member name="M:Custom.Hybrid.Code12.AsDynamic(System.Object[])">
      <inheritdoc cref="M:ToSic.Sxc.Code.Internal.IDynamicCode12.AsDynamic(System.Object[])" />
    </member>
    <member name="M:Custom.Hybrid.Code12.AsEntity(System.Object)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.AsEntity(System.Object)" />
    </member>
    <member name="M:Custom.Hybrid.Code12.AsList(System.Object)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.AsList(System.Object)" />
    </member>
    <member name="M:Custom.Hybrid.Code12.CreateSource``1(ToSic.Eav.DataSource.IDataStream)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.CreateSource``1(ToSic.Eav.DataSource.IDataStream)" />
    </member>
    <member name="M:Custom.Hybrid.Code12.CreateSource``1(ToSic.Eav.DataSource.IDataSource,ToSic.Eav.LookUp.ILookUpEngine)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.CreateSource``1(ToSic.Eav.DataSource.IDataSource,ToSic.Eav.LookUp.ILookUpEngine)" />
    </member>
    <member name="M:Custom.Hybrid.Code12.AsAdam(ToSic.Eav.Data.ICanBeEntity,System.String)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.AsAdam(ToSic.Eav.Data.ICanBeEntity,System.String)" />
    </member>
    <member name="T:Custom.Hybrid.Code14">
      <summary>
            Base class for v14 Dynamic Code files.
            
            Will provide the <see cref="T:ToSic.Sxc.Services.ServiceKit14" /> on property `Kit`.
            This contains all the popular services used in v14, so that your code can be lighter. 
            <para><a href="https://go.2sxc.org/xref17?xref=Custom.Hybrid.Code14">ðŸ“– Code14</a></para></summary>
      <remarks>
            Important: The property `Convert` which exited on Razor12 was removed. use `Kit.Convert` instead.
            </remarks>
    </member>
    <member name="M:Custom.Hybrid.Code14.#ctor">
      <summary>
            Main constructor. May never have parameters, otherwise inheriting code will run into problems. 
            </summary>
    </member>
    <member name="P:Custom.Hybrid.Code14.Log">
      <inheritdoc cref="P:ToSic.Sxc.Code.IHasCodeLog.Log" />
    </member>
    <member name="M:Custom.Hybrid.Code14.GetService``1">
      <inheritdoc cref="M:ToSic.Eav.Code.ICanGetService.GetService``1" />
    </member>
    <member name="P:Custom.Hybrid.Code14.Resources">
      <inheritdoc cref="P:ToSic.Sxc.Code.Internal.IDynamicCode12.Resources" />
    </member>
    <member name="P:Custom.Hybrid.Code14.Settings">
      <inheritdoc cref="P:ToSic.Sxc.Code.Internal.IDynamicCode12.Settings" />
    </member>
    <member name="P:Custom.Hybrid.Code14.App">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.App" />
    </member>
    <member name="P:Custom.Hybrid.Code14.Data">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.Data" />
    </member>
    <member name="P:Custom.Hybrid.Code14.Content">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.Content" />
    </member>
    <member name="P:Custom.Hybrid.Code14.Header">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.Header" />
    </member>
    <member name="P:Custom.Hybrid.Code14.Link">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.Link" />
    </member>
    <member name="P:Custom.Hybrid.Code14.Edit">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.Edit" />
    </member>
    <member name="P:Custom.Hybrid.Code14.ToSic#Sxc#Code#Internal#IGetCodePath#CreateInstancePath">
      <inheritdoc />
    </member>
    <member name="M:Custom.Hybrid.Code14.CreateInstance(System.String,ToSic.Lib.Coding.NoParamOrder,System.String,System.String,System.Boolean)">
      <inheritdoc cref="!:IDynamicCode.CreateInstance" />
    </member>
    <member name="M:Custom.Hybrid.Code14.GetCode(System.String,ToSic.Lib.Coding.NoParamOrder,System.String)">
      <inheritdoc cref="M:ToSic.Sxc.Code.Internal.IDynamicCode16.GetCode(System.String,ToSic.Lib.Coding.NoParamOrder,System.String)" />
    </member>
    <member name="P:Custom.Hybrid.Code14.CmsContext">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.CmsContext" />
    </member>
    <member name="M:Custom.Hybrid.Code14.AsDynamic(System.String,System.String)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.AsDynamic(System.String,System.String)" />
    </member>
    <member name="M:Custom.Hybrid.Code14.AsDynamic(ToSic.Eav.Data.IEntity)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.AsDynamic(ToSic.Eav.Data.IEntity)" />
    </member>
    <member name="M:Custom.Hybrid.Code14.AsDynamic(System.Object)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.AsDynamic(System.Object)" />
    </member>
    <member name="M:Custom.Hybrid.Code14.AsDynamic(System.Object[])">
      <inheritdoc cref="M:ToSic.Sxc.Code.Internal.IDynamicCode12.AsDynamic(System.Object[])" />
    </member>
    <member name="M:Custom.Hybrid.Code14.AsEntity(System.Object)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.AsEntity(System.Object)" />
    </member>
    <member name="M:Custom.Hybrid.Code14.AsList(System.Object)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.AsList(System.Object)" />
    </member>
    <member name="M:Custom.Hybrid.Code14.CreateSource``1(ToSic.Eav.DataSource.IDataStream)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.CreateSource``1(ToSic.Eav.DataSource.IDataStream)" />
    </member>
    <member name="M:Custom.Hybrid.Code14.CreateSource``1(ToSic.Eav.DataSource.IDataSource,ToSic.Eav.LookUp.ILookUpEngine)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.CreateSource``1(ToSic.Eav.DataSource.IDataSource,ToSic.Eav.LookUp.ILookUpEngine)" />
    </member>
    <member name="M:Custom.Hybrid.Code14.AsAdam(ToSic.Eav.Data.ICanBeEntity,System.String)">
      <inheritdoc cref="M:ToSic.Sxc.Code.IDynamicCode.AsAdam(ToSic.Eav.Data.ICanBeEntity,System.String)" />
    </member>
    <member name="T:Custom.Hybrid.CodeTyped">
      <summary>
            Base class for v16 <a href="https://go.2sxc.org/xref17?xref=NetCode.TypedCode.Index">Typed</a> CSharp files.
            Use it to create custom CS code in your App.
            
            It provides the <see cref="T:ToSic.Sxc.Services.ServiceKit16" /> on property `Kit` which contains all the popular services to create amazing stuff.
            <para><a href="https://go.2sxc.org/xref17?xref=Custom.Hybrid.CodeTyped">ðŸ“– CodeTyped</a></para></summary>
      <remarks>
            Important: This is very different from Razor12 or Razor14, as it doesn't rely on `dynamic` code.
            Be aware of this since the APIs are very different - see <a href="https://go.2sxc.org/xref17?xref=NetCode.TypedCode.Index">Typed Code</a>.
            </remarks>
    </member>
    <member name="M:Custom.Hybrid.CodeTyped.#ctor">
      <summary>
            Main constructor.
            Doesn't have parameters so it can easily be inherited.
            </summary>
    </member>
    <member name="P:Custom.Hybrid.CodeTyped.Log">
      <inheritdoc cref="P:ToSic.Sxc.Code.IHasCodeLog.Log" />
    </member>
    <member name="M:Custom.Hybrid.CodeTyped.GetService``1">
      <inheritdoc cref="M:ToSic.Eav.Code.ICanGetService.GetService``1" />
    </member>
    <member name="P:Custom.Hybrid.CodeTyped.Kit">
      <inheritdoc cref="!:IDynamicCode16.Kit" />
    </member>
    <member name="P:Custom.Hybrid.CodeTyped.Link">
      <inheritdoc cref="P:ToSic.Sxc.Code.IDynamicCode.Link" />
    </member>
    <member name="P:Custom.Hybrid.CodeTyped.ToSic#Sxc#Code#Internal#IGetCodePath#CreateInstancePath">
      <inheritdoc />
    </member>
    <member name="M:Custom.Hybrid.CodeTyped.GetCode(System.String,ToSic.Lib.Coding.NoParamOrder,System.String)">
      <inheritdoc cref="M:ToSic.Sxc.Code.Internal.IDynamicCode16.GetCode(System.String,ToSic.Lib.Coding.NoParamOrder,System.String)" />
    </member>
    <member name="P:Custom.Hybrid.CodeTyped.App">
      <inheritdoc />
    </member>
    <member name="P:Custom.Hybrid.CodeTyped.AllResources">
      <inheritdoc cref="P:ToSic.Sxc.Code.Internal.IDynamicCode16.AllResources" />
    </member>
    <member name="P:Custom.Hybrid.CodeTyped.AllSettings">
      <inheritdoc cref="P:ToSic.Sxc.Code.Internal.IDynamicCode16.AllSettings" />
    </member>
    <member name="M:Custom.Hybrid.CodeTyped.AsItem(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
      <inheritdoc cref="M:ToSic.Sxc.Code.Internal.IDynamicCode16.AsItem(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean},System.Nullable{System.Boolean})" />
    </member>
    <member name="M:Custom.Hybrid.CodeTyped.AsItems(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean})">
      <inheritdoc cref="M:ToSic.Sxc.Code.Internal.IDynamicCode16.AsItems(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean})" />
    </member>
    <member name="M:Custom.Hybrid.CodeTyped.AsEntity(ToSic.Eav.Data.ICanBeEntity)">
      <inheritdoc cref="M:ToSic.Sxc.Code.Internal.IDynamicCode16.AsEntity(ToSic.Eav.Data.ICanBeEntity)" />
    </member>
    <member name="M:Custom.Hybrid.CodeTyped.AsTyped(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean})">
      <inheritdoc cref="M:ToSic.Sxc.Code.Internal.IDynamicCode16.AsTyped(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean})" />
    </member>
    <member name="M:Custom.Hybrid.CodeTyped.AsTypedList(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean})">
      <inheritdoc cref="M:ToSic.Sxc.Code.Internal.IDynamicCode16.AsTypedList(System.Object,ToSic.Lib.Coding.NoParamOrder,System.Nullable{System.Boolean})" />
    </member>
    <member name="M:Custom.Hybrid.CodeTyped.AsStack(System.Object[])">
      <inheritdoc cref="M:ToSic.Sxc.Code.Internal.IDynamicCode16.AsStack(System.Object[])" />
    </member>
    <member name="P:Custom.Hybrid.CodeTyped.MyContext">
      <inheritdoc cref="P:ToSic.Sxc.Code.Internal.IDynamicCode16.MyContext" />
    </member>
    <member name="P:Custom.Hybrid.CodeTyped.MyPage">
      <inheritdoc cref="P:ToSic.Sxc.Code.Internal.IDynamicCode16.MyPage" />
    </member>
    <member name="P:Custom.Hybrid.CodeTyped.MyUser">
      <inheritdoc cref="P:ToSic.Sxc.Code.Internal.IDynamicCode16.MyUser" />
    </member>
    <member name="P:Custom.Hybrid.CodeTyped.MyView">
      <inheritdoc cref="P:ToSic.Sxc.Code.Internal.IDynamicCode16.MyView" />
    </member>
    <member name="P:Custom.Hybrid.CodeTyped.UniqueKey">
      <inheritdoc cref="P:ToSic.Sxc.Code.Internal.IDynamicCode16.UniqueKey" />
    </member>
    <member name="M:Custom.Hybrid.CodeTyped.As``1(ToSic.Eav.Data.ICanBeEntity,ToSic.Lib.Coding.NoParamOrder,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Custom.Hybrid.CodeTyped.AsList``1(System.Collections.Generic.IEnumerable{ToSic.Eav.Data.ICanBeEntity},ToSic.Lib.Coding.NoParamOrder,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="P:Custom.Hybrid.CodeTyped.Customize">
      <summary>
            WIP
            <para><a href="https://go.2sxc.org/xref17?xref=Custom.Hybrid.CodeTyped.Customize">ðŸ“– Customize</a></para></summary>
    </member>
  </members>
</doc>