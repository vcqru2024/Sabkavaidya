<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="plTemplate.Text" xml:space="preserve">
    <value>Template </value>
  </data>
  <data name="plTemplate.Help" xml:space="preserve">
    <value>Seller template locates under desktopmodules/crossclassified/product/template/author, you can customize your own.</value>
  </data>
  <data name="ControlTitle_edit.Text" xml:space="preserve">
    <value>Product seller list settings</value>
  </data>
  <data name="plProductListPage.Text" xml:space="preserve">
    <value>Cp_Product_List Sub Module Page</value>
  </data>
  <data name="plProductListPage.Help" xml:space="preserve">
    <value>Select when click seller item, which page will display related products. That page should have a Cp_Product_List module instance on it. If you don't specify, module will use the default list tab specified for selected product department</value>
  </data>
  <data name="plLinkTarget.Help" xml:space="preserve">
    <value>Choose how to open target window when click seller item.</value>
  </data>
  <data name="plLinkTarget.Text" xml:space="preserve">
    <value>Link Target</value>
  </data>
  <data name="plDisplayRss.Help" xml:space="preserve">
    <value>Check to display RSS link next to author.</value>
  </data>
  <data name="plDisplayRss.Text" xml:space="preserve">
    <value>Display RSS</value>
  </data>
  <data name="li_SortFiled_ProductCounts.Text" xml:space="preserve">
    <value>Product Counts</value>
  </data>
  <data name="li_SortFiled_AuthorName.Text" xml:space="preserve">
    <value>Author Name</value>
  </data>
  <data name="plDisplayProductCounts.Help" xml:space="preserve">
    <value>Check to display product counts next to author name.</value>
  </data>
  <data name="plDisplayProductCounts.Text" xml:space="preserve">
    <value>Display Product Counts</value>
  </data>
  <data name="plSortFiled.Help" xml:space="preserve">
    <value>Choose how to sort seller list</value>
  </data>
  <data name="plSortFiled.Text" xml:space="preserve">
    <value>Sort Filed</value>
  </data>
  <data name="plColCount.Help" xml:space="preserve">
    <value>Enter how many tag items will be display in the same row.</value>
  </data>
  <data name="plColCount.Text" xml:space="preserve">
    <value>Items Per Row</value>
  </data>
  <data name="plDisplayAvatar.Help" xml:space="preserve">
    <value>Display seller avatar in list.</value>
  </data>
  <data name="plDisplayAvatar.Text" xml:space="preserve">
    <value>Display Avatar</value>
  </data>
  <data name="plType.Help" xml:space="preserve">
    <value>Select product department which seller belongs.</value>
  </data>
  <data name="plType.Text" xml:space="preserve">
    <value>Select Department</value>
  </data>
  <data name="plShowLocation_City.Help" xml:space="preserve">
    <value>Show City</value>
  </data>
  <data name="plShowLocation_City.Text" xml:space="preserve">
    <value>Show City</value>
  </data>
  <data name="plShowLocation_Country.Help" xml:space="preserve">
    <value>Show Country</value>
  </data>
  <data name="plShowLocation_Country.Text" xml:space="preserve">
    <value>Show Country</value>
  </data>
  <data name="plShowLocation_State.Help" xml:space="preserve">
    <value>Show State/Province</value>
  </data>
  <data name="plShowLocation_State.Text" xml:space="preserve">
    <value>Show State/Province</value>
  </data>
  <data name="plShowLocation_Town.Help" xml:space="preserve">
    <value>Show Town</value>
  </data>
  <data name="plShowLocation_Town.Text" xml:space="preserve">
    <value>Show Town</value>
  </data>
  <data name="plShowVendorCompany.Help" xml:space="preserve">
    <value>Check to show seller company (which is specified in "Cp_Admin sub module - Seller Center - My Profile").</value>
  </data>
  <data name="plShowVendorCompany.Text" xml:space="preserve">
    <value>Show Seller Company</value>
  </data>
  <data name="Tip_VendorInfor.Text" xml:space="preserve">
    <value>Seller profile (company, country, state/province, city, town.. etc) can be modified at "Cp_Admin sub module - Seller Center - My Profile".</value>
  </data>
  <data name="secAbout.Text" xml:space="preserve">
    <value>About Cp_Product_Vendor sub module</value>
  </data>
  <data name="secGeneral.Text" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="Tip_About.Text" xml:space="preserve">
    <value>Classified Pro is an enterprise-class DNN module which helps you to create an online store, auction website and also publish classified ads. It contains 16 sub modules and 1 skin object. 
It is multi-user based, you can allow other users to post products on your site at "Cp_Admin sub module - Admin control panel - Configurations - Seller Roles".&lt;br/&gt;&lt;br/&gt;

Cp_Product_Vendor is one of these 16 sub modules, it is used to show seller (user who posts products on your site) links. When click a seller link, module will navigate to Cp_Product_List sub module page and show products (listings) which are created by this user. This sub module is useful if you have multiple users posting products on your site. &lt;br/&gt;&lt;br/&gt;

You can add multiple instances of Cp_Product_Vendor sub module to different pages (or on same page). It is template based, you can customize your desired display effect by create different templates.&lt;br/&gt;&lt;br/&gt;
If current site enables content localization, Cp_Product_Vendor sub module will generate link according to page culture. For example, if current page culture is "en-US (English)", it will navigate to English page of Cp_Product_List sub module; if current page culture is "zh-CN (Simple Chinese)", it will navigate to Simple Chinese page of Cp_Product_List sub module; if page culture is neutral, it will navigate according to current context culture.</value>
  </data>
  <data name="li_VendorLinkTarget_List.Text" xml:space="preserve">
    <value>Cp_Product_List Sub Module</value>
  </data>
  <data name="li_VendorLinkTarget_VendorProfile.Text" xml:space="preserve">
    <value>Cp_Product_VendorProfile Sub Module</value>
  </data>
  <data name="plVendorLinkTarget.Help" xml:space="preserve">
    <value>Choose Vendor/Seller Target (Cp_Product_List sub module or Cp_Product_VendorProfile sub module)</value>
  </data>
  <data name="plVendorLinkTarget.Text" xml:space="preserve">
    <value>Vendor/Seller Target</value>
  </data>
  <data name="plVendorProfilePage.Help" xml:space="preserve">
    <value>If you specify the "Vendor/Seller Target" as  "Cp_Product_VendorProfile sub module", choose its page.</value>
  </data>
  <data name="plVendorProfilePage.Text" xml:space="preserve">
    <value>Cp_Product_VendorProfile Sub Module Page</value>
  </data>
  <data name="Tip_VendorLinkTarget.Text" xml:space="preserve">
    <value>When click a vendor/seller item, Classified Pro can navigate to Cp_Product_List sub module to show his products, or can navigate to Cp_Product_VendorProfile sub module to show both vendor profile and his products.</value>
  </data>
  <data name="Tip_VendorProfilePage.Text" xml:space="preserve">
    <value>If you specify the "Vendor/Seller Target" as  "Cp_Product_VendorProfile sub module", choose its page. That page should have a Cp_Product_VendorProfile sub module instance on it. If you don't specify, module will use the default vendor profile page for selected department (which is specified at "Cp_Admin sub module - Admin Control Panel - Departments") to display.</value>
  </data>
</root>