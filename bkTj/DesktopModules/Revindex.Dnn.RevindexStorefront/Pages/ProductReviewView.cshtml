@using System.Collections.Specialized;
@using DotNetNuke.Entities.Users;
@using DotNetNuke.Services.Localization; 
@using Revindex.Business.Revindex.Revindex.Storefront;
@using Revindex.Data.Dnn;
@using Revindex.Dnn.RevindexStorefront.Pages;
@using Revindex.Web.Mvc.Dnn.Helpers;
@inherits Revindex.Web.Mvc.Dnn.RazorPages.DotNetNukeRazorPage<ProductReviewViewModel>

<div class="rvd-module-container rvdsf-productreview-container">
	@if (!String.IsNullOrEmpty((string)Model.TempData.Peek(Global.TempDataKeys.Alert)) && !Model.IsRedirecting)
	{
		<div class="alert alert-@(Model.TempData[Global.TempDataKeys.Alert]) rvd-alert-important">@Model.TempData[Global.TempDataKeys.Message]</div>
	}
	@if (Model.ListView)
	{
		if (!Model.ProductID.HasValue)
		{
			<h2>@Html.LocalizeString("ProductReviewsHeader")</h2>
		}
		<div class="rvdsfListContainer">
			<div class="row rvdsf-actionbar-container">
				<div class="col-sm-6">
					@if (Model.ProductID.HasValue)
					{
						<a class="btn btn-link rvdExportAction" href="@Global.RouteUrl(new NameValueCollection() {
																{ Global.QueryStringKeys.PageTarget, "Catalog-CatalogExportControl" },
																{ Global.QueryStringKeys.EntityType, "ProductReview" },
																{ Global.QueryStringKeys.ProductID, Model.ProductID.Value.ToString() },
																{ Global.QueryStringKeys.ReturnUrl, Request.RawUrl }
														})"><em class="glyphicon glyphicon-export fa fas fa-upload"></em> @Html.LocalizeString("ExportViewLink")</a>
					}
					<a class="btn btn-link rvdExportAction" href="@Global.RouteUrl(new NameValueCollection() {
																{ Global.QueryStringKeys.PageTarget, "Catalog-CatalogExportControl" },
																{ Global.QueryStringKeys.EntityType, "ProductReview" },
																{ Global.QueryStringKeys.ReturnUrl, Request.RawUrl }
														})"><em class="glyphicon glyphicon-export fa fas fa-upload"></em> @Html.LocalizeString("ExportAllLink")</a>
					@if (Model.ModuleSecurity.CanEditControl)
					{
						<a class="btn btn-link rvdImportAction" href="@Global.RouteUrl(new NameValueCollection() {
																{ Global.QueryStringKeys.PageTarget, "Catalog-CatalogImportControl" },
																{ Global.QueryStringKeys.EntityType, "ProductReview" },
																{ Global.QueryStringKeys.ReturnUrl, Request.RawUrl }
														})"><em class="glyphicon glyphicon-import fa fas fa-download"></em> @Html.LocalizeString("ImportLink")</a>
					}
				</div>
				<div class="col-sm-6 text-sm-right">
					@if (Model.ModuleSecurity.CanEditControl)
					{
							<a class="btn btn-primary rvdAddNewAction" href="@Global.RouteUrl(new NameValueCollection() {
																{ Global.QueryStringKeys.PageTarget, "Catalog-Pages.ProductReviewView" },
																{ Global.QueryStringKeys.ProductID, Model.ProductID.HasValue ? Model.ProductID.ToString() : "0" },
																{ Global.QueryStringKeys.ProductReviewID, "0" },
																{ Global.QueryStringKeys.ReturnUrl, Request.RawUrl } })">@Html.LocalizeString("AddLink")</a>
					}
				</div>
            </div>
			<table class="table table-striped table-hover" style="border-collapse:collapse;">
				<tbody>
					<tr>
						<th style="width: 15%">
							<a href="@Global.RouteUrl(new NameValueCollection() {
													{ Global.QueryStringKeys.PageTarget, Request.QueryString[Global.QueryStringKeys.PageTarget] },
													{ Global.QueryStringKeys.ProductReviewPageViewIndex, "1" },
													{ Global.QueryStringKeys.ProductReviewSortDirection, Request.QueryString[Global.QueryStringKeys.ProductReviewSortDirection] == "0" ? "1" : "0" },
													{ Global.QueryStringKeys.ProductReviewSortExpression, "createdate" }}, Request.QueryString)">@Html.LocalizeString("DateHeader")</a>
						</th>
						<th style="width: 15%">
							<a href="@Global.RouteUrl(new NameValueCollection() {
													{ Global.QueryStringKeys.PageTarget, Request.QueryString[Global.QueryStringKeys.PageTarget] },
													{ Global.QueryStringKeys.ProductReviewPageViewIndex, "1" },
													{ Global.QueryStringKeys.ProductReviewSortDirection, Request.QueryString[Global.QueryStringKeys.ProductReviewSortDirection] == "0" ? "1" : "0" },
													{ Global.QueryStringKeys.ProductReviewSortExpression, "overallrating" }}, Request.QueryString)">@Html.LocalizeString("RatingHeader")</a>
						</th>
						<th style="width: 15%">@Html.LocalizeString("UserHeader")</th>
						<th>@Html.LocalizeString("ReviewHeader")</th>
						<th style="width: 10%">
							<a href="@Global.RouteUrl(new NameValueCollection() {
													{ Global.QueryStringKeys.PageTarget, Request.QueryString[Global.QueryStringKeys.PageTarget] },
													{ Global.QueryStringKeys.ProductReviewPageViewIndex, "1" },
													{ Global.QueryStringKeys.ProductReviewSortDirection, Request.QueryString[Global.QueryStringKeys.ProductReviewSortDirection] == "0" ? "1" : "0" },
													{ Global.QueryStringKeys.ProductReviewSortExpression, "approved" }}, Request.QueryString)">@Html.LocalizeString("ApprovedHeader")</a>
						</th>
						<th style="width: 5%"></th>
					</tr>
					@foreach (var pr in Model.PagedProductReviews)
					{
				<tr onclick="location.href = '@Global.RouteUrl(new NameValueCollection() {
													{ Global.QueryStringKeys.PageTarget, "Catalog-Pages.ProductReviewView" },
													{ Global.QueryStringKeys.ProductReviewID, pr.ProductReviewID.ToString() },
													{ Global.QueryStringKeys.ProductID, pr.ProductID.ToString() },
													{ Global.QueryStringKeys.ReturnUrl, Request.RawUrl }}, false)'">
					<td>
						<a href="@Global.RouteUrl(new NameValueCollection() {
													{ Global.QueryStringKeys.PageTarget, "Catalog-Pages.ProductReviewView" },
													{ Global.QueryStringKeys.ProductReviewID, pr.ProductReviewID.ToString() },
													{ Global.QueryStringKeys.ProductID, pr.ProductID.ToString() },
													{ Global.QueryStringKeys.ReturnUrl, Request.RawUrl }}, false)" onclick="event.stopPropagation()">@TimeZoneInfo.ConvertTimeFromUtc(pr.CreateDate, Dnn.Portal.TimeZone).ToString("yyyy-MM-dd")</a>
												</td>
												<td><input type="hidden" class="rating" value="@pr.OverallRating.ToString(System.Globalization.CultureInfo.InvariantCulture)" readonly /></td>
												<td>@(pr.UserID.HasValue ? new UserController().GetUser(Dnn.Portal.PortalId, pr.UserID.Value).DisplayName : "")</td>
												<td>
													<strong>@ContentLocale.GetValue(pr.Title)</strong>
													@{
														var comment = ContentLocale.GetValue(pr.Comment);
														if (!String.IsNullOrEmpty(comment))
														{
															if (comment.Length > 100)
															{
																comment = comment.Substring(0, 100) + "...";
															}
															<p><small>@comment</small></p>
														}
													}
												</td>
												<td><input id="@("ProductReviewCheckBox_" + pr.ProductReviewID)" type="checkbox" @(pr.Approved ? "checked" : "") onclick="event.stopPropagation(); Revindex.Web.FormPost(this, 'Approve', false, { productReviewID : @pr.ProductReviewID, approved: this.checked })" /></td>
												<td>
													@if (Model.ModuleSecurity.CanEditControl)
													{
														<a href="#" onclick="event.stopPropagation(); if (confirm('@Html.LocalizeString(Global.LocalizedStrings.Message_ConfirmDelete, Global.FilePaths.LocalSharedResourceFile)')) { Revindex.Web.FormPost(this, 'Delete', false, { productReviewID: @pr.ProductReviewID }) }"><em class="glyphicon glyphicon-remove fa fas fa-trash"></em></a>
													}
												</td>
											</tr>
					}
					<tr class="dnnGridPager">
						<td colspan="7">
							<table>
								<tr>
									<td>
										@for (int i = 1; i <= Model.PageViewCount; i++)
										{
											if (i == Model.PageViewIndex)
											{
												<span>@i</span>
											}
											else
											{
												var indexString = i.ToString();
												int minRange = 1 + ((int)((Model.PageViewIndex - 1) / 10) * 10);
												int maxRange = minRange + 9;

												if (i == minRange - 1 || i == maxRange + 1)
												{
													indexString = "...";
												}
												else if (i < minRange || i > maxRange)
												{
													continue;
												}

												<a href="@Global.RouteUrl(new NameValueCollection() {
													{ Global.QueryStringKeys.PageTarget, Request.QueryString[Global.QueryStringKeys.PageTarget] },
													{ Global.QueryStringKeys.ProductReviewPageViewIndex, i.ToString() },
													{ Global.QueryStringKeys.ProductReviewSortDirection, Request.QueryString[Global.QueryStringKeys.ProductReviewSortDirection] },
													{ Global.QueryStringKeys.ProductReviewSortExpression, Request.QueryString[Global.QueryStringKeys.ProductReviewSortExpression] }}, Request.QueryString)">@indexString</a>
												}
											}
									</td>
								</tr>
							</table>
						</td>
					</tr>
				</tbody>
			</table>
		</div>
	}
	else
	{
		<div class="rvd-form">
			@Html.Partial("Shared/BackView", Model.BackView)
			<h2>@Html.LocalizeString("ProductReviewHeader"): @Html.Partial("Shared/BreadcrumbView", Model.BreadcrumbView)<span class="badge badge-secondary rvdsf-badge-small">@Model.ProductReviewID</span></h2>
			<hr />
			<div>
				<fieldset>
					<div class="dnnFormItem">
						<div class="dnnLabel">
							<label>
								<span class="dnnFormRequired">@Html.LocalizeString("ProductLabel")</span>
							</label>
						</div>
						<input id="rvdsfProductProductReviewComboBox" name="ProductIDProductReviewField" @(Model.ProductID == 0 ? "" : "readonly") value="@Model.ProductIDProductReviewField" data-val="true" data-val-required="@Html.LocalizeString(Global.LocalizedStrings.Message_FieldRequiredError, Global.FilePaths.LocalSharedResourceFile)" />
						<span data-valmsg-for="ProductIDProductReviewField" data-valmsg-replace="true"></span>
						<input type="hidden" name="ProductNameProductReviewField" value="@Model.ProductNameProductReviewField" />
						@if (Model.ProductIDProductReviewField.HasValue)
						{
							<a href="@Global.RouteUrl(new NameValueCollection() {
																{ Global.QueryStringKeys.PageTarget, "Catalog-ProductControl" },
																{ Global.QueryStringKeys.ProductID, Model.ProductIDProductReviewField.ToString() },
																{ Global.QueryStringKeys.ReturnUrl, Request.RawUrl }
														})" style="display: inline-block"><em class="glyphicon glyphicon-edit fa fas fa-edit"></em> @Html.LocalizeString("EditLink")</a>
						}
					</div>
					<div class="dnnFormItem">
						<div class="dnnLabel">
							<label>
								<span class="dnnFormRequired">@Html.LocalizeString("DateLabel")</span>
							</label>
						</div>
						<input id="DateProductReviewTextBox"  name="DateProductReviewField" type="text" autocomplete="off" value="@Model.DateProductReviewField.ToString("yyyy-MM-dd HH:mm")" placeholder="YYYY-MM-DD HH:mm" data-role="datetimepicker" data-format="yyyy-MM-dd HH:mm" data-val="true" data-val-required="@Html.LocalizeString(Global.LocalizedStrings.Message_FieldRequiredError, Global.FilePaths.LocalSharedResourceFile)"/>
						<span data-valmsg-for="DateProductReviewField" data-valmsg-replace="true"></span>
					</div>
					<div class="dnnFormItem">
						<div class="dnnLabel">
							<label>
								<span>@Html.LocalizeString("UserHostAddressLabel")</span>
							</label>
						</div>
						<span>@Model.UserHostAddressProductReviewField</span>
					</div>
					<div class="dnnFormItem">
						<div class="dnnLabel">
							<label>
								<span>@Html.LocalizeString("ApprovedLabel")</span>
							</label>
						</div>
						<input class="dnnFormItem" id="ApprovedProductReviewCheckBox" name="ApprovedProductReviewField" type="checkbox" @(Model.ApprovedProductReviewField ? "checked" : "") value="true" />
						<span>&nbsp;</span>
					</div>
					<div class="dnnFormItem">
						<div class="dnnLabel">
							<label>
								<span>@Html.LocalizeString("OverallRatingLabel")</span>
							</label>
						</div>
						<input type="hidden" id="OverallRatingProductReviewRating" name="OverallRatingProductReviewField" class="rating" value="@Model.OverallRatingProductReviewField.ToString(System.Globalization.CultureInfo.InvariantCulture)" />
					</div>
					@if (StorefrontContext.Current.Configuration.MachineActive)
					{
						<div class="dnnFormItem">
							<div class="dnnLabel">
								<label>
									<span></span>
								</label>
							</div>
							<a id="rvdsfGenerateContent" class="btn btn-link" onclick="Revindex.Web.FormPost(this, 'GenerateContent', false)"><em class="glyphicon glyphicon-education fa fas fa-graduation-cap"></em> @Html.LocalizeString("GenerateContentLink")</a>
						</div>
					}
					<div class="dnnFormItem">
						<div class="dnnLabel">
							<label>
								<span class="dnnFormRequired">@Html.LocalizeString("TitleLabel")</span>
							</label>
						</div>
						<input id="TitleProductReviewTextBox" name="TitleProductReviewField" type="text" value="@Model.TitleProductReviewField" data-val="true" data-val-required="@Html.LocalizeString(Global.LocalizedStrings.Message_FieldRequiredError, Global.FilePaths.LocalSharedResourceFile)" />
						<span data-valmsg-for="TitleProductReviewField" data-valmsg-replace="true"></span>
					</div>
					<div class="dnnFormItem">
						<div class="dnnLabel">
							<label>
								<span>@Html.LocalizeString("CommentLabel")</span>
							</label>
						</div>
						<textarea id="CommentProductReviewTextBox" name="CommentProductReviewField" rows="8" cols="21">@Model.CommentProductReviewField</textarea>
					</div>
					<div class="dnnFormItem">
						<div class="dnnLabel">
							<label>
								<span>@Html.LocalizeString("UserTypeLabel")</span>
							</label>
						</div>
						<div class="dnnFormRadioButtons">
							<div class="radio form-check">
								<label>
									<input id="UserTypeProductReviewRadioButton" type="radio" name="UserTypeProductReviewField" value="Registered" @(Model.UserTypeProductReviewField == "Registered" ? "checked" : "") onclick="Revindex.Web.FormPost(this, null, false)">
									@Html.LocalizeString("RegisteredUserLabel")
								</label>
							</div>
							<div class="radio form-check">
								<label>
									<input id="UserTypeProductReviewRadioButton" type="radio" name="UserTypeProductReviewField" value="Anonymous" @(Model.UserTypeProductReviewField == "Anonymous" ? "checked" : "") onclick="Revindex.Web.FormPost(this, null, false)">
									@Html.LocalizeString("AnonymousUserLabel")
								</label>
							</div>
						</div>
						@if (Model.UserTypeProductReviewField == "Registered")
						{
							<input type="hidden" name="EmailProductReviewField" value="@Model.EmailProductReviewField" />
							<input type="hidden" name="FirstNameProductReviewField" value="@Model.FirstNameProductReviewField" />
							<input type="hidden" name="LastNameProductReviewField" value="@Model.LastNameProductReviewField" />
							<div class="dnnFormItem">
								<div class="dnnLabel">
									<label>
										<span class="dnnFormRequired">@Html.LocalizeString("UserLabel")</span>
									</label>
								</div>
								<input id="UsernameProductReviewTextBox" name="UsernameProductReviewField" type="text" value="@Model.UsernameProductReviewField" data-val="true" data-val-required="@Html.LocalizeString(Global.LocalizedStrings.Message_FieldRequiredError, Global.FilePaths.LocalSharedResourceFile)" />
								<span data-valmsg-for="UsernameProductReviewField" data-valmsg-replace="true"></span>
							</div>
						}
						else
						{
							<input id="UsernameProductReviewHiddenField" type="hidden" name="UsernameProductReviewField" value="@Model.UsernameProductReviewField" />
							<div class="dnnFormItem">
								<div class="dnnLabel">
									<label>
										<span>@Html.LocalizeString("EmailLabel")</span>
									</label>
								</div>
								<input id="EmailProductReviewTextBox" name="EmailProductReviewField" type="text" value="@Model.EmailProductReviewField" data-val="true" data-val-email="@Html.LocalizeString(Global.LocalizedStrings.Message_FieldRequiredError, Global.FilePaths.LocalSharedResourceFile)" />
								<span data-valmsg-for="EmailProductReviewField" data-valmsg-replace="true"></span>
							</div>
							<div class="dnnFormItem">
								<div class="dnnLabel">
									<label>
										<span>@Html.LocalizeString("FirstNameLabel")</span>
									</label>
								</div>
								<input id="FirstNameProductReviewTextBox" name="FirstNameProductReviewField" type="text" value="@Model.FirstNameProductReviewField" />
							</div>
							<div class="dnnFormItem">
								<div class="dnnLabel">
									<label>
										<span>@Html.LocalizeString("LastNameLabel")</span>
									</label>
								</div>
								<input id="LastNameProductReviewTextBox" name="LastNameProductReviewField" type="text" value="@Model.LastNameProductReviewField" />
							</div>
						}
					</div>
				</fieldset>
			</div>
			<div class="row rvdsf-footerbar-container">
				<div class="col-sm-6">
					@if (Model.ModuleSecurity.CanEditControl && Model.ProductReviewID > 0)
					{
						<button id="DeleteProductReviewButton" type="button" onclick="if (confirm('@Html.LocalizeString(Global.LocalizedStrings.Message_ConfirmDelete, Global.FilePaths.LocalSharedResourceFile)')) { Revindex.Web.FormPost(this, 'Delete', false, { productReviewID: @Model.ProductReviewID }) }" class="btn btn-default btn-light">@Html.LocalizeString("DeleteLink")</button>
					}
				</div>
				<div class="col-sm-6 text-sm-right">
					@if (!String.IsNullOrEmpty(Request.QueryString[Global.QueryStringKeys.ReturnUrl]))
					{
						<a href="@Request.QueryString[Global.QueryStringKeys.ReturnUrl]" class="btn btn-default btn-light">@Html.LocalizeString("CancelLink")</a>
					}
					@if (Model.ModuleSecurity.CanEditControl)
					{
						<button id="SaveProductReviewButton" type="button" onclick="Revindex.Web.FormPost(this, 'Save', true)" class="btn btn-primary rvdSaveAction">@Html.LocalizeString("SaveLink")</button>
						<button id="SaveReturnProductReviewButton" type="button" onclick="Revindex.Web.FormPost(this, 'Save', true, { Return: true })" class="btn btn-primary rvdSaveAction">@Html.LocalizeString("SaveAndBackLink")</button>
					}
				</div>
			</div>
		</div>
		
		<input type="hidden" name="UserHostAddressProductReviewField" value="@Model.UserHostAddressProductReviewField" />
	}
	<input type="hidden" name="@Model.ViewStateName" value="@Model.ViewStateData" />
</div>

@* Uses jQuery Validation. See https://jqueryvalidation.org *@
<script src="~/DesktopModules/Revindex.Dnn.RevindexStorefront/Scripts/jquery-validation/jquery.validate.min.js" defer></script>

@* Uses jQuery Unobtrusive Validation. See http://www.mobzystems.com/blog/setting-up-jquery-unobtrusive-validation/ *@
<script src="~/DesktopModules/Revindex.Dnn.RevindexStorefront/Scripts/jquery-validate-unobtrusive/jquery.validate.unobtrusive.min.js" defer></script>

<script type="text/javascript">

	Sys.Application.add_load(function pageLoad(sender, args) {
		var servicesFramework = $.ServicesFramework(@Dnn.Module.ModuleID);
		var productProductReviewComboBox = $("#rvdsfProductProductReviewComboBox").kendoComboBox({
                    		autoBind: false,
							clearButton: true,
							dataTextField: "Name",
							dataValueField: "ProductID",
							enforceMinLength: true,
							minLength: 2,
							select: function (e) {
								if (e.dataItem)
									$("input[name='ProductNameProductReviewField']").val(e.dataItem.Name)
							},
							dataSource: new kendo.data.DataSource({
								serverFiltering: true,
                        		transport: {
                        			read: {
                        				type: "POST",
                        				url: servicesFramework.getServiceRoot("@Dnn.Module.DesktopModule.FolderName") + "Product/Lookup",
                        				beforeSend: servicesFramework.setModuleHeaders,
                        				data: function () {
											// Check length because minLength is not foolproof.
											if (productProductReviewComboBox.input.val().length > 1)
												return {
													SellerID: -1,
													Query: productProductReviewComboBox.input.val(),
													MaxItems: 30
                        						}
                        					else
                        						return null
                        				},
                        				dataType: "json",
                        				contentType: "application/json; charset=UTF-8"
                        			},
                        			parameterMap: function (data, type) {
                        				return kendo.stringify(data);
                        			}
                        		},
								schema: {
									data: function (response) {

										// We need to decycle any circular references because Kendo UI can only support flat structure
										return JSON.decycle(response)
									}
								},
								sort: { field: "Name", dir: "asc" }
							}),
							filter: "contains",
							suggest: false
                    	}).data("kendoComboBox")

		// Restore first select item after page load
		if ($("input[name='ProductIDProductReviewField']").val()) {
			productProductReviewComboBox.dataSource.add({
				ProductID: $("input[name='ProductIDProductReviewField']").val(),
				Name: $("input[name='ProductNameProductReviewField']").val()
					});
			productProductReviewComboBox.select(0)
		}

		// Restore ratings after partial postbacks
		$('input.rating').not('.k-hidden').kendoRating({ label: false })

		// Restore jQuery Unobstrusive Validation. Parse will not update unless we reset it first.
		var form = $("#Form").removeData("validator").removeData("unobtrusiveValidation")
		$.validator.unobtrusive.parse(form);

		// Scroll to first error
		if ($('.rvd-module-container div.dnnFormMessage.dnnFormError, .rvd-module-container div.dnnFormMessage.dnnFormSuccess').length > 0) {
			$('html, body').animate({
					scrollTop: $('.rvd-module-container div.dnnFormMessage.dnnFormError, .rvd-module-container div.dnnFormMessage.dnnFormSuccess').offset().top - 110
			}, 0);
		}

		$.validator.setDefaults({ ignore: '' });
	})
</script>