<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Act.Text" xml:space="preserve">
    <value>Make active?</value>
  </data>
  <data name="ActiveC.Text" xml:space="preserve">
    <value>Show all content</value>
  </data>
  <data name="AddField.Text" xml:space="preserve">
    <value>Add field</value>
  </data>
  <data name="AddFieldHeadlbl.Text" xml:space="preserve">
    <value>Add field</value>
  </data>
  <data name="AddFieldNamelbl.Text" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="AddFieldTypelbl.Text" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="AdminArtHeadlbl.Text" xml:space="preserve">
    <value>Content Admin</value>
  </data>
  <data name="ArtHeadlbl.Text" xml:space="preserve">
    <value>Content</value>
  </data>
  <data name="BAdd.Text" xml:space="preserve">
    <value>Add a new Content Set</value>
  </data>
  <data name="BAddArtN.Text" xml:space="preserve">
    <value>Add new content</value>
  </data>
  <data name="BAddField.Text" xml:space="preserve">
    <value>Save field</value>
  </data>
  <data name="BAddFS.Text" xml:space="preserve">
    <value>Add Content Set</value>
  </data>
  <data name="BEditField.Text" xml:space="preserve">
    <value>Save field</value>
  </data>
  <data name="BRAddField.Text" xml:space="preserve">
    <value>Return</value>
  </data>
  <data name="BRDesign.Text" xml:space="preserve">
    <value>Return</value>
  </data>
  <data name="BREditField.Text" xml:space="preserve">
    <value>Return</value>
  </data>
  <data name="BReturn.Text" xml:space="preserve">
    <value>Return</value>
  </data>
  <data name="BRMakeAct.Text" xml:space="preserve">
    <value>Return</value>
  </data>
  <data name="BRShowArt.Text" xml:space="preserve">
    <value>Return</value>
  </data>
  <data name="DesignHeadlbl.Text" xml:space="preserve">
    <value>Design fields</value>
  </data>
  <data name="EditArtCatlbl.Text" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="EditArtHeadlbl.Text" xml:space="preserve">
    <value>Edit content</value>
  </data>
  <data name="EditUrllbl.Text" xml:space="preserve">
    <value>Url name</value>
  </data>
  <data name="editenddtlbl.Text" xml:space="preserve">
    <value>Pick a end date:</value>
  </data>
  <data name="EditFieldHeadlbl.Text" xml:space="preserve">
    <value>Edit field</value>
  </data>
  <data name="EditFieldNamelbl.Text" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="EditFieldTypelbl.Text" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="editstartdtlbl.Text" xml:space="preserve">
    <value>Pick a start date:</value>
  </data>
  <data name="MakeActHeadlbl.Text" xml:space="preserve">
    <value>Make active?</value>
  </data>
  <data name="NewFSDesclbl.Text" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="NewFSHeadlbl.Text" xml:space="preserve">
    <value>New Content Set</value>
  </data>
  <data name="NewFSNamelbl.Text" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="ReqC.Text" xml:space="preserve">
    <value>Required</value>
  </data>
  <data name="ReqEditC.Text" xml:space="preserve">
    <value>Required</value>
  </data>
  <data name="btnExit.Text" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="SortC.Text" xml:space="preserve">
    <value>Order by Sort </value>
  </data>
  <data name="lblMetadata.Text" xml:space="preserve">
    <value>Select Metadata</value>
  </data>
  <data name="lblMetadataEdit.Text" xml:space="preserve">
    <value>Select Metadata</value>
  </data>
  <data name="NewFSDesclbl.Help" xml:space="preserve">
    <value>This is help text.</value>
  </data>
  <data name="FieldExists.Text" xml:space="preserve">
    <value>Field already exists with this name.</value>
  </data>
  <data name="helpContentSetDesc.Text" xml:space="preserve">
    <value>This is for your reference only.</value>
  </data>
  <data name="helpContentSetName.Text" xml:space="preserve">
    <value>The name of the Content Set - this will be used as a reference throughout.</value>
  </data>
  <data name="PleaseSelect.Text" xml:space="preserve">
    <value>Please select</value>
  </data>
  <data name="helpFieldMetaDataMapping.Text" xml:space="preserve">
    <value>You can choose whether this field is used for Facebook data</value>
  </data>
  <data name="helpFieldName.Text" xml:space="preserve">
    <value>The name of the Field will be used in the Add / Edit content forms and as Razor tokens in your templates.</value>
  </data>
  <data name="helpFieldType.Text" xml:space="preserve">
    <value>The type of field to appear on the Add / Edit content forms.</value>
  </data>
  <data name="BCategories.Text" xml:space="preserve">
    <value>Filter</value>
  </data>
  <data name="Categorieslbl.Text" xml:space="preserve">
    <value>Filter by category:</value>
  </data>
  <data name="AllowVersionslbl.Text" xml:space="preserve">
    <value>Allow versions</value>
  </data>
  <data name="helpContentAllowVersions.Text" xml:space="preserve">
    <value>If is checked, allow save versions each time you edit an article.</value>
  </data>
  <data name="helpContentNumberVersions.Text" xml:space="preserve">
    <value>Set how many versions you can save for each content</value>
  </data>
  <data name="NumberVersionslbl.Text" xml:space="preserve">
    <value>How many versions</value>
  </data>
</root>