<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Articlelbl.Text" xml:space="preserve">
    <value>Articles</value>
  </data>
  <data name="BAddCategory.Text" xml:space="preserve">
    <value>Add category</value>
  </data>
  <data name="BArticle.Text" xml:space="preserve">
    <value>Create Articles &lt;span class="glyphicon glyphicon-chevron-right"&gt;&lt;/span&gt;</value>
  </data>
  <data name="BBlog.Text" xml:space="preserve">
    <value>Create Blog &lt;span class="glyphicon glyphicon-chevron-right"&gt;&lt;/span&gt;</value>
  </data>
  <data name="BEvent.Text" xml:space="preserve">
    <value>Create Event &lt;span class="glyphicon glyphicon-chevron-right"&gt;&lt;/span&gt;</value>
  </data>
  <data name="BFinish.Text" xml:space="preserve">
    <value>Finish</value>
  </data>
  <data name="Bloglbl.Text" xml:space="preserve">
    <value>Blog</value>
  </data>
  <data name="BNews.Text" xml:space="preserve">
    <value>Create News &lt;span class="glyphicon glyphicon-chevron-right"&gt;&lt;/span&gt;</value>
  </data>
  <data name="BNextCategories.Text" xml:space="preserve">
    <value>Next</value>
  </data>
  <data name="BNextFieldSet.Text" xml:space="preserve">
    <value>Next</value>
  </data>
  <data name="BNextShow.Text" xml:space="preserve">
    <value>Next</value>
  </data>
  <data name="BSelectTemplate.Text" xml:space="preserve">
    <value>Select template</value>
  </data>
  <data name="CArticle.Text" xml:space="preserve">
    <value>Article</value>
  </data>
  <data name="CatFSlbl.Text" xml:space="preserve">
    <value>If you want to create Categories for this module then select ''Yes'' below (You can add categories later, via the categories menu)</value>
  </data>
  <data name="CCatNo.Text" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="CCatYes.Text" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="CList.Text" xml:space="preserve">
    <value>List</value>
  </data>
  <data name="CreatingFSlbl.Text" xml:space="preserve">
    <value>Give your new content a name</value>
  </data>
  <data name="enddtlbl.Text" xml:space="preserve">
    <value>Pick a end date</value>
  </data>
  <data name="Eventlbl.Text" xml:space="preserve">
    <value>Event: </value>
  </data>
  <data name="FirstCatNamelbl.Text" xml:space="preserve">
    <value>Category name:</value>
  </data>
  <data name="FirstParentlbl.Text" xml:space="preserve">
    <value>Parent: </value>
  </data>
  <data name="FirstUrllbl.Text" xml:space="preserve">
    <value>Url name</value>
  </data>
  <data name="Modelbl.Text" xml:space="preserve">
    <value>Choose the mode to show the article.</value>
  </data>
  <data name="NameFSlbl.Text" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Newslbl.Text" xml:space="preserve">
    <value>News</value>
  </data>
  <data name="OtherPage.Text" xml:space="preserve">
    <value>Other page</value>
  </data>
  <data name="SamePage.Text" xml:space="preserve">
    <value>Same page</value>
  </data>
  <data name="SelecTabID.Text" xml:space="preserve">
    <value>Select which page will be displayed:</value>
  </data>
  <data name="SelectArticlelbl.Text" xml:space="preserve">
    <value>Select article</value>
  </data>
  <data name="SelectSamePage.Text" xml:space="preserve">
    <value>Select where show the article:</value>
  </data>
  <data name="selectTemplatelbl.Text" xml:space="preserve">
    <value>Select template</value>
  </data>
  <data name="SelectTempListlbl.Text" xml:space="preserve">
    <value>Select details template</value>
  </data>
  <data name="startdtlbl.Text" xml:space="preserve">
    <value>Pick a start date</value>
  </data>
  <data name="TreeAlllbl.Text" xml:space="preserve">
    <value>Show articles belongs to ALL of selected categories:</value>
  </data>
  <data name="TreeOnelbl.Text" xml:space="preserve">
    <value>Show articles belongs to ONE of selected categories:</value>
  </data>
  <data name="WelcomeText1.Text" xml:space="preserve">
    <value>You can select one of the following predefined templates below to get you started. You can change or add new fields afterwards:</value>
  </data>
  <data name="WelcomeText2.Text" xml:space="preserve">
    <value />
  </data>
  <data name="WelcomeTitle.Text" xml:space="preserve">
    <value>Welcome to ContentPro</value>
  </data>
  <data name="AddArticle.Text" xml:space="preserve">
    <value>Add more content</value>
  </data>
  <data name="FPImportlbl.Text" xml:space="preserve">
    <value>Import from LiveBlog or SunBlog</value>
  </data>
  <data name="FPImport.Text" xml:space="preserve">
    <value>Import</value>
  </data>
  <data name="FirstPageNextDisplayOptions.Text" xml:space="preserve">
    <value>Nearly there! Click 'Next' to configure how you want this module to display the content.</value>
  </data>
  <data name="WelcomeText3.Text" xml:space="preserve">
    <value>If you don't want auto-configure the module, go to display settings below to perform a manual setup.</value>
  </data>
  <data name="BDisplaySetttings.Text" xml:space="preserve">
    <value>Go to display settings</value>
  </data>
  <data name="btnCancel.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="btnGallery.Text" xml:space="preserve">
    <value>Create Gallery &lt;span class="glyphicon glyphicon-chevron-right"&gt;&lt;/span&gt;</value>
  </data>
  <data name="lblArticleIntro.Text" xml:space="preserve">
    <value>Create a generic Articles content set with fields like Title, Dates, Extract, Body, Author and Image</value>
  </data>
  <data name="lblBlogIntro.Text" xml:space="preserve">
    <value>Creates a Blog content set with an attractive template</value>
  </data>
  <data name="lblGallery.Text" xml:space="preserve">
    <value>Gallery</value>
  </data>
  <data name="lblGalleryIntro.Text" xml:space="preserve">
    <value>Using Masonry for a responsive layout and a Light box for image popups. Contains fields such as Title, Dates, Small Image and Large Image</value>
  </data>
  <data name="lblGo.Text" xml:space="preserve">
    <value>Go</value>
  </data>
  <data name="valRequired.Text" xml:space="preserve">
    <value>Required</value>
  </data>
  <data name="btnSimpleSlder.Text" xml:space="preserve">
    <value>Create Slider &lt;span class="glyphicon glyphicon-chevron-right"&gt;&lt;/span&gt;</value>
  </data>
  <data name="lblSimpleSlider.Text" xml:space="preserve">
    <value>Simple Slider</value>
  </data>
  <data name="lblSimpleSliderIntro.Text" xml:space="preserve">
    <value>A slider which is simple to use and includes fields for Title, Dates, Intro text and an Image</value>
  </data>
</root>