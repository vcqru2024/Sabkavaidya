<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="secGeneral.Text" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="plImageWidth.Text" xml:space="preserve">
    <value>Image Width</value>
  </data>
  <data name="plImageWidth.Help" xml:space="preserve">
    <value>Set product image width (px), it works when "Force image width" option is checked.</value>
  </data>
  <data name="plTemplate.Text" xml:space="preserve">
    <value>Template </value>
  </data>
  <data name="plTemplate.Help" xml:space="preserve">
    <value>Select which template is used to display product list. Template files locate under desktopmodules/crossclassified/template/product/ListTab, you can customize your own.</value>
  </data>
  <data name="plShowPrice.Text" xml:space="preserve">
    <value>Show Price</value>
  </data>
  <data name="plShowImageOnly.Text" xml:space="preserve">
    <value>Records With Image Only</value>
  </data>
  <data name="plShowImageOnly.Help" xml:space="preserve">
    <value>Check to only show products which has image specified</value>
  </data>
  <data name="plShowImage.Text" xml:space="preserve">
    <value>Show Image</value>
  </data>
  <data name="plShowImage.Help" xml:space="preserve">
    <value>show image in list</value>
  </data>
  <data name="plShowPrice.Help" xml:space="preserve">
    <value>Check to show product price</value>
  </data>
  <data name="plShowFeaturedOnly.Text" xml:space="preserve">
    <value>Featured Products Only</value>
  </data>
  <data name="plShowFeaturedOnly.Help" xml:space="preserve">
    <value>Check to display featured products only.</value>
  </data>
  <data name="plRowCount.Text" xml:space="preserve">
    <value>Rows Per Tab</value>
  </data>
  <data name="plRowCount.Help" xml:space="preserve">
    <value>Rows per tab</value>
  </data>
  <data name="plColCount.Text" xml:space="preserve">
    <value>Items Per Row</value>
  </data>
  <data name="plColCount.Help" xml:space="preserve">
    <value>how many products will show in 1 row</value>
  </data>
  <data name="plShowSearch.Help" xml:space="preserve">
    <value>Check to display the search box at the top of the product list.</value>
  </data>
  <data name="plShowSearch.Text" xml:space="preserve">
    <value>Show Search</value>
  </data>
  <data name="plShowName.Text" xml:space="preserve">
    <value>Show Name</value>
  </data>
  <data name="plShowName.Help" xml:space="preserve">
    <value>Check to show product name</value>
  </data>
  <data name="li_SortField_CreationDate.Text" xml:space="preserve">
    <value>Creation Date</value>
  </data>
  <data name="li_SortField_PublishDate.Text" xml:space="preserve">
    <value>Publish Date</value>
  </data>
  <data name="li_SortField_LastModifiedDate.Text" xml:space="preserve">
    <value>Last modified date</value>
  </data>
  <data name="li_SortField_Views.Text" xml:space="preserve">
    <value>Views</value>
  </data>
  <data name="plSortField.Text" xml:space="preserve">
    <value>Sort By</value>
  </data>
  <data name="plSortField.Help" xml:space="preserve">
    <value>Sort Fields</value>
  </data>
  <data name="ControlTitle_edit.Text" xml:space="preserve">
    <value>Product Tab List Settings</value>
  </data>
  <data name="secCategory.Text" xml:space="preserve">
    <value>Categories On The Tab</value>
  </data>
  <data name="secImage.Text" xml:space="preserve">
    <value>Images</value>
  </data>
  <data name="secContent.Text" xml:space="preserve">
    <value>Display Contents (apply to all departments)</value>
  </data>
  <data name="plLinkTarget.Text" xml:space="preserve">
    <value>Link Target</value>
  </data>
  <data name="plLinkTarget.Help" xml:space="preserve">
    <value>Set how to display product detail.</value>
  </data>
  <data name="plShowCreatedDate.Text" xml:space="preserve">
    <value>Show Created Date</value>
  </data>
  <data name="plShowFeaturedField.Text" xml:space="preserve">
    <value>Show Featured Status</value>
  </data>
  <data name="plShowViews.Text" xml:space="preserve">
    <value>Show Views</value>
  </data>
  <data name="chkForceImageHeight.Text" xml:space="preserve">
    <value>Fix Image Height</value>
  </data>
  <data name="chkForceImageWidth.Text" xml:space="preserve">
    <value>Fix Image Width</value>
  </data>
  <data name="plImageHeight.Help" xml:space="preserve">
    <value>Set product image height (px), it works when "Force image height" option is checked.</value>
  </data>
  <data name="plImageHeight.Text" xml:space="preserve">
    <value>Image Height</value>
  </data>
  <data name="plShowPromoStart.Help" xml:space="preserve">
    <value>Check to show promo price start if it exist</value>
  </data>
  <data name="plShowPromoStart.Text" xml:space="preserve">
    <value>Show Promo Start</value>
  </data>
  <data name="plShowPromoEnd.Help" xml:space="preserve">
    <value>Check to show promo price end if it exist</value>
  </data>
  <data name="plShowPromoEnd.Text" xml:space="preserve">
    <value>Show Promo End</value>
  </data>
  <data name="plShowSummary.Help" xml:space="preserve">
    <value>Check to show summary in product list</value>
  </data>
  <data name="plShowSummary.Text" xml:space="preserve">
    <value>Show Summary</value>
  </data>
  <data name="plShowCreatedDate.Help" xml:space="preserve">
    <value>Show product created date</value>
  </data>
  <data name="plShowFeaturedField.Help" xml:space="preserve">
    <value>Show product featured status</value>
  </data>
  <data name="plShowViews.Help" xml:space="preserve">
    <value>Show product views in list</value>
  </data>
  <data name="plShowPromoOnly.Help" xml:space="preserve">
    <value>Check to show products which has promo price specified.</value>
  </data>
  <data name="plShowPromoOnly.Text" xml:space="preserve">
    <value>Show Promo Only</value>
  </data>
  <data name="plRatingImage.Help" xml:space="preserve">
    <value>Choose rating image.</value>
  </data>
  <data name="plRatingImage.Text" xml:space="preserve">
    <value>Rating Image</value>
  </data>
  <data name="plShowRating.Help" xml:space="preserve">
    <value>Show product rating result.</value>
  </data>
  <data name="plShowRating.Text" xml:space="preserve">
    <value>Show Rating</value>
  </data>
  <data name="plDetailTab.Help" xml:space="preserve">
    <value>Select which page to display product detail, that page should have a Cp_Product_Detail module instance on it. If you don't specify it, module will use the default detail tab specify for selectd product department.</value>
  </data>
  <data name="plDetailTab.Text" xml:space="preserve">
    <value>Cp_Product_Detail Module Page</value>
  </data>
  <data name="plShowUserName.Help" xml:space="preserve">
    <value>Check to show create user name in product list</value>
  </data>
  <data name="plShowUserName.Text" xml:space="preserve">
    <value>Show Creator</value>
  </data>
  <data name="plSummaryLength.Help" xml:space="preserve">
    <value>Enter sumary length while displaying, enter 0 to display full summary.</value>
  </data>
  <data name="plSummaryLength.Text" xml:space="preserve">
    <value>Summary Length</value>
  </data>
  <data name="plUDFieldList.Help" xml:space="preserve">
    <value>Choose user defined fields which will be displayed in built in template. Note, it works only when "Use built in template" option is checked.</value>
  </data>
  <data name="plUDFieldList.Text" xml:space="preserve">
    <value>Display Fields</value>
  </data>
  <data name="plUDField_ImageHeight.Help" xml:space="preserve">
    <value>Control the image height of user defined fields.</value>
  </data>
  <data name="plUDField_ImageHeight.Text" xml:space="preserve">
    <value>Custom Image Height</value>
  </data>
  <data name="plUDField_ImageWidth.Help" xml:space="preserve">
    <value>Control the image width of user defined fields. </value>
  </data>
  <data name="plUDField_ImageWidth.Text" xml:space="preserve">
    <value>Custom Image Width</value>
  </data>
  <data name="plUseBuiltInTemplate.Help" xml:space="preserve">
    <value>Use built-in tempate to display user defined fields. Uncheck this option if you want to display user defined fields via your own tempaltes. For more detail about customize template, please see user guide document.</value>
  </data>
  <data name="plUseBuiltInTemplate.Text" xml:space="preserve">
    <value>Use Built-In Template</value>
  </data>
  <data name="secUDField.Text" xml:space="preserve">
    <value>Custom Attributes</value>
  </data>
  <data name="plType.Help" xml:space="preserve">
    <value>Select department which products belongs.</value>
  </data>
  <data name="plType.Text" xml:space="preserve">
    <value>Select Department</value>
  </data>
  <data name="plShowPackageFee.Help" xml:space="preserve">
    <value>Show product package fee in list</value>
  </data>
  <data name="plShowPackageFee.Text" xml:space="preserve">
    <value>Show Package Fee</value>
  </data>
  <data name="plShowSku.Help" xml:space="preserve">
    <value>Show product sku in list</value>
  </data>
  <data name="plShowSku.Text" xml:space="preserve">
    <value>Show Sku</value>
  </data>
  <data name="plShowWeight.Help" xml:space="preserve">
    <value>Show product weight in list</value>
  </data>
  <data name="plShowWeight.Text" xml:space="preserve">
    <value>Show Weight</value>
  </data>
  <data name="Tip_Category.Text" xml:space="preserve">
    <value>Specifies the categories (up to 8) which will show as tabs, module will display products which belong to each category as tab content. By default, module will use category name as tab title, you can enter a "Tab Title" instead.&lt;br/&gt;&lt;br/&gt;For example, if you create 3 categories ("Man Clothes", "Woman Clothes", "Kid Clothes") at "Cp_Admin sub module - Admin Control Panel - System Data - Categories", you can select "Tab Category 1" as "Man Clothes", "Tab Category 2" as "Woman Clothes", then module will show two tabs. For tab 1, module will show products which belong to "Man Clothes" category, for tab 2, module will show products which belong to "Woman Clothes" category. </value>
  </data>
  <data name="Tip_DetailTab.Text" xml:space="preserve">
    <value>Select which page to display product detail, that page should have a Cp_Product_Detail module instance on it. If you don't specify it, module will use the default detail page for selected department (which is specified in "Cp_Admin sub module - Admin Control Panel - Departments") to display.</value>
  </data>
  <data name="Tip_DisplayContent.Text" xml:space="preserve">
    <value>Choose fields which will be displayed in list. Note, these fields can be applied to all departments.</value>
  </data>
  <data name="Tip_UdField.Text" xml:space="preserve">
    <value>Custom attributes are created in "Cp_Admin sub module - Admin Control Panel - System Data - Attributes". You can use built-in tempate to display these custom fields. Uncheck this option if you want to display custom fields via your own tempaltes. For more detail about customize template, please see user guide document.</value>
  </data>
  <data name="plUDField_CheckBoxList_Enabled.Help" xml:space="preserve">
    <value>If you use check box list to display your custom attributes, they will display as disabled by default to avoid visitor select. However, if they look too dim, you can check on this option to enable it.</value>
  </data>
  <data name="plUDField_CheckBoxList_Enabled.Text" xml:space="preserve">
    <value>Check Box List Enabled</value>
  </data>
  <data name="plUDField_CheckBoxList_RepeatColumns.Help" xml:space="preserve">
    <value>If you use check box list to display your custom attributes, they will display as 1 column per row by default. You can specify more columns per row to let it looks good.</value>
  </data>
  <data name="plUDField_CheckBoxList_RepeatColumns.Text" xml:space="preserve">
    <value>Check Box List Repeat</value>
  </data>
  <data name="Tip_Image.Text" xml:space="preserve">
    <value>Enter image width/height and check on "Fix image width/height" options to control image layout.</value>
  </data>
  <data name="plShowBidCount.Help" xml:space="preserve">
    <value>Show bid count</value>
  </data>
  <data name="plShowBidCount.Text" xml:space="preserve">
    <value>Show Bid Count</value>
  </data>
  <data name="plShowBuyNowPrice.Help" xml:space="preserve">
    <value>Check to show buy now price in list</value>
  </data>
  <data name="plShowBuyNowPrice.Text" xml:space="preserve">
    <value>Show "Buy Now" price</value>
  </data>
  <data name="plShowCurrentBid.Help" xml:space="preserve">
    <value>Show current bid price</value>
  </data>
  <data name="plShowCurrentBid.Text" xml:space="preserve">
    <value>Show Current Bid Price</value>
  </data>
  <data name="plShowCurrentBidder.Help" xml:space="preserve">
    <value>Show current bidder</value>
  </data>
  <data name="plShowCurrentBidder.Text" xml:space="preserve">
    <value>Show Current Bidder</value>
  </data>
  <data name="plShowExpireDate.Help" xml:space="preserve">
    <value>Show expire date</value>
  </data>
  <data name="plShowExpireDate.Text" xml:space="preserve">
    <value>Show Expire Date</value>
  </data>
  <data name="plShowPublishDate.Help" xml:space="preserve">
    <value>Show publish date</value>
  </data>
  <data name="plShowPublishDate.Text" xml:space="preserve">
    <value>Show Publish Date</value>
  </data>
  <data name="plShowRemainTime.Help" xml:space="preserve">
    <value>Show remain time</value>
  </data>
  <data name="plShowRemainTime.Text" xml:space="preserve">
    <value>Show Remain Time</value>
  </data>
  <data name="plShowStartPrice.Help" xml:space="preserve">
    <value>Check to show start price in list</value>
  </data>
  <data name="plShowStartPrice.Text" xml:space="preserve">
    <value>Show Start Price</value>
  </data>
  <data name="plTemplate_Ad.Help" xml:space="preserve">
    <value>Choose Classified Ads List Template</value>
  </data>
  <data name="plTemplate_Ad.Text" xml:space="preserve">
    <value>Classified Ads List Template</value>
  </data>
  <data name="plTemplate_Auction.Help" xml:space="preserve">
    <value>Choose Auction List Template</value>
  </data>
  <data name="plTemplate_Auction.Text" xml:space="preserve">
    <value>Auction List Template</value>
  </data>
  <data name="plTemplate_FixedPrice.Help" xml:space="preserve">
    <value>Choose Fixed Price Products List Template</value>
  </data>
  <data name="plTemplate_FixedPrice.Text" xml:space="preserve">
    <value>Fixed Price Products List Template</value>
  </data>
  <data name="secAuction.Text" xml:space="preserve">
    <value>Auction Contents (mainly apply to "Auction" departments)</value>
  </data>
  <data name="secFixedPrice.Text" xml:space="preserve">
    <value>Fixed Price Contents (mainly apply to "Fixed Price" departments)</value>
  </data>
  <data name="Tip_AuctionContent.Text" xml:space="preserve">
    <value>Choose auction fields which will be displayed in list. Note, these fields are mainly applied to "Auction" departments.</value>
  </data>
  <data name="Tip_FixedPriceContent.Text" xml:space="preserve">
    <value>Choose fields which will be displayed in list. Note, these fields are mainly applied to "Fixed Price" departments.</value>
  </data>
  <data name="Tip_Template.Text" xml:space="preserve">
    <value>All sub modules in Classified Pro package are template based, you can customize your desired display effect by creating different templates. See "Classified Pro user guide.pdf" for more detail.&lt;br/&gt;&lt;br/&gt; Note, Cp_Product_ListTab templates for "Fixed Price" departments locates under DesktopModules\CrossClassified\Template\Product\ListTab\FixedPrice folder; templates for "Classified Ads" departments locates under DesktopModules\CrossClassified\Template\Product\ListTab\Ad folder; templates for "Auction" departments locates under DesktopModules\CrossClassified\Template\Product\ListTab\Auction folder, you should put related templates under corresponding folder.</value>
  </data>
  <data name="Tip_Rating.Text" xml:space="preserve">
    <value>Note, module will show seller average rating for auction listings. For other listings like fixed price products or classified ads, module will show average rating for current listing.</value>
  </data>
  <data name="plShowSort.Help" xml:space="preserve">
    <value>Check to show product sort options with search</value>
  </data>
  <data name="plShowSort.Text" xml:space="preserve">
    <value>Show Sort Options</value>
  </data>
  <data name="secJqueryTab.Text" xml:space="preserve">
    <value>Jquery UI Tabs</value>
  </data>
  <data name="plShowLocation_City.Help" xml:space="preserve">
    <value>Show City</value>
  </data>
  <data name="plShowLocation_City.Text" xml:space="preserve">
    <value>Show City</value>
  </data>
  <data name="plShowLocation_Country.Help" xml:space="preserve">
    <value>Show Country</value>
  </data>
  <data name="plShowLocation_Country.Text" xml:space="preserve">
    <value>Show Country</value>
  </data>
  <data name="plShowLocation_State.Help" xml:space="preserve">
    <value>Show State/Province</value>
  </data>
  <data name="plShowLocation_State.Text" xml:space="preserve">
    <value>Show State/Province</value>
  </data>
  <data name="plShowLocation_Town.Help" xml:space="preserve">
    <value>Show Town</value>
  </data>
  <data name="plShowLocation_Town.Text" xml:space="preserve">
    <value>Show Town</value>
  </data>
  <data name="plShowVendorCompany.Help" xml:space="preserve">
    <value>Check to show creator company (which is specified in "Cp_Admin sub module - Seller Center - My Profile") in product list.</value>
  </data>
  <data name="plShowVendorCompany.Text" xml:space="preserve">
    <value>Show Creator Company</value>
  </data>
  <data name="Tip_ShowLocation.Text" xml:space="preserve">
    <value>Check to show product(listing) location in list. For example, country = USA, state/province = California, city = Los Angeles, town = Bell. Note, current department must enable "Location" property (can be modified at "Cp_Admin sub module - Admin Control Panel - Departments").</value>
  </data>
  <data name="secAbout.Text" xml:space="preserve">
    <value>About Cp_Product_ListTab Sub Module</value>
  </data>
  <data name="Tip_About.Text" xml:space="preserve">
    <value>Classified Pro is an enterprise-class DNN module which helps you to create an online store, auction website and also publish classified ads. It contains 16 sub modules and 1 skin object. Cp_Product_ListTab is one of these 16 sub modules, it is used to show products (listings) with JQuery UI Tabs.&lt;br/&gt;&lt;br/&gt;Each tab is corresponding to a category, module will display products which belong to each category as tab content. For example, if you create 3 categories ("Man Clothes", "Woman Clothes", "Kid Clothes") at "Cp_Admin sub module - Admin Control Panel - System Data - Categories", you can select "Tab Category 1" as "Man Clothes", "Tab Category 2" as "Woman Clothes", then module will show two tabs. For tab 1, module will show products which belong to "Man Clothes" category, for tab 2, module will show products which belong to "Woman Clothes" category. &lt;br/&gt;&lt;br/&gt;

Cp_Product_ListTab sub module is mainly used to show featured products (or show hot / promotion products). You can add multiple instances of Cp_Product_ListTab sub module to different pages (or on same page if you like), and configue them to show different contents. It is template based, you can customize your desired display effect by creating different templates.&lt;br/&gt;&lt;br/&gt;

If current site enables content localization, Cp_Product_ListTab sub module will display content according to page culture. For example, if current page culture is "en-US (English)", it will display English content; if current page culture is "zh-CN (Simple Chinese)", it will display Simple Chinese content; if page culture is neutral, it will display content according to current context culture.&lt;br/&gt;&lt;br/&gt;As you can see, to support content localization, you need to create at least 1 page for each language (e.g. English and Chinese), and put Cp_Product_ListTab sub module on them. Of course, you can choose to create only 1 neutral page, and put Cp_Product_ListTab sub module on it.</value>
  </data>
  <data name="li_ActiveMode_autorotate.Text" xml:space="preserve">
    <value>Auto Rotate</value>
  </data>
  <data name="li_ActiveMode_click.Text" xml:space="preserve">
    <value>Mouse Click</value>
  </data>
  <data name="li_ActiveMode_hover.Text" xml:space="preserve">
    <value>Mouse Hover</value>
  </data>
  <data name="li_HeightStyle_auto.Text" xml:space="preserve">
    <value>Auto: All panels will be set to the height of the tallest panel.</value>
  </data>
  <data name="li_HeightStyle_content.Text" xml:space="preserve">
    <value>Content: Each panel will be only as tall as its content.</value>
  </data>
  <data name="li_HeightStyle_fill.Text" xml:space="preserve">
    <value>Fill: Expand to the available height based on the tabs' parent height.</value>
  </data>
  <data name="plActiveMode.Help" xml:space="preserve">
    <value>Choose the tab switch mode</value>
  </data>
  <data name="plActiveMode.Text" xml:space="preserve">
    <value>Tab Switch</value>
  </data>
  <data name="plCssStyle.Help" xml:space="preserve">
    <value>Choose the css style for the jquery ui tabs</value>
  </data>
  <data name="plCssStyle.Text" xml:space="preserve">
    <value>CSS Style</value>
  </data>
  <data name="plHeightStyle.Help" xml:space="preserve">
    <value>Controls the height of the tabs widget and each panel.</value>
  </data>
  <data name="plHeightStyle.Text" xml:space="preserve">
    <value>Height Style</value>
  </data>
  <data name="plRotateInterval.Help" xml:space="preserve">
    <value>Enter the rotate interval, works when tab switch mode is set as "Auto Rotate".</value>
  </data>
  <data name="plRotateInterval.Text" xml:space="preserve">
    <value>Rotate Interval (second)</value>
  </data>
  <data name="plTabCategory1.Text" xml:space="preserve">
    <value>Tab Category 1</value>
  </data>
  <data name="plTabCategory1Title.Text" xml:space="preserve">
    <value>Tab Title 1</value>
  </data>
  <data name="plTabCategory2.Text" xml:space="preserve">
    <value>Tab Category 2</value>
  </data>
  <data name="plTabCategory2Title.Text" xml:space="preserve">
    <value>Tab Title 2</value>
  </data>
  <data name="plTabCategory3.Text" xml:space="preserve">
    <value>Tab Category 3</value>
  </data>
  <data name="plTabCategory3Title.Text" xml:space="preserve">
    <value>Tab Title 3</value>
  </data>
  <data name="plTabCategory4.Text" xml:space="preserve">
    <value>Tab Category 4</value>
  </data>
  <data name="plTabCategory4Title.Text" xml:space="preserve">
    <value>Tab Title 4</value>
  </data>
  <data name="plTabCategory5.Text" xml:space="preserve">
    <value>Tab Category 5</value>
  </data>
  <data name="plTabCategory5Title.Text" xml:space="preserve">
    <value>Tab Title 5</value>
  </data>
  <data name="plTabCategory6.Text" xml:space="preserve">
    <value>Tab Category 6</value>
  </data>
  <data name="plTabCategory6Title.Text" xml:space="preserve">
    <value>Tab Title 6</value>
  </data>
  <data name="plTabCategory7.Text" xml:space="preserve">
    <value>Tab Category 7</value>
  </data>
  <data name="plTabCategory7Title.Text" xml:space="preserve">
    <value>Tab Title 7</value>
  </data>
  <data name="plTabCategory8.Text" xml:space="preserve">
    <value>Tab Category 8</value>
  </data>
  <data name="plTabCategory8Title.Text" xml:space="preserve">
    <value>Tab Title 8</value>
  </data>
  <data name="Tip_RowAndColumn.Text" xml:space="preserve">
    <value>Enter how many rows (and columns) in each tab. For example, if you enter "Rows Per Tab" as 5, "Items Per Row" as 2, then module will show 5 rows in each tab, and show 2 products in  each row.</value>
  </data>
  <data name="Tip_JQueryUI.Text" xml:space="preserve">
    <value>Specify the JQuery UI tab options (CSS, Height Style, Tab Switch, etc.) here. Module provides over 24 CSS packages at DesktopModules\CrossClassified\css\jquery-ui-themes-1.11.4\themes folder, you can extend more. Note, if you put multiple instances of Cp_Product_ListTab sub modules on the same page, then &lt;font color="red"&gt;the CSS Style in the last Cp_Product_ListTab sub module&lt;/font&gt; will take effect (it will overwite others settings).</value>
  </data>
  <data name="plStartTab.Help" xml:space="preserve">
    <value>Choose start tab, default value is 0 (the frist tab). Note, if you choose a value which is big than tab count, then module will ignore it. For example, if you only have 3 tabs, and you choose 4 (the 5 tab), then module will ignore it.</value>
  </data>
  <data name="plStartTab.Text" xml:space="preserve">
    <value>Start Tab</value>
  </data>
</root>