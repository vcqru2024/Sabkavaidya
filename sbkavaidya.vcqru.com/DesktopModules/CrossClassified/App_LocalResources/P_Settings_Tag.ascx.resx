<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="plTemplate.Text" xml:space="preserve">
    <value>Template </value>
  </data>
  <data name="plTemplate.Help" xml:space="preserve">
    <value>Search template locates under desktopmodules/crossclassified/template/product/TagList, you can customize your own.</value>
  </data>
  <data name="ControlTitle_edit.Text" xml:space="preserve">
    <value>Product tag list settings</value>
  </data>
  <data name="plProductListPage.Text" xml:space="preserve">
    <value>Cp_Product_List module page</value>
  </data>
  <data name="plProductListPage.Help" xml:space="preserve">
    <value>Select when click a tag, which page will display related products. That page should have a Cp_Product_List module instance on it. If you don't specify, module will use the default list tab in specified for selected product department</value>
  </data>
  <data name="plLinkTarget.Help" xml:space="preserve">
    <value>Choose how to open target window when click author item.</value>
  </data>
  <data name="plLinkTarget.Text" xml:space="preserve">
    <value>Link Target</value>
  </data>
  <data name="plDisplayRss.Help" xml:space="preserve">
    <value>Check to display RSS link next to tag.</value>
  </data>
  <data name="plDisplayRss.Text" xml:space="preserve">
    <value>Display RSS</value>
  </data>
  <data name="li_SortFiled_ProductCounts.Text" xml:space="preserve">
    <value>Product Counts</value>
  </data>
  <data name="li_SortFiled_TagName.Text" xml:space="preserve">
    <value>Tag Name</value>
  </data>
  <data name="plDisplayProductCounts.Help" xml:space="preserve">
    <value>Check to display product counts next to tag name.</value>
  </data>
  <data name="plDisplayProductCounts.Text" xml:space="preserve">
    <value>Display Product Counts</value>
  </data>
  <data name="plSortFiled.Help" xml:space="preserve">
    <value>Choose how to sort tag list</value>
  </data>
  <data name="plSortFiled.Text" xml:space="preserve">
    <value>Sort Filed</value>
  </data>
  <data name="plColCount.Help" xml:space="preserve">
    <value>Enter how many tag items will be display in the same row.</value>
  </data>
  <data name="plColCount.Text" xml:space="preserve">
    <value>Items Per Row</value>
  </data>
  <data name="plRowCount.Help" xml:space="preserve">
    <value>Enter tag items which will be display in list.</value>
  </data>
  <data name="plRowCount.Text" xml:space="preserve">
    <value>Tag Rows</value>
  </data>
  <data name="li_SortFiled_CreatedDate.Text" xml:space="preserve">
    <value>Created Date</value>
  </data>
  <data name="li_SortMethod_Asc.Text" xml:space="preserve">
    <value>Ascending</value>
  </data>
  <data name="li_SortMethod_Desc.Text" xml:space="preserve">
    <value>Descending</value>
  </data>
  <data name="plUseCloudStyle.Help" xml:space="preserve">
    <value>If this option is checked, tag list will be displayed via cloud style</value>
  </data>
  <data name="plUseCloudStyle.Text" xml:space="preserve">
    <value>Use Cloud Style</value>
  </data>
  <data name="plSortMethod.Help" xml:space="preserve">
    <value>Choose sort method, ascending or descending.</value>
  </data>
  <data name="plSortMethod.Text" xml:space="preserve">
    <value>Sort Method</value>
  </data>
  <data name="plType.Help" xml:space="preserve">
    <value>Select product department which tag belongs</value>
  </data>
  <data name="plType.Text" xml:space="preserve">
    <value>Select Department</value>
  </data>
  <data name="secAbout.Text" xml:space="preserve">
    <value>About Cp_Product_Tag sub module</value>
  </data>
  <data name="secGeneral.Text" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="Tip_About.Text" xml:space="preserve">
    <value>Classified Pro is an enterprise-class DNN module which helps you to create an online store, auction website and also publish classified ads. It contains 16 sub modules and 1 skin object. 
Cp_Product_Tag is one of these 16 sub modules, it is used to show product (listing) tags with data list. When click a tag, module will navigate to Cp_Product_List sub module page to show products (listings) which belong to this tag. &lt;br/&gt;&lt;br/&gt;

You can add multiple instances of Cp_Product_Tag sub module to different pages (or on same page).  It is template based, you can customize your desired display effect by create different templates.&lt;br/&gt;&lt;br/&gt;
If current site enables content localization, Cp_Product_Tag sub module will show tags according to page culture. For example, if current page culture is "en-US (English)", it will show English tags; if current page culture is "zh-CN (Simple Chinese)", it will show Simple Chinese tags; if page culture is neutral, it will show tags according to current context culture.</value>
  </data>
</root>