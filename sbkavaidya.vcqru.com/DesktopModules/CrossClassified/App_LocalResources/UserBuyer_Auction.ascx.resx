<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="lblCreatedDate.Text" xml:space="preserve">
    <value>Created Date</value>
  </data>
  <data name="ControlTitle_userbuyer_auction.Text" xml:space="preserve">
    <value>My Bidding</value>
  </data>
  <data name="lblOptionName.Text" xml:space="preserve">
    <value>Option</value>
  </data>
  <data name="lblVendorName.Text" xml:space="preserve">
    <value>Seller</value>
  </data>
  <data name="lblQuantity.Text" xml:space="preserve">
    <value>Order Quantity</value>
  </data>
  <data name="lblProductName1.Text" xml:space="preserve">
    <value>Name:</value>
  </data>
  <data name="divActive.Text" xml:space="preserve">
    <value>Active</value>
  </data>
  <data name="divGiveUp.Text" xml:space="preserve">
    <value>Give Up</value>
  </data>
  <data name="divNotWon.Text" xml:space="preserve">
    <value>Not Won</value>
  </data>
  <data name="divPaid.Text" xml:space="preserve">
    <value>Paid</value>
  </data>
  <data name="divProxy.Text" xml:space="preserve">
    <value>Proxy Bidding</value>
  </data>
  <data name="divWon.Text" xml:space="preserve">
    <value>Won</value>
  </data>
  <data name="lblBid.Text" xml:space="preserve">
    <value>Your Bid</value>
  </data>
  <data name="lblProductName.Text" xml:space="preserve">
    <value>Product</value>
  </data>
  <data name="Tip_Auction.Text" xml:space="preserve">
    <value>Your bid is a contract between you and the seller. Here you can view different bids below:&lt;br/&gt;&lt;br/&gt;
1. Active, bids which still under processing. They will become as won (or not won) bids after listing expire (or listing is direct bought by someone). By default, site will check expired auction listings every 5 minutes, and update your bidding status (e.g. change Active to Won), please be patient.&lt;br/&gt;&lt;br/&gt;
2. Proxy Bidding, you can submit your highest price to a listing and check on "Proxy Bidding" option, site will bid incrementally for you up to your maximum price to save your time (and money). Note, proxy bidding works for English auction (open ascending price auction) only, and they will be deleted after listing expire.&lt;br/&gt;&lt;br/&gt;
3. Won, bids which you won finally but not paid, you can check out here.&lt;br/&gt;&lt;br/&gt;
4. Not Won, bids which you not won finally, you can delete them if necessary.&lt;br/&gt;&lt;br/&gt;
5. Paid, bids which you won and paid.&lt;br/&gt;&lt;br/&gt;
6. Give Up, mainly used for second item auction. In second item auction, as a winning bidder, you have the right to refuse paying if you are only awarded less than the number of the items you were bidding on.&lt;br/&gt;</value>
  </data>
  <data name="btnCheckOutSelected.Text" xml:space="preserve">
    <value>Check Out Selected</value>
  </data>
  <data name="GiveUp.Text" xml:space="preserve">
    <value>Are you sure you want to give up this winning bid?</value>
  </data>
  <data name="imgCheckOut.Text" xml:space="preserve">
    <value>Check Out</value>
  </data>
  <data name="imgGiveUp.Text" xml:space="preserve">
    <value>Give Up, works for second item auction only. In second item auction, as a winning bidder, you have the right to refuse paying if you are only awarded less than the number of the items you were bidding on.</value>
  </data>
  <data name="lblColor_Green.Text" xml:space="preserve">
    <value>Winning Bid</value>
  </data>
  <data name="lblColor_Orange.Text" xml:space="preserve">
    <value>Winning bid is below reserve price</value>
  </data>
  <data name="lblColor_Red.Text" xml:space="preserve">
    <value>Outbid</value>
  </data>
  <data name="lblLegend.Text" xml:space="preserve">
    <value>Product name fore color legend</value>
  </data>
  <data name="lblProxy.Text" xml:space="preserve">
    <value>Proxy Price</value>
  </data>
  <data name="Tip_HaveItem.Text" xml:space="preserve">
    <value>You already have some items in your cart, current item requires recursive payment and can't be added with them. Please check out first (or delete other items from your cart) before add this item.</value>
  </data>
  <data name="Tip_HaveSubscriber.Text" xml:space="preserve">
    <value>You have a item which requrie recursive charge in your cart, please check out first (or delete it from cart) before add this item.</value>
  </data>
  <data name="lblAvailableStock.Text" xml:space="preserve">
    <value>Available Stock</value>
  </data>
  <data name="Tip_NotEnoughStock.Text" xml:space="preserve">
    <value>Not enough product stock quantity, or product is already sold out, please contact seller for more detail.</value>
  </data>
  <data name="lblColor_Black.Text" xml:space="preserve">
    <value>Unknown (for non-English auction types)</value>
  </data>
</root>